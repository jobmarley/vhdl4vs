//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from vhdl.g4 by ANTLR 4.9.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.3")]
[System.CLSCompliant(false)]
public partial class vhdlParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		ABS=1, ACCESS=2, ACROSS=3, AFTER=4, ALIAS=5, ALL=6, AND=7, ARCHITECTURE=8, 
		ARRAY=9, ASSERT=10, ATTRIBUTE=11, BEGIN=12, BLOCK=13, BODY=14, BREAK=15, 
		BUFFER=16, BUS=17, CASE=18, COMPONENT=19, CONFIGURATION=20, CONSTANT=21, 
		DISCONNECT=22, DOWNTO=23, END=24, ENTITY=25, ELSE=26, ELSIF=27, EXIT=28, 
		FILE=29, FOR=30, FUNCTION=31, GENERATE=32, GENERIC=33, GROUP=34, GUARDED=35, 
		IF=36, IMPURE=37, IN=38, INERTIAL=39, INOUT=40, IS=41, LABEL=42, LIBRARY=43, 
		LIMIT=44, LINKAGE=45, LITERAL=46, LOOP=47, MAP=48, MOD=49, NAND=50, NATURE=51, 
		NEW=52, NEXT=53, NOISE=54, NOR=55, NOT=56, NULL_=57, OF=58, ON=59, OPEN=60, 
		OR=61, OTHERS=62, OUT=63, PACKAGE=64, PORT=65, POSTPONED=66, PROCESS=67, 
		PROCEDURE=68, PROCEDURAL=69, PURE=70, QUANTITY=71, RANGE=72, REVERSE_RANGE=73, 
		REJECT=74, REM=75, RECORD=76, REFERENCE=77, REGISTER=78, REPORT=79, RETURN=80, 
		ROL=81, ROR=82, SELECT=83, SEVERITY=84, SHARED=85, SIGNAL=86, SLA=87, 
		SLL=88, SPECTRUM=89, SRA=90, SRL=91, SUBNATURE=92, SUBTYPE=93, TERMINAL=94, 
		THEN=95, THROUGH=96, TO=97, TOLERANCE=98, TRANSPORT=99, TYPE=100, UNAFFECTED=101, 
		UNITS=102, UNTIL=103, USE=104, VARIABLE=105, WAIT=106, WITH=107, WHEN=108, 
		WHILE=109, XNOR=110, XOR=111, BASE_LITERAL=112, BIT_STRING_LITERAL=113, 
		BIT_STRING_LITERAL_BINARY=114, BIT_STRING_LITERAL_OCTAL=115, BIT_STRING_LITERAL_HEX=116, 
		REAL_LITERAL=117, BASIC_IDENTIFIER=118, EXTENDED_IDENTIFIER=119, LETTER=120, 
		COMMENT=121, TAB=122, SPACE=123, NEWLINE=124, CR=125, CHARACTER_LITERAL=126, 
		STRING_LITERAL=127, OTHER_SPECIAL_CHARACTER=128, DOUBLESTAR=129, ASSIGN=130, 
		LE=131, GE=132, ARROW=133, NEQ=134, VARASGN=135, BOX=136, DBLQUOTE=137, 
		SEMI=138, COMMA=139, AMPERSAND=140, LPAREN=141, RPAREN=142, LBRACKET=143, 
		RBRACKET=144, COLON=145, MUL=146, DIV=147, PLUS=148, MINUS=149, LOWERTHAN=150, 
		GREATERTHAN=151, EQ=152, BAR=153, DOT=154, BACKSLASH=155, EXPONENT=156, 
		HEXDIGIT=157, INTEGER=158, DIGIT=159, BASED_INTEGER=160, EXTENDED_DIGIT=161, 
		APOSTROPHE=162;
	public const int
		RULE_abstract_literal = 0, RULE_access_type_definition = 1, RULE_across_aspect = 2, 
		RULE_actual_designator = 3, RULE_actual_parameter_part = 4, RULE_actual_part = 5, 
		RULE_adding_operator = 6, RULE_aggregate = 7, RULE_alias_declaration = 8, 
		RULE_alias_designator = 9, RULE_alias_indication = 10, RULE_allocator = 11, 
		RULE_architecture_body = 12, RULE_architecture_declarative_part = 13, 
		RULE_architecture_statement = 14, RULE_architecture_statement_part = 15, 
		RULE_array_nature_definition = 16, RULE_array_type_definition = 17, RULE_assertion = 18, 
		RULE_assertion_statement = 19, RULE_association_element = 20, RULE_association_list = 21, 
		RULE_attribute_declaration = 22, RULE_attribute_designator = 23, RULE_attribute_specification = 24, 
		RULE_base_unit_declaration = 25, RULE_binding_indication = 26, RULE_block_configuration = 27, 
		RULE_block_declarative_item = 28, RULE_block_declarative_part = 29, RULE_block_header = 30, 
		RULE_block_specification = 31, RULE_block_statement = 32, RULE_block_statement_part = 33, 
		RULE_branch_quantity_declaration = 34, RULE_break_element = 35, RULE_break_list = 36, 
		RULE_break_selector_clause = 37, RULE_break_statement = 38, RULE_case_statement = 39, 
		RULE_case_statement_alternative = 40, RULE_choice = 41, RULE_choices = 42, 
		RULE_component_configuration = 43, RULE_component_declaration = 44, RULE_component_instantiation_statement = 45, 
		RULE_component_specification = 46, RULE_composite_nature_definition = 47, 
		RULE_composite_type_definition = 48, RULE_concurrent_assertion_statement = 49, 
		RULE_concurrent_break_statement = 50, RULE_concurrent_procedure_call_statement = 51, 
		RULE_concurrent_signal_assignment_statement = 52, RULE_condition = 53, 
		RULE_condition_clause = 54, RULE_conditional_signal_assignment = 55, RULE_conditional_waveforms = 56, 
		RULE_configuration_declaration = 57, RULE_configuration_declarative_item = 58, 
		RULE_configuration_declarative_part = 59, RULE_configuration_item = 60, 
		RULE_configuration_specification = 61, RULE_constant_declaration = 62, 
		RULE_constrained_array_definition = 63, RULE_constrained_nature_definition = 64, 
		RULE_constraint = 65, RULE_context_clause = 66, RULE_context_item = 67, 
		RULE_delay_mechanism = 68, RULE_design_file = 69, RULE_design_unit = 70, 
		RULE_designator = 71, RULE_direction = 72, RULE_disconnection_specification = 73, 
		RULE_discrete_range = 74, RULE_element_association = 75, RULE_element_declaration = 76, 
		RULE_element_subnature_definition = 77, RULE_element_subtype_definition = 78, 
		RULE_entity_aspect = 79, RULE_entity_class = 80, RULE_entity_class_entry = 81, 
		RULE_entity_class_entry_list = 82, RULE_entity_declaration = 83, RULE_entity_declarative_item = 84, 
		RULE_entity_declarative_part = 85, RULE_entity_designator = 86, RULE_entity_header = 87, 
		RULE_entity_name_list = 88, RULE_entity_specification = 89, RULE_entity_statement = 90, 
		RULE_entity_statement_part = 91, RULE_entity_tag = 92, RULE_enumeration_literal = 93, 
		RULE_enumeration_type_definition = 94, RULE_exit_statement = 95, RULE_expression = 96, 
		RULE_factor = 97, RULE_file_declaration = 98, RULE_file_logical_name = 99, 
		RULE_file_open_information = 100, RULE_file_type_definition = 101, RULE_formal_parameter_list = 102, 
		RULE_formal_part = 103, RULE_free_quantity_declaration = 104, RULE_generate_statement = 105, 
		RULE_generation_scheme = 106, RULE_generic_clause = 107, RULE_generic_list = 108, 
		RULE_generic_map_aspect = 109, RULE_group_constituent = 110, RULE_group_constituent_list = 111, 
		RULE_group_declaration = 112, RULE_group_template_declaration = 113, RULE_guarded_signal_specification = 114, 
		RULE_identifier = 115, RULE_identifier_list = 116, RULE_if_statement = 117, 
		RULE_index_constraint = 118, RULE_index_specification = 119, RULE_index_subtype_definition = 120, 
		RULE_instantiated_unit = 121, RULE_instantiation_list = 122, RULE_interface_constant_declaration = 123, 
		RULE_interface_declaration = 124, RULE_interface_element = 125, RULE_interface_file_declaration = 126, 
		RULE_interface_signal_list = 127, RULE_interface_port_list = 128, RULE_interface_list = 129, 
		RULE_interface_quantity_declaration = 130, RULE_interface_port_declaration = 131, 
		RULE_interface_signal_declaration = 132, RULE_interface_terminal_declaration = 133, 
		RULE_interface_variable_declaration = 134, RULE_iteration_scheme = 135, 
		RULE_label_colon = 136, RULE_library_clause = 137, RULE_library_unit = 138, 
		RULE_literal = 139, RULE_logical_name = 140, RULE_logical_name_list = 141, 
		RULE_logical_operator = 142, RULE_loop_statement = 143, RULE_signal_mode = 144, 
		RULE_multiplying_operator = 145, RULE_name = 146, RULE_name_part = 147, 
		RULE_selected_name = 148, RULE_selected_name_part = 149, RULE_function_call_or_indexed_name_part = 150, 
		RULE_slice_name_part = 151, RULE_attribute_name_part = 152, RULE_nature_declaration = 153, 
		RULE_nature_definition = 154, RULE_nature_element_declaration = 155, RULE_next_statement = 156, 
		RULE_numeric_literal = 157, RULE_object_declaration = 158, RULE_opts = 159, 
		RULE_package_body = 160, RULE_package_body_declarative_item = 161, RULE_package_body_declarative_part = 162, 
		RULE_package_declaration = 163, RULE_package_declarative_item = 164, RULE_package_declarative_part = 165, 
		RULE_parameter_specification = 166, RULE_physical_literal = 167, RULE_physical_type_definition = 168, 
		RULE_port_clause = 169, RULE_port_list = 170, RULE_port_map_aspect = 171, 
		RULE_primary = 172, RULE_primary_unit = 173, RULE_procedural_declarative_item = 174, 
		RULE_procedural_declarative_part = 175, RULE_procedural_statement_part = 176, 
		RULE_procedure_call = 177, RULE_procedure_call_statement = 178, RULE_process_declarative_item = 179, 
		RULE_process_declarative_part = 180, RULE_process_statement = 181, RULE_process_statement_part = 182, 
		RULE_qualified_expression = 183, RULE_quantity_declaration = 184, RULE_quantity_list = 185, 
		RULE_quantity_specification = 186, RULE_range_decl = 187, RULE_explicit_range = 188, 
		RULE_range_constraint = 189, RULE_record_nature_definition = 190, RULE_record_type_definition = 191, 
		RULE_relation = 192, RULE_relational_operator = 193, RULE_report_statement = 194, 
		RULE_return_statement = 195, RULE_scalar_nature_definition = 196, RULE_scalar_type_definition = 197, 
		RULE_secondary_unit = 198, RULE_secondary_unit_declaration = 199, RULE_selected_signal_assignment = 200, 
		RULE_selected_waveforms = 201, RULE_sensitivity_clause = 202, RULE_sensitivity_list = 203, 
		RULE_sequence_of_statements = 204, RULE_sequential_statement = 205, RULE_shift_expression = 206, 
		RULE_shift_operator = 207, RULE_signal_assignment_statement = 208, RULE_signal_declaration = 209, 
		RULE_signal_kind = 210, RULE_signal_list = 211, RULE_signature = 212, 
		RULE_simple_expression = 213, RULE_simple_simultaneous_statement = 214, 
		RULE_simultaneous_alternative = 215, RULE_simultaneous_case_statement = 216, 
		RULE_simultaneous_if_statement = 217, RULE_simultaneous_procedural_statement = 218, 
		RULE_simultaneous_statement = 219, RULE_simultaneous_statement_part = 220, 
		RULE_source_aspect = 221, RULE_source_quantity_declaration = 222, RULE_step_limit_specification = 223, 
		RULE_subnature_declaration = 224, RULE_subnature_indication = 225, RULE_subprogram_body = 226, 
		RULE_subprogram_declaration = 227, RULE_subprogram_declarative_item = 228, 
		RULE_subprogram_declarative_part = 229, RULE_subprogram_kind = 230, RULE_subprogram_specification = 231, 
		RULE_procedure_specification = 232, RULE_function_specification = 233, 
		RULE_subprogram_statement_part = 234, RULE_subtype_declaration = 235, 
		RULE_subtype_indication = 236, RULE_suffix = 237, RULE_target = 238, RULE_term = 239, 
		RULE_terminal_aspect = 240, RULE_terminal_declaration = 241, RULE_through_aspect = 242, 
		RULE_timeout_clause = 243, RULE_tolerance_aspect = 244, RULE_type_declaration = 245, 
		RULE_type_definition = 246, RULE_unconstrained_array_definition = 247, 
		RULE_unconstrained_nature_definition = 248, RULE_use_clause = 249, RULE_variable_assignment_statement = 250, 
		RULE_variable_declaration = 251, RULE_wait_statement = 252, RULE_waveform = 253, 
		RULE_waveform_element = 254;
	public static readonly string[] ruleNames = {
		"abstract_literal", "access_type_definition", "across_aspect", "actual_designator", 
		"actual_parameter_part", "actual_part", "adding_operator", "aggregate", 
		"alias_declaration", "alias_designator", "alias_indication", "allocator", 
		"architecture_body", "architecture_declarative_part", "architecture_statement", 
		"architecture_statement_part", "array_nature_definition", "array_type_definition", 
		"assertion", "assertion_statement", "association_element", "association_list", 
		"attribute_declaration", "attribute_designator", "attribute_specification", 
		"base_unit_declaration", "binding_indication", "block_configuration", 
		"block_declarative_item", "block_declarative_part", "block_header", "block_specification", 
		"block_statement", "block_statement_part", "branch_quantity_declaration", 
		"break_element", "break_list", "break_selector_clause", "break_statement", 
		"case_statement", "case_statement_alternative", "choice", "choices", "component_configuration", 
		"component_declaration", "component_instantiation_statement", "component_specification", 
		"composite_nature_definition", "composite_type_definition", "concurrent_assertion_statement", 
		"concurrent_break_statement", "concurrent_procedure_call_statement", "concurrent_signal_assignment_statement", 
		"condition", "condition_clause", "conditional_signal_assignment", "conditional_waveforms", 
		"configuration_declaration", "configuration_declarative_item", "configuration_declarative_part", 
		"configuration_item", "configuration_specification", "constant_declaration", 
		"constrained_array_definition", "constrained_nature_definition", "constraint", 
		"context_clause", "context_item", "delay_mechanism", "design_file", "design_unit", 
		"designator", "direction", "disconnection_specification", "discrete_range", 
		"element_association", "element_declaration", "element_subnature_definition", 
		"element_subtype_definition", "entity_aspect", "entity_class", "entity_class_entry", 
		"entity_class_entry_list", "entity_declaration", "entity_declarative_item", 
		"entity_declarative_part", "entity_designator", "entity_header", "entity_name_list", 
		"entity_specification", "entity_statement", "entity_statement_part", "entity_tag", 
		"enumeration_literal", "enumeration_type_definition", "exit_statement", 
		"expression", "factor", "file_declaration", "file_logical_name", "file_open_information", 
		"file_type_definition", "formal_parameter_list", "formal_part", "free_quantity_declaration", 
		"generate_statement", "generation_scheme", "generic_clause", "generic_list", 
		"generic_map_aspect", "group_constituent", "group_constituent_list", "group_declaration", 
		"group_template_declaration", "guarded_signal_specification", "identifier", 
		"identifier_list", "if_statement", "index_constraint", "index_specification", 
		"index_subtype_definition", "instantiated_unit", "instantiation_list", 
		"interface_constant_declaration", "interface_declaration", "interface_element", 
		"interface_file_declaration", "interface_signal_list", "interface_port_list", 
		"interface_list", "interface_quantity_declaration", "interface_port_declaration", 
		"interface_signal_declaration", "interface_terminal_declaration", "interface_variable_declaration", 
		"iteration_scheme", "label_colon", "library_clause", "library_unit", "literal", 
		"logical_name", "logical_name_list", "logical_operator", "loop_statement", 
		"signal_mode", "multiplying_operator", "name", "name_part", "selected_name", 
		"selected_name_part", "function_call_or_indexed_name_part", "slice_name_part", 
		"attribute_name_part", "nature_declaration", "nature_definition", "nature_element_declaration", 
		"next_statement", "numeric_literal", "object_declaration", "opts", "package_body", 
		"package_body_declarative_item", "package_body_declarative_part", "package_declaration", 
		"package_declarative_item", "package_declarative_part", "parameter_specification", 
		"physical_literal", "physical_type_definition", "port_clause", "port_list", 
		"port_map_aspect", "primary", "primary_unit", "procedural_declarative_item", 
		"procedural_declarative_part", "procedural_statement_part", "procedure_call", 
		"procedure_call_statement", "process_declarative_item", "process_declarative_part", 
		"process_statement", "process_statement_part", "qualified_expression", 
		"quantity_declaration", "quantity_list", "quantity_specification", "range_decl", 
		"explicit_range", "range_constraint", "record_nature_definition", "record_type_definition", 
		"relation", "relational_operator", "report_statement", "return_statement", 
		"scalar_nature_definition", "scalar_type_definition", "secondary_unit", 
		"secondary_unit_declaration", "selected_signal_assignment", "selected_waveforms", 
		"sensitivity_clause", "sensitivity_list", "sequence_of_statements", "sequential_statement", 
		"shift_expression", "shift_operator", "signal_assignment_statement", "signal_declaration", 
		"signal_kind", "signal_list", "signature", "simple_expression", "simple_simultaneous_statement", 
		"simultaneous_alternative", "simultaneous_case_statement", "simultaneous_if_statement", 
		"simultaneous_procedural_statement", "simultaneous_statement", "simultaneous_statement_part", 
		"source_aspect", "source_quantity_declaration", "step_limit_specification", 
		"subnature_declaration", "subnature_indication", "subprogram_body", "subprogram_declaration", 
		"subprogram_declarative_item", "subprogram_declarative_part", "subprogram_kind", 
		"subprogram_specification", "procedure_specification", "function_specification", 
		"subprogram_statement_part", "subtype_declaration", "subtype_indication", 
		"suffix", "target", "term", "terminal_aspect", "terminal_declaration", 
		"through_aspect", "timeout_clause", "tolerance_aspect", "type_declaration", 
		"type_definition", "unconstrained_array_definition", "unconstrained_nature_definition", 
		"use_clause", "variable_assignment_statement", "variable_declaration", 
		"wait_statement", "waveform", "waveform_element"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, "'\n'", "'\r'", null, null, null, "'**'", "'=='", 
		"'<='", "'>='", "'=>'", "'/='", "':='", "'<>'", "'\"'", "';'", "','", 
		"'&'", "'('", "')'", "'['", "']'", "':'", "'*'", "'/'", "'+'", "'-'", 
		"'<'", "'>'", "'='", "'|'", "'.'", "'\\'", null, null, null, null, null, 
		null, "'''"
	};
	private static readonly string[] _SymbolicNames = {
		null, "ABS", "ACCESS", "ACROSS", "AFTER", "ALIAS", "ALL", "AND", "ARCHITECTURE", 
		"ARRAY", "ASSERT", "ATTRIBUTE", "BEGIN", "BLOCK", "BODY", "BREAK", "BUFFER", 
		"BUS", "CASE", "COMPONENT", "CONFIGURATION", "CONSTANT", "DISCONNECT", 
		"DOWNTO", "END", "ENTITY", "ELSE", "ELSIF", "EXIT", "FILE", "FOR", "FUNCTION", 
		"GENERATE", "GENERIC", "GROUP", "GUARDED", "IF", "IMPURE", "IN", "INERTIAL", 
		"INOUT", "IS", "LABEL", "LIBRARY", "LIMIT", "LINKAGE", "LITERAL", "LOOP", 
		"MAP", "MOD", "NAND", "NATURE", "NEW", "NEXT", "NOISE", "NOR", "NOT", 
		"NULL_", "OF", "ON", "OPEN", "OR", "OTHERS", "OUT", "PACKAGE", "PORT", 
		"POSTPONED", "PROCESS", "PROCEDURE", "PROCEDURAL", "PURE", "QUANTITY", 
		"RANGE", "REVERSE_RANGE", "REJECT", "REM", "RECORD", "REFERENCE", "REGISTER", 
		"REPORT", "RETURN", "ROL", "ROR", "SELECT", "SEVERITY", "SHARED", "SIGNAL", 
		"SLA", "SLL", "SPECTRUM", "SRA", "SRL", "SUBNATURE", "SUBTYPE", "TERMINAL", 
		"THEN", "THROUGH", "TO", "TOLERANCE", "TRANSPORT", "TYPE", "UNAFFECTED", 
		"UNITS", "UNTIL", "USE", "VARIABLE", "WAIT", "WITH", "WHEN", "WHILE", 
		"XNOR", "XOR", "BASE_LITERAL", "BIT_STRING_LITERAL", "BIT_STRING_LITERAL_BINARY", 
		"BIT_STRING_LITERAL_OCTAL", "BIT_STRING_LITERAL_HEX", "REAL_LITERAL", 
		"BASIC_IDENTIFIER", "EXTENDED_IDENTIFIER", "LETTER", "COMMENT", "TAB", 
		"SPACE", "NEWLINE", "CR", "CHARACTER_LITERAL", "STRING_LITERAL", "OTHER_SPECIAL_CHARACTER", 
		"DOUBLESTAR", "ASSIGN", "LE", "GE", "ARROW", "NEQ", "VARASGN", "BOX", 
		"DBLQUOTE", "SEMI", "COMMA", "AMPERSAND", "LPAREN", "RPAREN", "LBRACKET", 
		"RBRACKET", "COLON", "MUL", "DIV", "PLUS", "MINUS", "LOWERTHAN", "GREATERTHAN", 
		"EQ", "BAR", "DOT", "BACKSLASH", "EXPONENT", "HEXDIGIT", "INTEGER", "DIGIT", 
		"BASED_INTEGER", "EXTENDED_DIGIT", "APOSTROPHE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "vhdl.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static vhdlParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public vhdlParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public vhdlParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class Abstract_literalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(vhdlParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REAL_LITERAL() { return GetToken(vhdlParser.REAL_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BASE_LITERAL() { return GetToken(vhdlParser.BASE_LITERAL, 0); }
		public Abstract_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_abstract_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterAbstract_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitAbstract_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAbstract_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Abstract_literalContext abstract_literal() {
		Abstract_literalContext _localctx = new Abstract_literalContext(Context, State);
		EnterRule(_localctx, 0, RULE_abstract_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 510;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 112)) & ~0x3f) == 0 && ((1L << (_la - 112)) & ((1L << (BASE_LITERAL - 112)) | (1L << (REAL_LITERAL - 112)) | (1L << (INTEGER - 112)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Access_type_definitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACCESS() { return GetToken(vhdlParser.ACCESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Subtype_indicationContext subtype_indication() {
			return GetRuleContext<Subtype_indicationContext>(0);
		}
		public Access_type_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_access_type_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterAccess_type_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitAccess_type_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccess_type_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Access_type_definitionContext access_type_definition() {
		Access_type_definitionContext _localctx = new Access_type_definitionContext(Context, State);
		EnterRule(_localctx, 2, RULE_access_type_definition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 512;
			Match(ACCESS);
			State = 513;
			subtype_indication();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Across_aspectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Identifier_listContext identifier_list() {
			return GetRuleContext<Identifier_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACROSS() { return GetToken(vhdlParser.ACROSS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Tolerance_aspectContext tolerance_aspect() {
			return GetRuleContext<Tolerance_aspectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARASGN() { return GetToken(vhdlParser.VARASGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Across_aspectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_across_aspect; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterAcross_aspect(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitAcross_aspect(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAcross_aspect(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Across_aspectContext across_aspect() {
		Across_aspectContext _localctx = new Across_aspectContext(Context, State);
		EnterRule(_localctx, 4, RULE_across_aspect);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 515;
			identifier_list();
			State = 517;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TOLERANCE) {
				{
				State = 516;
				tolerance_aspect();
				}
			}

			State = 521;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==VARASGN) {
				{
				State = 519;
				Match(VARASGN);
				State = 520;
				expression();
				}
			}

			State = 523;
			Match(ACROSS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Actual_designatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(vhdlParser.OPEN, 0); }
		public Actual_designatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actual_designator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterActual_designator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitActual_designator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActual_designator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Actual_designatorContext actual_designator() {
		Actual_designatorContext _localctx = new Actual_designatorContext(Context, State);
		EnterRule(_localctx, 6, RULE_actual_designator);
		try {
			State = 527;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ABS:
			case NEW:
			case NOT:
			case NULL_:
			case BASE_LITERAL:
			case BIT_STRING_LITERAL:
			case REAL_LITERAL:
			case BASIC_IDENTIFIER:
			case EXTENDED_IDENTIFIER:
			case CHARACTER_LITERAL:
			case STRING_LITERAL:
			case LPAREN:
			case PLUS:
			case MINUS:
			case INTEGER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 525;
				expression();
				}
				break;
			case OPEN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 526;
				Match(OPEN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Actual_parameter_partContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Association_listContext association_list() {
			return GetRuleContext<Association_listContext>(0);
		}
		public Actual_parameter_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actual_parameter_part; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterActual_parameter_part(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitActual_parameter_part(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActual_parameter_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Actual_parameter_partContext actual_parameter_part() {
		Actual_parameter_partContext _localctx = new Actual_parameter_partContext(Context, State);
		EnterRule(_localctx, 8, RULE_actual_parameter_part);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 529;
			association_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Actual_partContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(vhdlParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Actual_designatorContext actual_designator() {
			return GetRuleContext<Actual_designatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(vhdlParser.RPAREN, 0); }
		public Actual_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actual_part; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterActual_part(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitActual_part(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActual_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Actual_partContext actual_part() {
		Actual_partContext _localctx = new Actual_partContext(Context, State);
		EnterRule(_localctx, 10, RULE_actual_part);
		try {
			State = 537;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 531;
				name();
				State = 532;
				Match(LPAREN);
				State = 533;
				actual_designator();
				State = 534;
				Match(RPAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 536;
				actual_designator();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Adding_operatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(vhdlParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(vhdlParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AMPERSAND() { return GetToken(vhdlParser.AMPERSAND, 0); }
		public Adding_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_adding_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterAdding_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitAdding_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdding_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Adding_operatorContext adding_operator() {
		Adding_operatorContext _localctx = new Adding_operatorContext(Context, State);
		EnterRule(_localctx, 12, RULE_adding_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 539;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 140)) & ~0x3f) == 0 && ((1L << (_la - 140)) & ((1L << (AMPERSAND - 140)) | (1L << (PLUS - 140)) | (1L << (MINUS - 140)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AggregateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(vhdlParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Element_associationContext[] element_association() {
			return GetRuleContexts<Element_associationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Element_associationContext element_association(int i) {
			return GetRuleContext<Element_associationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(vhdlParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(vhdlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(vhdlParser.COMMA, i);
		}
		public AggregateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aggregate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterAggregate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitAggregate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAggregate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AggregateContext aggregate() {
		AggregateContext _localctx = new AggregateContext(Context, State);
		EnterRule(_localctx, 14, RULE_aggregate);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 541;
			Match(LPAREN);
			State = 542;
			element_association();
			State = 547;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 543;
				Match(COMMA);
				State = 544;
				element_association();
				}
				}
				State = 549;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 550;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alias_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALIAS() { return GetToken(vhdlParser.ALIAS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Alias_designatorContext alias_designator() {
			return GetRuleContext<Alias_designatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(vhdlParser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(vhdlParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(vhdlParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Alias_indicationContext alias_indication() {
			return GetRuleContext<Alias_indicationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SignatureContext signature() {
			return GetRuleContext<SignatureContext>(0);
		}
		public Alias_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alias_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterAlias_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitAlias_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlias_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alias_declarationContext alias_declaration() {
		Alias_declarationContext _localctx = new Alias_declarationContext(Context, State);
		EnterRule(_localctx, 16, RULE_alias_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 552;
			Match(ALIAS);
			State = 553;
			alias_designator();
			State = 556;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 554;
				Match(COLON);
				State = 555;
				alias_indication();
				}
			}

			State = 558;
			Match(IS);
			State = 559;
			name();
			State = 561;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LBRACKET) {
				{
				State = 560;
				signature();
				}
			}

			State = 563;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alias_designatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARACTER_LITERAL() { return GetToken(vhdlParser.CHARACTER_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(vhdlParser.STRING_LITERAL, 0); }
		public Alias_designatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alias_designator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterAlias_designator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitAlias_designator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlias_designator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alias_designatorContext alias_designator() {
		Alias_designatorContext _localctx = new Alias_designatorContext(Context, State);
		EnterRule(_localctx, 18, RULE_alias_designator);
		try {
			State = 568;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BASIC_IDENTIFIER:
			case EXTENDED_IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 565;
				identifier();
				}
				break;
			case CHARACTER_LITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 566;
				Match(CHARACTER_LITERAL);
				}
				break;
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 567;
				Match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alias_indicationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Subtype_indicationContext subtype_indication() {
			return GetRuleContext<Subtype_indicationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Subnature_indicationContext subnature_indication() {
			return GetRuleContext<Subnature_indicationContext>(0);
		}
		public Alias_indicationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alias_indication; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterAlias_indication(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitAlias_indication(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlias_indication(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alias_indicationContext alias_indication() {
		Alias_indicationContext _localctx = new Alias_indicationContext(Context, State);
		EnterRule(_localctx, 20, RULE_alias_indication);
		try {
			State = 572;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 570;
				subtype_indication();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 571;
				subnature_indication();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AllocatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW() { return GetToken(vhdlParser.NEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_expressionContext qualified_expression() {
			return GetRuleContext<Qualified_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Subtype_indicationContext subtype_indication() {
			return GetRuleContext<Subtype_indicationContext>(0);
		}
		public AllocatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_allocator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterAllocator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitAllocator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAllocator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AllocatorContext allocator() {
		AllocatorContext _localctx = new AllocatorContext(Context, State);
		EnterRule(_localctx, 22, RULE_allocator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 574;
			Match(NEW);
			State = 577;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				{
				State = 575;
				qualified_expression();
				}
				break;
			case 2:
				{
				State = 576;
				subtype_indication();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Architecture_bodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ARCHITECTURE() { return GetTokens(vhdlParser.ARCHITECTURE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARCHITECTURE(int i) {
			return GetToken(vhdlParser.ARCHITECTURE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(vhdlParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(vhdlParser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Architecture_declarative_partContext architecture_declarative_part() {
			return GetRuleContext<Architecture_declarative_partContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN() { return GetToken(vhdlParser.BEGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Architecture_statement_partContext architecture_statement_part() {
			return GetRuleContext<Architecture_statement_partContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(vhdlParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(vhdlParser.SEMI, 0); }
		public Architecture_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_architecture_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterArchitecture_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitArchitecture_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArchitecture_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Architecture_bodyContext architecture_body() {
		Architecture_bodyContext _localctx = new Architecture_bodyContext(Context, State);
		EnterRule(_localctx, 24, RULE_architecture_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 579;
			Match(ARCHITECTURE);
			State = 580;
			identifier();
			State = 581;
			Match(OF);
			State = 582;
			identifier();
			State = 583;
			Match(IS);
			State = 584;
			architecture_declarative_part();
			State = 585;
			Match(BEGIN);
			State = 586;
			architecture_statement_part();
			State = 587;
			Match(END);
			State = 589;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ARCHITECTURE) {
				{
				State = 588;
				Match(ARCHITECTURE);
				}
			}

			State = 592;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BASIC_IDENTIFIER || _la==EXTENDED_IDENTIFIER) {
				{
				State = 591;
				identifier();
				}
			}

			State = 594;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Architecture_declarative_partContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Block_declarative_itemContext[] block_declarative_item() {
			return GetRuleContexts<Block_declarative_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Block_declarative_itemContext block_declarative_item(int i) {
			return GetRuleContext<Block_declarative_itemContext>(i);
		}
		public Architecture_declarative_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_architecture_declarative_part; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterArchitecture_declarative_part(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitArchitecture_declarative_part(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArchitecture_declarative_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Architecture_declarative_partContext architecture_declarative_part() {
		Architecture_declarative_partContext _localctx = new Architecture_declarative_partContext(Context, State);
		EnterRule(_localctx, 26, RULE_architecture_declarative_part);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 599;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALIAS) | (1L << ATTRIBUTE) | (1L << COMPONENT) | (1L << CONSTANT) | (1L << DISCONNECT) | (1L << FILE) | (1L << FOR) | (1L << FUNCTION) | (1L << GROUP) | (1L << IMPURE) | (1L << LIMIT) | (1L << NATURE))) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (PROCEDURE - 68)) | (1L << (PURE - 68)) | (1L << (QUANTITY - 68)) | (1L << (SHARED - 68)) | (1L << (SIGNAL - 68)) | (1L << (SUBNATURE - 68)) | (1L << (SUBTYPE - 68)) | (1L << (TERMINAL - 68)) | (1L << (TYPE - 68)) | (1L << (USE - 68)) | (1L << (VARIABLE - 68)))) != 0)) {
				{
				{
				State = 596;
				block_declarative_item();
				}
				}
				State = 601;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Architecture_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Block_statementContext block_statement() {
			return GetRuleContext<Block_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Process_statementContext process_statement() {
			return GetRuleContext<Process_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Concurrent_procedure_call_statementContext concurrent_procedure_call_statement() {
			return GetRuleContext<Concurrent_procedure_call_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Label_colonContext label_colon() {
			return GetRuleContext<Label_colonContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Concurrent_assertion_statementContext concurrent_assertion_statement() {
			return GetRuleContext<Concurrent_assertion_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Concurrent_signal_assignment_statementContext concurrent_signal_assignment_statement() {
			return GetRuleContext<Concurrent_signal_assignment_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POSTPONED() { return GetToken(vhdlParser.POSTPONED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Component_instantiation_statementContext component_instantiation_statement() {
			return GetRuleContext<Component_instantiation_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Generate_statementContext generate_statement() {
			return GetRuleContext<Generate_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Concurrent_break_statementContext concurrent_break_statement() {
			return GetRuleContext<Concurrent_break_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Simultaneous_statementContext simultaneous_statement() {
			return GetRuleContext<Simultaneous_statementContext>(0);
		}
		public Architecture_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_architecture_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterArchitecture_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitArchitecture_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArchitecture_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Architecture_statementContext architecture_statement() {
		Architecture_statementContext _localctx = new Architecture_statementContext(Context, State);
		EnterRule(_localctx, 28, RULE_architecture_statement);
		try {
			State = 623;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 602;
				block_statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 603;
				process_statement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 605;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
				case 1:
					{
					State = 604;
					label_colon();
					}
					break;
				}
				State = 607;
				concurrent_procedure_call_statement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 609;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
				case 1:
					{
					State = 608;
					label_colon();
					}
					break;
				}
				State = 611;
				concurrent_assertion_statement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 613;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
				case 1:
					{
					State = 612;
					label_colon();
					}
					break;
				}
				State = 616;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
				case 1:
					{
					State = 615;
					Match(POSTPONED);
					}
					break;
				}
				State = 618;
				concurrent_signal_assignment_statement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 619;
				component_instantiation_statement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 620;
				generate_statement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 621;
				concurrent_break_statement();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 622;
				simultaneous_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Architecture_statement_partContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Architecture_statementContext[] architecture_statement() {
			return GetRuleContexts<Architecture_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Architecture_statementContext architecture_statement(int i) {
			return GetRuleContext<Architecture_statementContext>(i);
		}
		public Architecture_statement_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_architecture_statement_part; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterArchitecture_statement_part(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitArchitecture_statement_part(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArchitecture_statement_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Architecture_statement_partContext architecture_statement_part() {
		Architecture_statement_partContext _localctx = new Architecture_statement_partContext(Context, State);
		EnterRule(_localctx, 30, RULE_architecture_statement_part);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 628;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABS) | (1L << ASSERT) | (1L << BREAK) | (1L << CASE) | (1L << IF) | (1L << NEW) | (1L << NOT) | (1L << NULL_))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (POSTPONED - 66)) | (1L << (PROCESS - 66)) | (1L << (PROCEDURAL - 66)) | (1L << (WITH - 66)) | (1L << (BASE_LITERAL - 66)) | (1L << (BIT_STRING_LITERAL - 66)) | (1L << (REAL_LITERAL - 66)) | (1L << (BASIC_IDENTIFIER - 66)) | (1L << (EXTENDED_IDENTIFIER - 66)) | (1L << (CHARACTER_LITERAL - 66)) | (1L << (STRING_LITERAL - 66)))) != 0) || ((((_la - 141)) & ~0x3f) == 0 && ((1L << (_la - 141)) & ((1L << (LPAREN - 141)) | (1L << (PLUS - 141)) | (1L << (MINUS - 141)) | (1L << (INTEGER - 141)))) != 0)) {
				{
				{
				State = 625;
				architecture_statement();
				}
				}
				State = 630;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_nature_definitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Unconstrained_nature_definitionContext unconstrained_nature_definition() {
			return GetRuleContext<Unconstrained_nature_definitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Constrained_nature_definitionContext constrained_nature_definition() {
			return GetRuleContext<Constrained_nature_definitionContext>(0);
		}
		public Array_nature_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_nature_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterArray_nature_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitArray_nature_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray_nature_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Array_nature_definitionContext array_nature_definition() {
		Array_nature_definitionContext _localctx = new Array_nature_definitionContext(Context, State);
		EnterRule(_localctx, 32, RULE_array_nature_definition);
		try {
			State = 633;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 631;
				unconstrained_nature_definition();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 632;
				constrained_nature_definition();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_type_definitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Unconstrained_array_definitionContext unconstrained_array_definition() {
			return GetRuleContext<Unconstrained_array_definitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Constrained_array_definitionContext constrained_array_definition() {
			return GetRuleContext<Constrained_array_definitionContext>(0);
		}
		public Array_type_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_type_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterArray_type_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitArray_type_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray_type_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Array_type_definitionContext array_type_definition() {
		Array_type_definitionContext _localctx = new Array_type_definitionContext(Context, State);
		EnterRule(_localctx, 34, RULE_array_type_definition);
		try {
			State = 637;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 635;
				unconstrained_array_definition();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 636;
				constrained_array_definition();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssertionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSERT() { return GetToken(vhdlParser.ASSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPORT() { return GetToken(vhdlParser.REPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEVERITY() { return GetToken(vhdlParser.SEVERITY, 0); }
		public AssertionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assertion; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterAssertion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitAssertion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssertion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssertionContext assertion() {
		AssertionContext _localctx = new AssertionContext(Context, State);
		EnterRule(_localctx, 36, RULE_assertion);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 639;
			Match(ASSERT);
			State = 640;
			condition();
			State = 643;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==REPORT) {
				{
				State = 641;
				Match(REPORT);
				State = 642;
				expression();
				}
			}

			State = 647;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEVERITY) {
				{
				State = 645;
				Match(SEVERITY);
				State = 646;
				expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assertion_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssertionContext assertion() {
			return GetRuleContext<AssertionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(vhdlParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Label_colonContext label_colon() {
			return GetRuleContext<Label_colonContext>(0);
		}
		public Assertion_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assertion_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterAssertion_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitAssertion_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssertion_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Assertion_statementContext assertion_statement() {
		Assertion_statementContext _localctx = new Assertion_statementContext(Context, State);
		EnterRule(_localctx, 38, RULE_assertion_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 650;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BASIC_IDENTIFIER || _la==EXTENDED_IDENTIFIER) {
				{
				State = 649;
				label_colon();
				}
			}

			State = 652;
			assertion();
			State = 653;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Association_elementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Actual_partContext actual_part() {
			return GetRuleContext<Actual_partContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Formal_partContext formal_part() {
			return GetRuleContext<Formal_partContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROW() { return GetToken(vhdlParser.ARROW, 0); }
		public Association_elementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_association_element; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterAssociation_element(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitAssociation_element(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssociation_element(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Association_elementContext association_element() {
		Association_elementContext _localctx = new Association_elementContext(Context, State);
		EnterRule(_localctx, 40, RULE_association_element);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 658;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				{
				State = 655;
				formal_part();
				State = 656;
				Match(ARROW);
				}
				break;
			}
			State = 660;
			actual_part();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Association_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Association_elementContext[] association_element() {
			return GetRuleContexts<Association_elementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Association_elementContext association_element(int i) {
			return GetRuleContext<Association_elementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(vhdlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(vhdlParser.COMMA, i);
		}
		public Association_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_association_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterAssociation_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitAssociation_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssociation_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Association_listContext association_list() {
		Association_listContext _localctx = new Association_listContext(Context, State);
		EnterRule(_localctx, 42, RULE_association_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 662;
			association_element();
			State = 667;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 663;
				Match(COMMA);
				State = 664;
				association_element();
				}
				}
				State = 669;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attribute_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATTRIBUTE() { return GetToken(vhdlParser.ATTRIBUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Label_colonContext label_colon() {
			return GetRuleContext<Label_colonContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(vhdlParser.SEMI, 0); }
		public Attribute_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterAttribute_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitAttribute_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Attribute_declarationContext attribute_declaration() {
		Attribute_declarationContext _localctx = new Attribute_declarationContext(Context, State);
		EnterRule(_localctx, 44, RULE_attribute_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 670;
			Match(ATTRIBUTE);
			State = 671;
			label_colon();
			State = 672;
			name();
			State = 673;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attribute_designatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANGE() { return GetToken(vhdlParser.RANGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REVERSE_RANGE() { return GetToken(vhdlParser.REVERSE_RANGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACROSS() { return GetToken(vhdlParser.ACROSS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THROUGH() { return GetToken(vhdlParser.THROUGH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFERENCE() { return GetToken(vhdlParser.REFERENCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOLERANCE() { return GetToken(vhdlParser.TOLERANCE, 0); }
		public Attribute_designatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute_designator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterAttribute_designator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitAttribute_designator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute_designator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Attribute_designatorContext attribute_designator() {
		Attribute_designatorContext _localctx = new Attribute_designatorContext(Context, State);
		EnterRule(_localctx, 46, RULE_attribute_designator);
		try {
			State = 682;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BASIC_IDENTIFIER:
			case EXTENDED_IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 675;
				identifier();
				}
				break;
			case RANGE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 676;
				Match(RANGE);
				}
				break;
			case REVERSE_RANGE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 677;
				Match(REVERSE_RANGE);
				}
				break;
			case ACROSS:
				EnterOuterAlt(_localctx, 4);
				{
				State = 678;
				Match(ACROSS);
				}
				break;
			case THROUGH:
				EnterOuterAlt(_localctx, 5);
				{
				State = 679;
				Match(THROUGH);
				}
				break;
			case REFERENCE:
				EnterOuterAlt(_localctx, 6);
				{
				State = 680;
				Match(REFERENCE);
				}
				break;
			case TOLERANCE:
				EnterOuterAlt(_localctx, 7);
				{
				State = 681;
				Match(TOLERANCE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attribute_specificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATTRIBUTE() { return GetToken(vhdlParser.ATTRIBUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Attribute_designatorContext attribute_designator() {
			return GetRuleContext<Attribute_designatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(vhdlParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Entity_specificationContext entity_specification() {
			return GetRuleContext<Entity_specificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(vhdlParser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(vhdlParser.SEMI, 0); }
		public Attribute_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute_specification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterAttribute_specification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitAttribute_specification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute_specification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Attribute_specificationContext attribute_specification() {
		Attribute_specificationContext _localctx = new Attribute_specificationContext(Context, State);
		EnterRule(_localctx, 48, RULE_attribute_specification);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 684;
			Match(ATTRIBUTE);
			State = 685;
			attribute_designator();
			State = 686;
			Match(OF);
			State = 687;
			entity_specification();
			State = 688;
			Match(IS);
			State = 689;
			expression();
			State = 690;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Base_unit_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(vhdlParser.SEMI, 0); }
		public Base_unit_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_base_unit_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterBase_unit_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitBase_unit_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBase_unit_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Base_unit_declarationContext base_unit_declaration() {
		Base_unit_declarationContext _localctx = new Base_unit_declarationContext(Context, State);
		EnterRule(_localctx, 50, RULE_base_unit_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 692;
			identifier();
			State = 693;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Binding_indicationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USE() { return GetToken(vhdlParser.USE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Entity_aspectContext entity_aspect() {
			return GetRuleContext<Entity_aspectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Generic_map_aspectContext generic_map_aspect() {
			return GetRuleContext<Generic_map_aspectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Port_map_aspectContext port_map_aspect() {
			return GetRuleContext<Port_map_aspectContext>(0);
		}
		public Binding_indicationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binding_indication; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterBinding_indication(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitBinding_indication(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinding_indication(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Binding_indicationContext binding_indication() {
		Binding_indicationContext _localctx = new Binding_indicationContext(Context, State);
		EnterRule(_localctx, 52, RULE_binding_indication);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 697;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==USE) {
				{
				State = 695;
				Match(USE);
				State = 696;
				entity_aspect();
				}
			}

			State = 700;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==GENERIC) {
				{
				State = 699;
				generic_map_aspect();
				}
			}

			State = 703;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PORT) {
				{
				State = 702;
				port_map_aspect();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Block_configurationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FOR() { return GetTokens(vhdlParser.FOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR(int i) {
			return GetToken(vhdlParser.FOR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Block_specificationContext block_specification() {
			return GetRuleContext<Block_specificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(vhdlParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(vhdlParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Use_clauseContext[] use_clause() {
			return GetRuleContexts<Use_clauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Use_clauseContext use_clause(int i) {
			return GetRuleContext<Use_clauseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Configuration_itemContext[] configuration_item() {
			return GetRuleContexts<Configuration_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Configuration_itemContext configuration_item(int i) {
			return GetRuleContext<Configuration_itemContext>(i);
		}
		public Block_configurationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block_configuration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterBlock_configuration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitBlock_configuration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock_configuration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Block_configurationContext block_configuration() {
		Block_configurationContext _localctx = new Block_configurationContext(Context, State);
		EnterRule(_localctx, 54, RULE_block_configuration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 705;
			Match(FOR);
			State = 706;
			block_specification();
			State = 710;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==USE) {
				{
				{
				State = 707;
				use_clause();
				}
				}
				State = 712;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 716;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==FOR) {
				{
				{
				State = 713;
				configuration_item();
				}
				}
				State = 718;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 719;
			Match(END);
			State = 720;
			Match(FOR);
			State = 721;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Block_declarative_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Subprogram_declarationContext subprogram_declaration() {
			return GetRuleContext<Subprogram_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Subprogram_bodyContext subprogram_body() {
			return GetRuleContext<Subprogram_bodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_declarationContext type_declaration() {
			return GetRuleContext<Type_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Subtype_declarationContext subtype_declaration() {
			return GetRuleContext<Subtype_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Constant_declarationContext constant_declaration() {
			return GetRuleContext<Constant_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Signal_declarationContext signal_declaration() {
			return GetRuleContext<Signal_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variable_declarationContext variable_declaration() {
			return GetRuleContext<Variable_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public File_declarationContext file_declaration() {
			return GetRuleContext<File_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alias_declarationContext alias_declaration() {
			return GetRuleContext<Alias_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Component_declarationContext component_declaration() {
			return GetRuleContext<Component_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Attribute_declarationContext attribute_declaration() {
			return GetRuleContext<Attribute_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Attribute_specificationContext attribute_specification() {
			return GetRuleContext<Attribute_specificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Configuration_specificationContext configuration_specification() {
			return GetRuleContext<Configuration_specificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Disconnection_specificationContext disconnection_specification() {
			return GetRuleContext<Disconnection_specificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Step_limit_specificationContext step_limit_specification() {
			return GetRuleContext<Step_limit_specificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Use_clauseContext use_clause() {
			return GetRuleContext<Use_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Group_template_declarationContext group_template_declaration() {
			return GetRuleContext<Group_template_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Group_declarationContext group_declaration() {
			return GetRuleContext<Group_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Nature_declarationContext nature_declaration() {
			return GetRuleContext<Nature_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Subnature_declarationContext subnature_declaration() {
			return GetRuleContext<Subnature_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Quantity_declarationContext quantity_declaration() {
			return GetRuleContext<Quantity_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Terminal_declarationContext terminal_declaration() {
			return GetRuleContext<Terminal_declarationContext>(0);
		}
		public Block_declarative_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block_declarative_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterBlock_declarative_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitBlock_declarative_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock_declarative_item(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Block_declarative_itemContext block_declarative_item() {
		Block_declarative_itemContext _localctx = new Block_declarative_itemContext(Context, State);
		EnterRule(_localctx, 56, RULE_block_declarative_item);
		try {
			State = 745;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 723;
				subprogram_declaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 724;
				subprogram_body();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 725;
				type_declaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 726;
				subtype_declaration();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 727;
				constant_declaration();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 728;
				signal_declaration();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 729;
				variable_declaration();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 730;
				file_declaration();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 731;
				alias_declaration();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 732;
				component_declaration();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 733;
				attribute_declaration();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 734;
				attribute_specification();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 735;
				configuration_specification();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 736;
				disconnection_specification();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 737;
				step_limit_specification();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 738;
				use_clause();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 739;
				group_template_declaration();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 740;
				group_declaration();
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 741;
				nature_declaration();
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 742;
				subnature_declaration();
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 743;
				quantity_declaration();
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 744;
				terminal_declaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Block_declarative_partContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Block_declarative_itemContext[] block_declarative_item() {
			return GetRuleContexts<Block_declarative_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Block_declarative_itemContext block_declarative_item(int i) {
			return GetRuleContext<Block_declarative_itemContext>(i);
		}
		public Block_declarative_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block_declarative_part; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterBlock_declarative_part(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitBlock_declarative_part(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock_declarative_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Block_declarative_partContext block_declarative_part() {
		Block_declarative_partContext _localctx = new Block_declarative_partContext(Context, State);
		EnterRule(_localctx, 58, RULE_block_declarative_part);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 750;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALIAS) | (1L << ATTRIBUTE) | (1L << COMPONENT) | (1L << CONSTANT) | (1L << DISCONNECT) | (1L << FILE) | (1L << FOR) | (1L << FUNCTION) | (1L << GROUP) | (1L << IMPURE) | (1L << LIMIT) | (1L << NATURE))) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (PROCEDURE - 68)) | (1L << (PURE - 68)) | (1L << (QUANTITY - 68)) | (1L << (SHARED - 68)) | (1L << (SIGNAL - 68)) | (1L << (SUBNATURE - 68)) | (1L << (SUBTYPE - 68)) | (1L << (TERMINAL - 68)) | (1L << (TYPE - 68)) | (1L << (USE - 68)) | (1L << (VARIABLE - 68)))) != 0)) {
				{
				{
				State = 747;
				block_declarative_item();
				}
				}
				State = 752;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Block_headerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Generic_clauseContext generic_clause() {
			return GetRuleContext<Generic_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Port_clauseContext port_clause() {
			return GetRuleContext<Port_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Generic_map_aspectContext generic_map_aspect() {
			return GetRuleContext<Generic_map_aspectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMI() { return GetTokens(vhdlParser.SEMI); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI(int i) {
			return GetToken(vhdlParser.SEMI, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Port_map_aspectContext port_map_aspect() {
			return GetRuleContext<Port_map_aspectContext>(0);
		}
		public Block_headerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block_header; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterBlock_header(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitBlock_header(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock_header(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Block_headerContext block_header() {
		Block_headerContext _localctx = new Block_headerContext(Context, State);
		EnterRule(_localctx, 60, RULE_block_header);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 759;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==GENERIC) {
				{
				State = 753;
				generic_clause();
				State = 757;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==GENERIC) {
					{
					State = 754;
					generic_map_aspect();
					State = 755;
					Match(SEMI);
					}
				}

				}
			}

			State = 767;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PORT) {
				{
				State = 761;
				port_clause();
				State = 765;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PORT) {
					{
					State = 762;
					port_map_aspect();
					State = 763;
					Match(SEMI);
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Block_specificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(vhdlParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Index_specificationContext index_specification() {
			return GetRuleContext<Index_specificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(vhdlParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Block_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block_specification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterBlock_specification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitBlock_specification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock_specification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Block_specificationContext block_specification() {
		Block_specificationContext _localctx = new Block_specificationContext(Context, State);
		EnterRule(_localctx, 62, RULE_block_specification);
		int _la;
		try {
			State = 777;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 769;
				identifier();
				State = 774;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LPAREN) {
					{
					State = 770;
					Match(LPAREN);
					State = 771;
					index_specification();
					State = 772;
					Match(RPAREN);
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 776;
				name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Block_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Label_colonContext label_colon() {
			return GetRuleContext<Label_colonContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BLOCK() { return GetTokens(vhdlParser.BLOCK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BLOCK(int i) {
			return GetToken(vhdlParser.BLOCK, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Block_headerContext block_header() {
			return GetRuleContext<Block_headerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Block_declarative_partContext block_declarative_part() {
			return GetRuleContext<Block_declarative_partContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN() { return GetToken(vhdlParser.BEGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Block_statement_partContext block_statement_part() {
			return GetRuleContext<Block_statement_partContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(vhdlParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(vhdlParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(vhdlParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(vhdlParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(vhdlParser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Block_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterBlock_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitBlock_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Block_statementContext block_statement() {
		Block_statementContext _localctx = new Block_statementContext(Context, State);
		EnterRule(_localctx, 64, RULE_block_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 779;
			label_colon();
			State = 780;
			Match(BLOCK);
			State = 785;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAREN) {
				{
				State = 781;
				Match(LPAREN);
				State = 782;
				expression();
				State = 783;
				Match(RPAREN);
				}
			}

			State = 788;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IS) {
				{
				State = 787;
				Match(IS);
				}
			}

			State = 790;
			block_header();
			State = 791;
			block_declarative_part();
			State = 792;
			Match(BEGIN);
			State = 793;
			block_statement_part();
			State = 794;
			Match(END);
			State = 795;
			Match(BLOCK);
			State = 797;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BASIC_IDENTIFIER || _la==EXTENDED_IDENTIFIER) {
				{
				State = 796;
				identifier();
				}
			}

			State = 799;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Block_statement_partContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Architecture_statementContext[] architecture_statement() {
			return GetRuleContexts<Architecture_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Architecture_statementContext architecture_statement(int i) {
			return GetRuleContext<Architecture_statementContext>(i);
		}
		public Block_statement_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block_statement_part; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterBlock_statement_part(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitBlock_statement_part(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock_statement_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Block_statement_partContext block_statement_part() {
		Block_statement_partContext _localctx = new Block_statement_partContext(Context, State);
		EnterRule(_localctx, 66, RULE_block_statement_part);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 804;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABS) | (1L << ASSERT) | (1L << BREAK) | (1L << CASE) | (1L << IF) | (1L << NEW) | (1L << NOT) | (1L << NULL_))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (POSTPONED - 66)) | (1L << (PROCESS - 66)) | (1L << (PROCEDURAL - 66)) | (1L << (WITH - 66)) | (1L << (BASE_LITERAL - 66)) | (1L << (BIT_STRING_LITERAL - 66)) | (1L << (REAL_LITERAL - 66)) | (1L << (BASIC_IDENTIFIER - 66)) | (1L << (EXTENDED_IDENTIFIER - 66)) | (1L << (CHARACTER_LITERAL - 66)) | (1L << (STRING_LITERAL - 66)))) != 0) || ((((_la - 141)) & ~0x3f) == 0 && ((1L << (_la - 141)) & ((1L << (LPAREN - 141)) | (1L << (PLUS - 141)) | (1L << (MINUS - 141)) | (1L << (INTEGER - 141)))) != 0)) {
				{
				{
				State = 801;
				architecture_statement();
				}
				}
				State = 806;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Branch_quantity_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUANTITY() { return GetToken(vhdlParser.QUANTITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Terminal_aspectContext terminal_aspect() {
			return GetRuleContext<Terminal_aspectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(vhdlParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Across_aspectContext across_aspect() {
			return GetRuleContext<Across_aspectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Through_aspectContext through_aspect() {
			return GetRuleContext<Through_aspectContext>(0);
		}
		public Branch_quantity_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_branch_quantity_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterBranch_quantity_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitBranch_quantity_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBranch_quantity_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Branch_quantity_declarationContext branch_quantity_declaration() {
		Branch_quantity_declarationContext _localctx = new Branch_quantity_declarationContext(Context, State);
		EnterRule(_localctx, 68, RULE_branch_quantity_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 807;
			Match(QUANTITY);
			State = 809;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,44,Context) ) {
			case 1:
				{
				State = 808;
				across_aspect();
				}
				break;
			}
			State = 812;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,45,Context) ) {
			case 1:
				{
				State = 811;
				through_aspect();
				}
				break;
			}
			State = 814;
			terminal_aspect();
			State = 815;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Break_elementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROW() { return GetToken(vhdlParser.ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Break_selector_clauseContext break_selector_clause() {
			return GetRuleContext<Break_selector_clauseContext>(0);
		}
		public Break_elementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_break_element; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterBreak_element(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitBreak_element(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreak_element(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Break_elementContext break_element() {
		Break_elementContext _localctx = new Break_elementContext(Context, State);
		EnterRule(_localctx, 70, RULE_break_element);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 818;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FOR) {
				{
				State = 817;
				break_selector_clause();
				}
			}

			State = 820;
			name();
			State = 821;
			Match(ARROW);
			State = 822;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Break_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Break_elementContext[] break_element() {
			return GetRuleContexts<Break_elementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Break_elementContext break_element(int i) {
			return GetRuleContext<Break_elementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(vhdlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(vhdlParser.COMMA, i);
		}
		public Break_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_break_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterBreak_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitBreak_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreak_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Break_listContext break_list() {
		Break_listContext _localctx = new Break_listContext(Context, State);
		EnterRule(_localctx, 72, RULE_break_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 824;
			break_element();
			State = 829;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 825;
				Match(COMMA);
				State = 826;
				break_element();
				}
				}
				State = 831;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Break_selector_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(vhdlParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USE() { return GetToken(vhdlParser.USE, 0); }
		public Break_selector_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_break_selector_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterBreak_selector_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitBreak_selector_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreak_selector_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Break_selector_clauseContext break_selector_clause() {
		Break_selector_clauseContext _localctx = new Break_selector_clauseContext(Context, State);
		EnterRule(_localctx, 74, RULE_break_selector_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 832;
			Match(FOR);
			State = 833;
			name();
			State = 834;
			Match(USE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Break_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAK() { return GetToken(vhdlParser.BREAK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(vhdlParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Label_colonContext label_colon() {
			return GetRuleContext<Label_colonContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Break_listContext break_list() {
			return GetRuleContext<Break_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHEN() { return GetToken(vhdlParser.WHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public Break_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_break_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterBreak_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitBreak_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreak_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Break_statementContext break_statement() {
		Break_statementContext _localctx = new Break_statementContext(Context, State);
		EnterRule(_localctx, 76, RULE_break_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 837;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BASIC_IDENTIFIER || _la==EXTENDED_IDENTIFIER) {
				{
				State = 836;
				label_colon();
				}
			}

			State = 839;
			Match(BREAK);
			State = 841;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FOR || ((((_la - 118)) & ~0x3f) == 0 && ((1L << (_la - 118)) & ((1L << (BASIC_IDENTIFIER - 118)) | (1L << (EXTENDED_IDENTIFIER - 118)) | (1L << (STRING_LITERAL - 118)))) != 0)) {
				{
				State = 840;
				break_list();
				}
			}

			State = 845;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHEN) {
				{
				State = 843;
				Match(WHEN);
				State = 844;
				condition();
				}
			}

			State = 847;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Case_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CASE() { return GetTokens(vhdlParser.CASE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE(int i) {
			return GetToken(vhdlParser.CASE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(vhdlParser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(vhdlParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(vhdlParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Label_colonContext label_colon() {
			return GetRuleContext<Label_colonContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Case_statement_alternativeContext[] case_statement_alternative() {
			return GetRuleContexts<Case_statement_alternativeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Case_statement_alternativeContext case_statement_alternative(int i) {
			return GetRuleContext<Case_statement_alternativeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Case_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_case_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterCase_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitCase_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCase_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Case_statementContext case_statement() {
		Case_statementContext _localctx = new Case_statementContext(Context, State);
		EnterRule(_localctx, 78, RULE_case_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 850;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BASIC_IDENTIFIER || _la==EXTENDED_IDENTIFIER) {
				{
				State = 849;
				label_colon();
				}
			}

			State = 852;
			Match(CASE);
			State = 853;
			expression();
			State = 854;
			Match(IS);
			State = 856;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 855;
				case_statement_alternative();
				}
				}
				State = 858;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==WHEN );
			State = 860;
			Match(END);
			State = 861;
			Match(CASE);
			State = 863;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BASIC_IDENTIFIER || _la==EXTENDED_IDENTIFIER) {
				{
				State = 862;
				identifier();
				}
			}

			State = 865;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Case_statement_alternativeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHEN() { return GetToken(vhdlParser.WHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ChoicesContext choices() {
			return GetRuleContext<ChoicesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROW() { return GetToken(vhdlParser.ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sequence_of_statementsContext sequence_of_statements() {
			return GetRuleContext<Sequence_of_statementsContext>(0);
		}
		public Case_statement_alternativeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_case_statement_alternative; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterCase_statement_alternative(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitCase_statement_alternative(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCase_statement_alternative(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Case_statement_alternativeContext case_statement_alternative() {
		Case_statement_alternativeContext _localctx = new Case_statement_alternativeContext(Context, State);
		EnterRule(_localctx, 80, RULE_case_statement_alternative);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 867;
			Match(WHEN);
			State = 868;
			choices();
			State = 869;
			Match(ARROW);
			State = 870;
			sequence_of_statements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChoiceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Simple_expressionContext simple_expression() {
			return GetRuleContext<Simple_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Discrete_rangeContext discrete_range() {
			return GetRuleContext<Discrete_rangeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OTHERS() { return GetToken(vhdlParser.OTHERS, 0); }
		public ChoiceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_choice; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterChoice(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitChoice(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChoice(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChoiceContext choice() {
		ChoiceContext _localctx = new ChoiceContext(Context, State);
		EnterRule(_localctx, 82, RULE_choice);
		try {
			State = 876;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,54,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 872;
				identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 873;
				simple_expression();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 874;
				discrete_range();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 875;
				Match(OTHERS);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChoicesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ChoiceContext[] choice() {
			return GetRuleContexts<ChoiceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChoiceContext choice(int i) {
			return GetRuleContext<ChoiceContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BAR() { return GetTokens(vhdlParser.BAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BAR(int i) {
			return GetToken(vhdlParser.BAR, i);
		}
		public ChoicesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_choices; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterChoices(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitChoices(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChoices(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChoicesContext choices() {
		ChoicesContext _localctx = new ChoicesContext(Context, State);
		EnterRule(_localctx, 84, RULE_choices);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 878;
			choice();
			State = 883;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==BAR) {
				{
				{
				State = 879;
				Match(BAR);
				State = 880;
				choice();
				}
				}
				State = 885;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Component_configurationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FOR() { return GetTokens(vhdlParser.FOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR(int i) {
			return GetToken(vhdlParser.FOR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Component_specificationContext component_specification() {
			return GetRuleContext<Component_specificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(vhdlParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMI() { return GetTokens(vhdlParser.SEMI); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI(int i) {
			return GetToken(vhdlParser.SEMI, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Binding_indicationContext binding_indication() {
			return GetRuleContext<Binding_indicationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Block_configurationContext block_configuration() {
			return GetRuleContext<Block_configurationContext>(0);
		}
		public Component_configurationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_component_configuration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterComponent_configuration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitComponent_configuration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComponent_configuration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Component_configurationContext component_configuration() {
		Component_configurationContext _localctx = new Component_configurationContext(Context, State);
		EnterRule(_localctx, 86, RULE_component_configuration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 886;
			Match(FOR);
			State = 887;
			component_specification();
			State = 891;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==GENERIC || _la==PORT || _la==USE || _la==SEMI) {
				{
				State = 888;
				binding_indication();
				State = 889;
				Match(SEMI);
				}
			}

			State = 894;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FOR) {
				{
				State = 893;
				block_configuration();
				}
			}

			State = 896;
			Match(END);
			State = 897;
			Match(FOR);
			State = 898;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Component_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMPONENT() { return GetTokens(vhdlParser.COMPONENT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPONENT(int i) {
			return GetToken(vhdlParser.COMPONENT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(vhdlParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(vhdlParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(vhdlParser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Generic_clauseContext generic_clause() {
			return GetRuleContext<Generic_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Port_clauseContext port_clause() {
			return GetRuleContext<Port_clauseContext>(0);
		}
		public Component_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_component_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterComponent_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitComponent_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComponent_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Component_declarationContext component_declaration() {
		Component_declarationContext _localctx = new Component_declarationContext(Context, State);
		EnterRule(_localctx, 88, RULE_component_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 900;
			Match(COMPONENT);
			State = 901;
			identifier();
			State = 903;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IS) {
				{
				State = 902;
				Match(IS);
				}
			}

			State = 906;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==GENERIC) {
				{
				State = 905;
				generic_clause();
				}
			}

			State = 909;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PORT) {
				{
				State = 908;
				port_clause();
				}
			}

			State = 911;
			Match(END);
			State = 912;
			Match(COMPONENT);
			State = 914;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BASIC_IDENTIFIER || _la==EXTENDED_IDENTIFIER) {
				{
				State = 913;
				identifier();
				}
			}

			State = 916;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Component_instantiation_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Label_colonContext label_colon() {
			return GetRuleContext<Label_colonContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Instantiated_unitContext instantiated_unit() {
			return GetRuleContext<Instantiated_unitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(vhdlParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Generic_map_aspectContext generic_map_aspect() {
			return GetRuleContext<Generic_map_aspectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Port_map_aspectContext port_map_aspect() {
			return GetRuleContext<Port_map_aspectContext>(0);
		}
		public Component_instantiation_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_component_instantiation_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterComponent_instantiation_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitComponent_instantiation_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComponent_instantiation_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Component_instantiation_statementContext component_instantiation_statement() {
		Component_instantiation_statementContext _localctx = new Component_instantiation_statementContext(Context, State);
		EnterRule(_localctx, 90, RULE_component_instantiation_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 918;
			label_colon();
			State = 919;
			instantiated_unit();
			State = 921;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==GENERIC) {
				{
				State = 920;
				generic_map_aspect();
				}
			}

			State = 924;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PORT) {
				{
				State = 923;
				port_map_aspect();
				}
			}

			State = 926;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Component_specificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Instantiation_listContext instantiation_list() {
			return GetRuleContext<Instantiation_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(vhdlParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Component_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_component_specification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterComponent_specification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitComponent_specification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComponent_specification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Component_specificationContext component_specification() {
		Component_specificationContext _localctx = new Component_specificationContext(Context, State);
		EnterRule(_localctx, 92, RULE_component_specification);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 928;
			instantiation_list();
			State = 929;
			Match(COLON);
			State = 930;
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Composite_nature_definitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Array_nature_definitionContext array_nature_definition() {
			return GetRuleContext<Array_nature_definitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Record_nature_definitionContext record_nature_definition() {
			return GetRuleContext<Record_nature_definitionContext>(0);
		}
		public Composite_nature_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_composite_nature_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterComposite_nature_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitComposite_nature_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComposite_nature_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Composite_nature_definitionContext composite_nature_definition() {
		Composite_nature_definitionContext _localctx = new Composite_nature_definitionContext(Context, State);
		EnterRule(_localctx, 94, RULE_composite_nature_definition);
		try {
			State = 934;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ARRAY:
				EnterOuterAlt(_localctx, 1);
				{
				State = 932;
				array_nature_definition();
				}
				break;
			case RECORD:
				EnterOuterAlt(_localctx, 2);
				{
				State = 933;
				record_nature_definition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Composite_type_definitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Array_type_definitionContext array_type_definition() {
			return GetRuleContext<Array_type_definitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Record_type_definitionContext record_type_definition() {
			return GetRuleContext<Record_type_definitionContext>(0);
		}
		public Composite_type_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_composite_type_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterComposite_type_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitComposite_type_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComposite_type_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Composite_type_definitionContext composite_type_definition() {
		Composite_type_definitionContext _localctx = new Composite_type_definitionContext(Context, State);
		EnterRule(_localctx, 96, RULE_composite_type_definition);
		try {
			State = 938;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ARRAY:
				EnterOuterAlt(_localctx, 1);
				{
				State = 936;
				array_type_definition();
				}
				break;
			case RECORD:
				EnterOuterAlt(_localctx, 2);
				{
				State = 937;
				record_type_definition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Concurrent_assertion_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssertionContext assertion() {
			return GetRuleContext<AssertionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(vhdlParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Label_colonContext label_colon() {
			return GetRuleContext<Label_colonContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POSTPONED() { return GetToken(vhdlParser.POSTPONED, 0); }
		public Concurrent_assertion_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_concurrent_assertion_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterConcurrent_assertion_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitConcurrent_assertion_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConcurrent_assertion_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Concurrent_assertion_statementContext concurrent_assertion_statement() {
		Concurrent_assertion_statementContext _localctx = new Concurrent_assertion_statementContext(Context, State);
		EnterRule(_localctx, 98, RULE_concurrent_assertion_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 941;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BASIC_IDENTIFIER || _la==EXTENDED_IDENTIFIER) {
				{
				State = 940;
				label_colon();
				}
			}

			State = 944;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==POSTPONED) {
				{
				State = 943;
				Match(POSTPONED);
				}
			}

			State = 946;
			assertion();
			State = 947;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Concurrent_break_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAK() { return GetToken(vhdlParser.BREAK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(vhdlParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Label_colonContext label_colon() {
			return GetRuleContext<Label_colonContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Break_listContext break_list() {
			return GetRuleContext<Break_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sensitivity_clauseContext sensitivity_clause() {
			return GetRuleContext<Sensitivity_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHEN() { return GetToken(vhdlParser.WHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public Concurrent_break_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_concurrent_break_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterConcurrent_break_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitConcurrent_break_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConcurrent_break_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Concurrent_break_statementContext concurrent_break_statement() {
		Concurrent_break_statementContext _localctx = new Concurrent_break_statementContext(Context, State);
		EnterRule(_localctx, 100, RULE_concurrent_break_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 950;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BASIC_IDENTIFIER || _la==EXTENDED_IDENTIFIER) {
				{
				State = 949;
				label_colon();
				}
			}

			State = 952;
			Match(BREAK);
			State = 954;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FOR || ((((_la - 118)) & ~0x3f) == 0 && ((1L << (_la - 118)) & ((1L << (BASIC_IDENTIFIER - 118)) | (1L << (EXTENDED_IDENTIFIER - 118)) | (1L << (STRING_LITERAL - 118)))) != 0)) {
				{
				State = 953;
				break_list();
				}
			}

			State = 957;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ON) {
				{
				State = 956;
				sensitivity_clause();
				}
			}

			State = 961;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHEN) {
				{
				State = 959;
				Match(WHEN);
				State = 960;
				condition();
				}
			}

			State = 963;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Concurrent_procedure_call_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Procedure_callContext procedure_call() {
			return GetRuleContext<Procedure_callContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(vhdlParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Label_colonContext label_colon() {
			return GetRuleContext<Label_colonContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POSTPONED() { return GetToken(vhdlParser.POSTPONED, 0); }
		public Concurrent_procedure_call_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_concurrent_procedure_call_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterConcurrent_procedure_call_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitConcurrent_procedure_call_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConcurrent_procedure_call_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Concurrent_procedure_call_statementContext concurrent_procedure_call_statement() {
		Concurrent_procedure_call_statementContext _localctx = new Concurrent_procedure_call_statementContext(Context, State);
		EnterRule(_localctx, 102, RULE_concurrent_procedure_call_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 966;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,72,Context) ) {
			case 1:
				{
				State = 965;
				label_colon();
				}
				break;
			}
			State = 969;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==POSTPONED) {
				{
				State = 968;
				Match(POSTPONED);
				}
			}

			State = 971;
			procedure_call();
			State = 972;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Concurrent_signal_assignment_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Conditional_signal_assignmentContext conditional_signal_assignment() {
			return GetRuleContext<Conditional_signal_assignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Selected_signal_assignmentContext selected_signal_assignment() {
			return GetRuleContext<Selected_signal_assignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Label_colonContext label_colon() {
			return GetRuleContext<Label_colonContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POSTPONED() { return GetToken(vhdlParser.POSTPONED, 0); }
		public Concurrent_signal_assignment_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_concurrent_signal_assignment_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterConcurrent_signal_assignment_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitConcurrent_signal_assignment_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConcurrent_signal_assignment_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Concurrent_signal_assignment_statementContext concurrent_signal_assignment_statement() {
		Concurrent_signal_assignment_statementContext _localctx = new Concurrent_signal_assignment_statementContext(Context, State);
		EnterRule(_localctx, 104, RULE_concurrent_signal_assignment_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 975;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,74,Context) ) {
			case 1:
				{
				State = 974;
				label_colon();
				}
				break;
			}
			State = 978;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==POSTPONED) {
				{
				State = 977;
				Match(POSTPONED);
				}
			}

			State = 982;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BASIC_IDENTIFIER:
			case EXTENDED_IDENTIFIER:
			case STRING_LITERAL:
			case LPAREN:
				{
				State = 980;
				conditional_signal_assignment();
				}
				break;
			case WITH:
				{
				State = 981;
				selected_signal_assignment();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		ConditionContext _localctx = new ConditionContext(Context, State);
		EnterRule(_localctx, 106, RULE_condition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 984;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Condition_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNTIL() { return GetToken(vhdlParser.UNTIL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public Condition_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterCondition_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitCondition_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondition_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Condition_clauseContext condition_clause() {
		Condition_clauseContext _localctx = new Condition_clauseContext(Context, State);
		EnterRule(_localctx, 108, RULE_condition_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 986;
			Match(UNTIL);
			State = 987;
			condition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Conditional_signal_assignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TargetContext target() {
			return GetRuleContext<TargetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LE() { return GetToken(vhdlParser.LE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OptsContext opts() {
			return GetRuleContext<OptsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Conditional_waveformsContext conditional_waveforms() {
			return GetRuleContext<Conditional_waveformsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(vhdlParser.SEMI, 0); }
		public Conditional_signal_assignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditional_signal_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterConditional_signal_assignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitConditional_signal_assignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditional_signal_assignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Conditional_signal_assignmentContext conditional_signal_assignment() {
		Conditional_signal_assignmentContext _localctx = new Conditional_signal_assignmentContext(Context, State);
		EnterRule(_localctx, 110, RULE_conditional_signal_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 989;
			target();
			State = 990;
			Match(LE);
			State = 991;
			opts();
			State = 992;
			conditional_waveforms();
			State = 993;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Conditional_waveformsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public WaveformContext waveform() {
			return GetRuleContext<WaveformContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHEN() { return GetToken(vhdlParser.WHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(vhdlParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Conditional_waveformsContext conditional_waveforms() {
			return GetRuleContext<Conditional_waveformsContext>(0);
		}
		public Conditional_waveformsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditional_waveforms; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterConditional_waveforms(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitConditional_waveforms(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditional_waveforms(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Conditional_waveformsContext conditional_waveforms() {
		Conditional_waveformsContext _localctx = new Conditional_waveformsContext(Context, State);
		EnterRule(_localctx, 112, RULE_conditional_waveforms);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 995;
			waveform();
			State = 1002;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHEN) {
				{
				State = 996;
				Match(WHEN);
				State = 997;
				condition();
				State = 1000;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ELSE) {
					{
					State = 998;
					Match(ELSE);
					State = 999;
					conditional_waveforms();
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Configuration_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CONFIGURATION() { return GetTokens(vhdlParser.CONFIGURATION); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONFIGURATION(int i) {
			return GetToken(vhdlParser.CONFIGURATION, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(vhdlParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(vhdlParser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Configuration_declarative_partContext configuration_declarative_part() {
			return GetRuleContext<Configuration_declarative_partContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Block_configurationContext block_configuration() {
			return GetRuleContext<Block_configurationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(vhdlParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(vhdlParser.SEMI, 0); }
		public Configuration_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_configuration_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterConfiguration_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitConfiguration_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConfiguration_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Configuration_declarationContext configuration_declaration() {
		Configuration_declarationContext _localctx = new Configuration_declarationContext(Context, State);
		EnterRule(_localctx, 114, RULE_configuration_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1004;
			Match(CONFIGURATION);
			State = 1005;
			identifier();
			State = 1006;
			Match(OF);
			State = 1007;
			name();
			State = 1008;
			Match(IS);
			State = 1009;
			configuration_declarative_part();
			State = 1010;
			block_configuration();
			State = 1011;
			Match(END);
			State = 1013;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CONFIGURATION) {
				{
				State = 1012;
				Match(CONFIGURATION);
				}
			}

			State = 1016;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BASIC_IDENTIFIER || _la==EXTENDED_IDENTIFIER) {
				{
				State = 1015;
				identifier();
				}
			}

			State = 1018;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Configuration_declarative_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Use_clauseContext use_clause() {
			return GetRuleContext<Use_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Attribute_specificationContext attribute_specification() {
			return GetRuleContext<Attribute_specificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Group_declarationContext group_declaration() {
			return GetRuleContext<Group_declarationContext>(0);
		}
		public Configuration_declarative_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_configuration_declarative_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterConfiguration_declarative_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitConfiguration_declarative_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConfiguration_declarative_item(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Configuration_declarative_itemContext configuration_declarative_item() {
		Configuration_declarative_itemContext _localctx = new Configuration_declarative_itemContext(Context, State);
		EnterRule(_localctx, 116, RULE_configuration_declarative_item);
		try {
			State = 1023;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case USE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1020;
				use_clause();
				}
				break;
			case ATTRIBUTE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1021;
				attribute_specification();
				}
				break;
			case GROUP:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1022;
				group_declaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Configuration_declarative_partContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Configuration_declarative_itemContext[] configuration_declarative_item() {
			return GetRuleContexts<Configuration_declarative_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Configuration_declarative_itemContext configuration_declarative_item(int i) {
			return GetRuleContext<Configuration_declarative_itemContext>(i);
		}
		public Configuration_declarative_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_configuration_declarative_part; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterConfiguration_declarative_part(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitConfiguration_declarative_part(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConfiguration_declarative_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Configuration_declarative_partContext configuration_declarative_part() {
		Configuration_declarative_partContext _localctx = new Configuration_declarative_partContext(Context, State);
		EnterRule(_localctx, 118, RULE_configuration_declarative_part);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1028;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ATTRIBUTE || _la==GROUP || _la==USE) {
				{
				{
				State = 1025;
				configuration_declarative_item();
				}
				}
				State = 1030;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Configuration_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Block_configurationContext block_configuration() {
			return GetRuleContext<Block_configurationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Component_configurationContext component_configuration() {
			return GetRuleContext<Component_configurationContext>(0);
		}
		public Configuration_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_configuration_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterConfiguration_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitConfiguration_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConfiguration_item(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Configuration_itemContext configuration_item() {
		Configuration_itemContext _localctx = new Configuration_itemContext(Context, State);
		EnterRule(_localctx, 120, RULE_configuration_item);
		try {
			State = 1033;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,83,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1031;
				block_configuration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1032;
				component_configuration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Configuration_specificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(vhdlParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Component_specificationContext component_specification() {
			return GetRuleContext<Component_specificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Binding_indicationContext binding_indication() {
			return GetRuleContext<Binding_indicationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(vhdlParser.SEMI, 0); }
		public Configuration_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_configuration_specification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterConfiguration_specification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitConfiguration_specification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConfiguration_specification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Configuration_specificationContext configuration_specification() {
		Configuration_specificationContext _localctx = new Configuration_specificationContext(Context, State);
		EnterRule(_localctx, 122, RULE_configuration_specification);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1035;
			Match(FOR);
			State = 1036;
			component_specification();
			State = 1037;
			binding_indication();
			State = 1038;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constant_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTANT() { return GetToken(vhdlParser.CONSTANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Identifier_listContext identifier_list() {
			return GetRuleContext<Identifier_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(vhdlParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Subtype_indicationContext subtype_indication() {
			return GetRuleContext<Subtype_indicationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(vhdlParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARASGN() { return GetToken(vhdlParser.VARASGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Constant_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterConstant_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitConstant_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Constant_declarationContext constant_declaration() {
		Constant_declarationContext _localctx = new Constant_declarationContext(Context, State);
		EnterRule(_localctx, 124, RULE_constant_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1040;
			Match(CONSTANT);
			State = 1041;
			identifier_list();
			State = 1042;
			Match(COLON);
			State = 1043;
			subtype_indication();
			State = 1046;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==VARASGN) {
				{
				State = 1044;
				Match(VARASGN);
				State = 1045;
				expression();
				}
			}

			State = 1048;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constrained_array_definitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY() { return GetToken(vhdlParser.ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Index_constraintContext index_constraint() {
			return GetRuleContext<Index_constraintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(vhdlParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Subtype_indicationContext subtype_indication() {
			return GetRuleContext<Subtype_indicationContext>(0);
		}
		public Constrained_array_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constrained_array_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterConstrained_array_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitConstrained_array_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstrained_array_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Constrained_array_definitionContext constrained_array_definition() {
		Constrained_array_definitionContext _localctx = new Constrained_array_definitionContext(Context, State);
		EnterRule(_localctx, 126, RULE_constrained_array_definition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1050;
			Match(ARRAY);
			State = 1051;
			index_constraint();
			State = 1052;
			Match(OF);
			State = 1053;
			subtype_indication();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constrained_nature_definitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY() { return GetToken(vhdlParser.ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Index_constraintContext index_constraint() {
			return GetRuleContext<Index_constraintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(vhdlParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Subnature_indicationContext subnature_indication() {
			return GetRuleContext<Subnature_indicationContext>(0);
		}
		public Constrained_nature_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constrained_nature_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterConstrained_nature_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitConstrained_nature_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstrained_nature_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Constrained_nature_definitionContext constrained_nature_definition() {
		Constrained_nature_definitionContext _localctx = new Constrained_nature_definitionContext(Context, State);
		EnterRule(_localctx, 128, RULE_constrained_nature_definition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1055;
			Match(ARRAY);
			State = 1056;
			index_constraint();
			State = 1057;
			Match(OF);
			State = 1058;
			subnature_indication();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstraintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Range_constraintContext range_constraint() {
			return GetRuleContext<Range_constraintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Index_constraintContext index_constraint() {
			return GetRuleContext<Index_constraintContext>(0);
		}
		public ConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstraintContext constraint() {
		ConstraintContext _localctx = new ConstraintContext(Context, State);
		EnterRule(_localctx, 130, RULE_constraint);
		try {
			State = 1062;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case RANGE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1060;
				range_constraint();
				}
				break;
			case LPAREN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1061;
				index_constraint();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Context_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Context_itemContext[] context_item() {
			return GetRuleContexts<Context_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Context_itemContext context_item(int i) {
			return GetRuleContext<Context_itemContext>(i);
		}
		public Context_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_context_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterContext_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitContext_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContext_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Context_clauseContext context_clause() {
		Context_clauseContext _localctx = new Context_clauseContext(Context, State);
		EnterRule(_localctx, 132, RULE_context_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1067;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LIBRARY || _la==USE) {
				{
				{
				State = 1064;
				context_item();
				}
				}
				State = 1069;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Context_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Library_clauseContext library_clause() {
			return GetRuleContext<Library_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Use_clauseContext use_clause() {
			return GetRuleContext<Use_clauseContext>(0);
		}
		public Context_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_context_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterContext_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitContext_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContext_item(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Context_itemContext context_item() {
		Context_itemContext _localctx = new Context_itemContext(Context, State);
		EnterRule(_localctx, 134, RULE_context_item);
		try {
			State = 1072;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LIBRARY:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1070;
				library_clause();
				}
				break;
			case USE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1071;
				use_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Delay_mechanismContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSPORT() { return GetToken(vhdlParser.TRANSPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INERTIAL() { return GetToken(vhdlParser.INERTIAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REJECT() { return GetToken(vhdlParser.REJECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Delay_mechanismContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delay_mechanism; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterDelay_mechanism(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitDelay_mechanism(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDelay_mechanism(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Delay_mechanismContext delay_mechanism() {
		Delay_mechanismContext _localctx = new Delay_mechanismContext(Context, State);
		EnterRule(_localctx, 136, RULE_delay_mechanism);
		int _la;
		try {
			State = 1080;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TRANSPORT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1074;
				Match(TRANSPORT);
				}
				break;
			case INERTIAL:
			case REJECT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1077;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==REJECT) {
					{
					State = 1075;
					Match(REJECT);
					State = 1076;
					expression();
					}
				}

				State = 1079;
				Match(INERTIAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Design_fileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(vhdlParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Design_unitContext[] design_unit() {
			return GetRuleContexts<Design_unitContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Design_unitContext design_unit(int i) {
			return GetRuleContext<Design_unitContext>(i);
		}
		public Design_fileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_design_file; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterDesign_file(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitDesign_file(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDesign_file(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Design_fileContext design_file() {
		Design_fileContext _localctx = new Design_fileContext(Context, State);
		EnterRule(_localctx, 138, RULE_design_file);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1085;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ARCHITECTURE) | (1L << CONFIGURATION) | (1L << ENTITY) | (1L << LIBRARY))) != 0) || _la==PACKAGE || _la==USE) {
				{
				{
				State = 1082;
				design_unit();
				}
				}
				State = 1087;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1088;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Design_unitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Context_clauseContext context_clause() {
			return GetRuleContext<Context_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Library_unitContext library_unit() {
			return GetRuleContext<Library_unitContext>(0);
		}
		public Design_unitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_design_unit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterDesign_unit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitDesign_unit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDesign_unit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Design_unitContext design_unit() {
		Design_unitContext _localctx = new Design_unitContext(Context, State);
		EnterRule(_localctx, 140, RULE_design_unit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1090;
			context_clause();
			State = 1091;
			library_unit();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DesignatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(vhdlParser.STRING_LITERAL, 0); }
		public DesignatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_designator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterDesignator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitDesignator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDesignator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DesignatorContext designator() {
		DesignatorContext _localctx = new DesignatorContext(Context, State);
		EnterRule(_localctx, 142, RULE_designator);
		try {
			State = 1095;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BASIC_IDENTIFIER:
			case EXTENDED_IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1093;
				identifier();
				}
				break;
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1094;
				Match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(vhdlParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOWNTO() { return GetToken(vhdlParser.DOWNTO, 0); }
		public DirectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_direction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterDirection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitDirection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDirection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DirectionContext direction() {
		DirectionContext _localctx = new DirectionContext(Context, State);
		EnterRule(_localctx, 144, RULE_direction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1097;
			_la = TokenStream.LA(1);
			if ( !(_la==DOWNTO || _la==TO) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Disconnection_specificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISCONNECT() { return GetToken(vhdlParser.DISCONNECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Guarded_signal_specificationContext guarded_signal_specification() {
			return GetRuleContext<Guarded_signal_specificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AFTER() { return GetToken(vhdlParser.AFTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(vhdlParser.SEMI, 0); }
		public Disconnection_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_disconnection_specification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterDisconnection_specification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitDisconnection_specification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDisconnection_specification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Disconnection_specificationContext disconnection_specification() {
		Disconnection_specificationContext _localctx = new Disconnection_specificationContext(Context, State);
		EnterRule(_localctx, 146, RULE_disconnection_specification);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1099;
			Match(DISCONNECT);
			State = 1100;
			guarded_signal_specification();
			State = 1101;
			Match(AFTER);
			State = 1102;
			expression();
			State = 1103;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Discrete_rangeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Subtype_indicationContext subtype_indication() {
			return GetRuleContext<Subtype_indicationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Range_declContext range_decl() {
			return GetRuleContext<Range_declContext>(0);
		}
		public Discrete_rangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_discrete_range; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterDiscrete_range(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitDiscrete_range(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDiscrete_range(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Discrete_rangeContext discrete_range() {
		Discrete_rangeContext _localctx = new Discrete_rangeContext(Context, State);
		EnterRule(_localctx, 148, RULE_discrete_range);
		try {
			State = 1107;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,92,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1105;
				subtype_indication();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1106;
				range_decl();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Element_associationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChoicesContext choices() {
			return GetRuleContext<ChoicesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROW() { return GetToken(vhdlParser.ARROW, 0); }
		public Element_associationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_element_association; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterElement_association(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitElement_association(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElement_association(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Element_associationContext element_association() {
		Element_associationContext _localctx = new Element_associationContext(Context, State);
		EnterRule(_localctx, 150, RULE_element_association);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1112;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,93,Context) ) {
			case 1:
				{
				State = 1109;
				choices();
				State = 1110;
				Match(ARROW);
				}
				break;
			}
			State = 1114;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Element_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Identifier_listContext identifier_list() {
			return GetRuleContext<Identifier_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(vhdlParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Element_subtype_definitionContext element_subtype_definition() {
			return GetRuleContext<Element_subtype_definitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(vhdlParser.SEMI, 0); }
		public Element_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_element_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterElement_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitElement_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElement_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Element_declarationContext element_declaration() {
		Element_declarationContext _localctx = new Element_declarationContext(Context, State);
		EnterRule(_localctx, 152, RULE_element_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1116;
			identifier_list();
			State = 1117;
			Match(COLON);
			State = 1118;
			element_subtype_definition();
			State = 1119;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Element_subnature_definitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Subnature_indicationContext subnature_indication() {
			return GetRuleContext<Subnature_indicationContext>(0);
		}
		public Element_subnature_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_element_subnature_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterElement_subnature_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitElement_subnature_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElement_subnature_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Element_subnature_definitionContext element_subnature_definition() {
		Element_subnature_definitionContext _localctx = new Element_subnature_definitionContext(Context, State);
		EnterRule(_localctx, 154, RULE_element_subnature_definition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1121;
			subnature_indication();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Element_subtype_definitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Subtype_indicationContext subtype_indication() {
			return GetRuleContext<Subtype_indicationContext>(0);
		}
		public Element_subtype_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_element_subtype_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterElement_subtype_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitElement_subtype_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElement_subtype_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Element_subtype_definitionContext element_subtype_definition() {
		Element_subtype_definitionContext _localctx = new Element_subtype_definitionContext(Context, State);
		EnterRule(_localctx, 156, RULE_element_subtype_definition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1123;
			subtype_indication();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Entity_aspectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENTITY() { return GetToken(vhdlParser.ENTITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(vhdlParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(vhdlParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONFIGURATION() { return GetToken(vhdlParser.CONFIGURATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(vhdlParser.OPEN, 0); }
		public Entity_aspectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entity_aspect; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterEntity_aspect(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitEntity_aspect(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntity_aspect(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Entity_aspectContext entity_aspect() {
		Entity_aspectContext _localctx = new Entity_aspectContext(Context, State);
		EnterRule(_localctx, 158, RULE_entity_aspect);
		int _la;
		try {
			State = 1136;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ENTITY:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1125;
				Match(ENTITY);
				State = 1126;
				name();
				State = 1131;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LPAREN) {
					{
					State = 1127;
					Match(LPAREN);
					State = 1128;
					identifier();
					State = 1129;
					Match(RPAREN);
					}
				}

				}
				break;
			case CONFIGURATION:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1133;
				Match(CONFIGURATION);
				State = 1134;
				name();
				}
				break;
			case OPEN:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1135;
				Match(OPEN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Entity_classContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENTITY() { return GetToken(vhdlParser.ENTITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARCHITECTURE() { return GetToken(vhdlParser.ARCHITECTURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONFIGURATION() { return GetToken(vhdlParser.CONFIGURATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(vhdlParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(vhdlParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PACKAGE() { return GetToken(vhdlParser.PACKAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(vhdlParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBTYPE() { return GetToken(vhdlParser.SUBTYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTANT() { return GetToken(vhdlParser.CONSTANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIGNAL() { return GetToken(vhdlParser.SIGNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(vhdlParser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPONENT() { return GetToken(vhdlParser.COMPONENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LABEL() { return GetToken(vhdlParser.LABEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LITERAL() { return GetToken(vhdlParser.LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNITS() { return GetToken(vhdlParser.UNITS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP() { return GetToken(vhdlParser.GROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILE() { return GetToken(vhdlParser.FILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NATURE() { return GetToken(vhdlParser.NATURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBNATURE() { return GetToken(vhdlParser.SUBNATURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUANTITY() { return GetToken(vhdlParser.QUANTITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TERMINAL() { return GetToken(vhdlParser.TERMINAL, 0); }
		public Entity_classContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entity_class; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterEntity_class(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitEntity_class(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntity_class(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Entity_classContext entity_class() {
		Entity_classContext _localctx = new Entity_classContext(Context, State);
		EnterRule(_localctx, 160, RULE_entity_class);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1138;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ARCHITECTURE) | (1L << COMPONENT) | (1L << CONFIGURATION) | (1L << CONSTANT) | (1L << ENTITY) | (1L << FILE) | (1L << FUNCTION) | (1L << GROUP) | (1L << LABEL) | (1L << LITERAL) | (1L << NATURE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (PACKAGE - 64)) | (1L << (PROCEDURE - 64)) | (1L << (QUANTITY - 64)) | (1L << (SIGNAL - 64)) | (1L << (SUBNATURE - 64)) | (1L << (SUBTYPE - 64)) | (1L << (TERMINAL - 64)) | (1L << (TYPE - 64)) | (1L << (UNITS - 64)) | (1L << (VARIABLE - 64)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Entity_class_entryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Entity_classContext entity_class() {
			return GetRuleContext<Entity_classContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOX() { return GetToken(vhdlParser.BOX, 0); }
		public Entity_class_entryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entity_class_entry; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterEntity_class_entry(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitEntity_class_entry(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntity_class_entry(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Entity_class_entryContext entity_class_entry() {
		Entity_class_entryContext _localctx = new Entity_class_entryContext(Context, State);
		EnterRule(_localctx, 162, RULE_entity_class_entry);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1140;
			entity_class();
			State = 1142;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BOX) {
				{
				State = 1141;
				Match(BOX);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Entity_class_entry_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Entity_class_entryContext[] entity_class_entry() {
			return GetRuleContexts<Entity_class_entryContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Entity_class_entryContext entity_class_entry(int i) {
			return GetRuleContext<Entity_class_entryContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(vhdlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(vhdlParser.COMMA, i);
		}
		public Entity_class_entry_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entity_class_entry_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterEntity_class_entry_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitEntity_class_entry_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntity_class_entry_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Entity_class_entry_listContext entity_class_entry_list() {
		Entity_class_entry_listContext _localctx = new Entity_class_entry_listContext(Context, State);
		EnterRule(_localctx, 164, RULE_entity_class_entry_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1144;
			entity_class_entry();
			State = 1149;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1145;
				Match(COMMA);
				State = 1146;
				entity_class_entry();
				}
				}
				State = 1151;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Entity_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ENTITY() { return GetTokens(vhdlParser.ENTITY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENTITY(int i) {
			return GetToken(vhdlParser.ENTITY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(vhdlParser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Entity_headerContext entity_header() {
			return GetRuleContext<Entity_headerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Entity_declarative_partContext entity_declarative_part() {
			return GetRuleContext<Entity_declarative_partContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(vhdlParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(vhdlParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN() { return GetToken(vhdlParser.BEGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Entity_statement_partContext entity_statement_part() {
			return GetRuleContext<Entity_statement_partContext>(0);
		}
		public Entity_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entity_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterEntity_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitEntity_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntity_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Entity_declarationContext entity_declaration() {
		Entity_declarationContext _localctx = new Entity_declarationContext(Context, State);
		EnterRule(_localctx, 166, RULE_entity_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1152;
			Match(ENTITY);
			State = 1153;
			identifier();
			State = 1154;
			Match(IS);
			State = 1155;
			entity_header();
			State = 1156;
			entity_declarative_part();
			State = 1159;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BEGIN) {
				{
				State = 1157;
				Match(BEGIN);
				State = 1158;
				entity_statement_part();
				}
			}

			State = 1161;
			Match(END);
			State = 1163;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ENTITY) {
				{
				State = 1162;
				Match(ENTITY);
				}
			}

			State = 1166;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BASIC_IDENTIFIER || _la==EXTENDED_IDENTIFIER) {
				{
				State = 1165;
				identifier();
				}
			}

			State = 1168;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Entity_declarative_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Subprogram_declarationContext subprogram_declaration() {
			return GetRuleContext<Subprogram_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Subprogram_bodyContext subprogram_body() {
			return GetRuleContext<Subprogram_bodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_declarationContext type_declaration() {
			return GetRuleContext<Type_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Subtype_declarationContext subtype_declaration() {
			return GetRuleContext<Subtype_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Constant_declarationContext constant_declaration() {
			return GetRuleContext<Constant_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Signal_declarationContext signal_declaration() {
			return GetRuleContext<Signal_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variable_declarationContext variable_declaration() {
			return GetRuleContext<Variable_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public File_declarationContext file_declaration() {
			return GetRuleContext<File_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alias_declarationContext alias_declaration() {
			return GetRuleContext<Alias_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Attribute_declarationContext attribute_declaration() {
			return GetRuleContext<Attribute_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Attribute_specificationContext attribute_specification() {
			return GetRuleContext<Attribute_specificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Disconnection_specificationContext disconnection_specification() {
			return GetRuleContext<Disconnection_specificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Step_limit_specificationContext step_limit_specification() {
			return GetRuleContext<Step_limit_specificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Use_clauseContext use_clause() {
			return GetRuleContext<Use_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Group_template_declarationContext group_template_declaration() {
			return GetRuleContext<Group_template_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Group_declarationContext group_declaration() {
			return GetRuleContext<Group_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Nature_declarationContext nature_declaration() {
			return GetRuleContext<Nature_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Subnature_declarationContext subnature_declaration() {
			return GetRuleContext<Subnature_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Quantity_declarationContext quantity_declaration() {
			return GetRuleContext<Quantity_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Terminal_declarationContext terminal_declaration() {
			return GetRuleContext<Terminal_declarationContext>(0);
		}
		public Entity_declarative_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entity_declarative_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterEntity_declarative_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitEntity_declarative_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntity_declarative_item(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Entity_declarative_itemContext entity_declarative_item() {
		Entity_declarative_itemContext _localctx = new Entity_declarative_itemContext(Context, State);
		EnterRule(_localctx, 168, RULE_entity_declarative_item);
		try {
			State = 1190;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,101,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1170;
				subprogram_declaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1171;
				subprogram_body();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1172;
				type_declaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1173;
				subtype_declaration();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1174;
				constant_declaration();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1175;
				signal_declaration();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1176;
				variable_declaration();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1177;
				file_declaration();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1178;
				alias_declaration();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1179;
				attribute_declaration();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1180;
				attribute_specification();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1181;
				disconnection_specification();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 1182;
				step_limit_specification();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 1183;
				use_clause();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 1184;
				group_template_declaration();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 1185;
				group_declaration();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 1186;
				nature_declaration();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 1187;
				subnature_declaration();
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 1188;
				quantity_declaration();
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 1189;
				terminal_declaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Entity_declarative_partContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Entity_declarative_itemContext[] entity_declarative_item() {
			return GetRuleContexts<Entity_declarative_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Entity_declarative_itemContext entity_declarative_item(int i) {
			return GetRuleContext<Entity_declarative_itemContext>(i);
		}
		public Entity_declarative_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entity_declarative_part; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterEntity_declarative_part(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitEntity_declarative_part(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntity_declarative_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Entity_declarative_partContext entity_declarative_part() {
		Entity_declarative_partContext _localctx = new Entity_declarative_partContext(Context, State);
		EnterRule(_localctx, 170, RULE_entity_declarative_part);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1195;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALIAS) | (1L << ATTRIBUTE) | (1L << CONSTANT) | (1L << DISCONNECT) | (1L << FILE) | (1L << FUNCTION) | (1L << GROUP) | (1L << IMPURE) | (1L << LIMIT) | (1L << NATURE))) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (PROCEDURE - 68)) | (1L << (PURE - 68)) | (1L << (QUANTITY - 68)) | (1L << (SHARED - 68)) | (1L << (SIGNAL - 68)) | (1L << (SUBNATURE - 68)) | (1L << (SUBTYPE - 68)) | (1L << (TERMINAL - 68)) | (1L << (TYPE - 68)) | (1L << (USE - 68)) | (1L << (VARIABLE - 68)))) != 0)) {
				{
				{
				State = 1192;
				entity_declarative_item();
				}
				}
				State = 1197;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Entity_designatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Entity_tagContext entity_tag() {
			return GetRuleContext<Entity_tagContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SignatureContext signature() {
			return GetRuleContext<SignatureContext>(0);
		}
		public Entity_designatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entity_designator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterEntity_designator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitEntity_designator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntity_designator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Entity_designatorContext entity_designator() {
		Entity_designatorContext _localctx = new Entity_designatorContext(Context, State);
		EnterRule(_localctx, 172, RULE_entity_designator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1198;
			entity_tag();
			State = 1200;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LBRACKET) {
				{
				State = 1199;
				signature();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Entity_headerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Generic_clauseContext generic_clause() {
			return GetRuleContext<Generic_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Port_clauseContext port_clause() {
			return GetRuleContext<Port_clauseContext>(0);
		}
		public Entity_headerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entity_header; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterEntity_header(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitEntity_header(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntity_header(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Entity_headerContext entity_header() {
		Entity_headerContext _localctx = new Entity_headerContext(Context, State);
		EnterRule(_localctx, 174, RULE_entity_header);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1203;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==GENERIC) {
				{
				State = 1202;
				generic_clause();
				}
			}

			State = 1206;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PORT) {
				{
				State = 1205;
				port_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Entity_name_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Entity_designatorContext[] entity_designator() {
			return GetRuleContexts<Entity_designatorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Entity_designatorContext entity_designator(int i) {
			return GetRuleContext<Entity_designatorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(vhdlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(vhdlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OTHERS() { return GetToken(vhdlParser.OTHERS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(vhdlParser.ALL, 0); }
		public Entity_name_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entity_name_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterEntity_name_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitEntity_name_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntity_name_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Entity_name_listContext entity_name_list() {
		Entity_name_listContext _localctx = new Entity_name_listContext(Context, State);
		EnterRule(_localctx, 176, RULE_entity_name_list);
		int _la;
		try {
			State = 1218;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BASIC_IDENTIFIER:
			case EXTENDED_IDENTIFIER:
			case CHARACTER_LITERAL:
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1208;
				entity_designator();
				State = 1213;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1209;
					Match(COMMA);
					State = 1210;
					entity_designator();
					}
					}
					State = 1215;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case OTHERS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1216;
				Match(OTHERS);
				}
				break;
			case ALL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1217;
				Match(ALL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Entity_specificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Entity_name_listContext entity_name_list() {
			return GetRuleContext<Entity_name_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(vhdlParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Entity_classContext entity_class() {
			return GetRuleContext<Entity_classContext>(0);
		}
		public Entity_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entity_specification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterEntity_specification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitEntity_specification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntity_specification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Entity_specificationContext entity_specification() {
		Entity_specificationContext _localctx = new Entity_specificationContext(Context, State);
		EnterRule(_localctx, 178, RULE_entity_specification);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1220;
			entity_name_list();
			State = 1221;
			Match(COLON);
			State = 1222;
			entity_class();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Entity_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Concurrent_assertion_statementContext concurrent_assertion_statement() {
			return GetRuleContext<Concurrent_assertion_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Process_statementContext process_statement() {
			return GetRuleContext<Process_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Concurrent_procedure_call_statementContext concurrent_procedure_call_statement() {
			return GetRuleContext<Concurrent_procedure_call_statementContext>(0);
		}
		public Entity_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entity_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterEntity_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitEntity_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntity_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Entity_statementContext entity_statement() {
		Entity_statementContext _localctx = new Entity_statementContext(Context, State);
		EnterRule(_localctx, 180, RULE_entity_statement);
		try {
			State = 1227;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,108,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1224;
				concurrent_assertion_statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1225;
				process_statement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1226;
				concurrent_procedure_call_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Entity_statement_partContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Entity_statementContext[] entity_statement() {
			return GetRuleContexts<Entity_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Entity_statementContext entity_statement(int i) {
			return GetRuleContext<Entity_statementContext>(i);
		}
		public Entity_statement_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entity_statement_part; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterEntity_statement_part(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitEntity_statement_part(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntity_statement_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Entity_statement_partContext entity_statement_part() {
		Entity_statement_partContext _localctx = new Entity_statement_partContext(Context, State);
		EnterRule(_localctx, 182, RULE_entity_statement_part);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1232;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ASSERT || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (POSTPONED - 66)) | (1L << (PROCESS - 66)) | (1L << (BASIC_IDENTIFIER - 66)) | (1L << (EXTENDED_IDENTIFIER - 66)))) != 0)) {
				{
				{
				State = 1229;
				entity_statement();
				}
				}
				State = 1234;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Entity_tagContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARACTER_LITERAL() { return GetToken(vhdlParser.CHARACTER_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(vhdlParser.STRING_LITERAL, 0); }
		public Entity_tagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entity_tag; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterEntity_tag(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitEntity_tag(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEntity_tag(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Entity_tagContext entity_tag() {
		Entity_tagContext _localctx = new Entity_tagContext(Context, State);
		EnterRule(_localctx, 184, RULE_entity_tag);
		try {
			State = 1238;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BASIC_IDENTIFIER:
			case EXTENDED_IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1235;
				identifier();
				}
				break;
			case CHARACTER_LITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1236;
				Match(CHARACTER_LITERAL);
				}
				break;
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1237;
				Match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enumeration_literalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARACTER_LITERAL() { return GetToken(vhdlParser.CHARACTER_LITERAL, 0); }
		public Enumeration_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumeration_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterEnumeration_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitEnumeration_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumeration_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Enumeration_literalContext enumeration_literal() {
		Enumeration_literalContext _localctx = new Enumeration_literalContext(Context, State);
		EnterRule(_localctx, 186, RULE_enumeration_literal);
		try {
			State = 1242;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BASIC_IDENTIFIER:
			case EXTENDED_IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1240;
				identifier();
				}
				break;
			case CHARACTER_LITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1241;
				Match(CHARACTER_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enumeration_type_definitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(vhdlParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Enumeration_literalContext[] enumeration_literal() {
			return GetRuleContexts<Enumeration_literalContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Enumeration_literalContext enumeration_literal(int i) {
			return GetRuleContext<Enumeration_literalContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(vhdlParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(vhdlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(vhdlParser.COMMA, i);
		}
		public Enumeration_type_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumeration_type_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterEnumeration_type_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitEnumeration_type_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumeration_type_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Enumeration_type_definitionContext enumeration_type_definition() {
		Enumeration_type_definitionContext _localctx = new Enumeration_type_definitionContext(Context, State);
		EnterRule(_localctx, 188, RULE_enumeration_type_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1244;
			Match(LPAREN);
			State = 1245;
			enumeration_literal();
			State = 1250;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1246;
				Match(COMMA);
				State = 1247;
				enumeration_literal();
				}
				}
				State = 1252;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1253;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Exit_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXIT() { return GetToken(vhdlParser.EXIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(vhdlParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Label_colonContext label_colon() {
			return GetRuleContext<Label_colonContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHEN() { return GetToken(vhdlParser.WHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public Exit_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exit_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterExit_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitExit_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExit_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Exit_statementContext exit_statement() {
		Exit_statementContext _localctx = new Exit_statementContext(Context, State);
		EnterRule(_localctx, 190, RULE_exit_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1256;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BASIC_IDENTIFIER || _la==EXTENDED_IDENTIFIER) {
				{
				State = 1255;
				label_colon();
				}
			}

			State = 1258;
			Match(EXIT);
			State = 1260;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BASIC_IDENTIFIER || _la==EXTENDED_IDENTIFIER) {
				{
				State = 1259;
				identifier();
				}
			}

			State = 1264;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHEN) {
				{
				State = 1262;
				Match(WHEN);
				State = 1263;
				condition();
				}
			}

			State = 1266;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RelationContext[] relation() {
			return GetRuleContexts<RelationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelationContext relation(int i) {
			return GetRuleContext<RelationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Logical_operatorContext[] logical_operator() {
			return GetRuleContexts<Logical_operatorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Logical_operatorContext logical_operator(int i) {
			return GetRuleContext<Logical_operatorContext>(i);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 192, RULE_expression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1268;
			relation();
			State = 1274;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,116,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1269;
					logical_operator();
					State = 1270;
					relation();
					}
					} 
				}
				State = 1276;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,116,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryContext[] primary() {
			return GetRuleContexts<PrimaryContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryContext primary(int i) {
			return GetRuleContext<PrimaryContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLESTAR() { return GetToken(vhdlParser.DOUBLESTAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABS() { return GetToken(vhdlParser.ABS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(vhdlParser.NOT, 0); }
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		FactorContext _localctx = new FactorContext(Context, State);
		EnterRule(_localctx, 194, RULE_factor);
		try {
			State = 1286;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NEW:
			case NULL_:
			case BASE_LITERAL:
			case BIT_STRING_LITERAL:
			case REAL_LITERAL:
			case BASIC_IDENTIFIER:
			case EXTENDED_IDENTIFIER:
			case CHARACTER_LITERAL:
			case STRING_LITERAL:
			case LPAREN:
			case INTEGER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1277;
				primary();
				State = 1280;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,117,Context) ) {
				case 1:
					{
					State = 1278;
					Match(DOUBLESTAR);
					State = 1279;
					primary();
					}
					break;
				}
				}
				break;
			case ABS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1282;
				Match(ABS);
				State = 1283;
				primary();
				}
				break;
			case NOT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1284;
				Match(NOT);
				State = 1285;
				primary();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class File_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILE() { return GetToken(vhdlParser.FILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Identifier_listContext identifier_list() {
			return GetRuleContext<Identifier_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(vhdlParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Subtype_indicationContext subtype_indication() {
			return GetRuleContext<Subtype_indicationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(vhdlParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public File_open_informationContext file_open_information() {
			return GetRuleContext<File_open_informationContext>(0);
		}
		public File_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterFile_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitFile_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public File_declarationContext file_declaration() {
		File_declarationContext _localctx = new File_declarationContext(Context, State);
		EnterRule(_localctx, 196, RULE_file_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1288;
			Match(FILE);
			State = 1289;
			identifier_list();
			State = 1290;
			Match(COLON);
			State = 1291;
			subtype_indication();
			State = 1293;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IS || _la==OPEN) {
				{
				State = 1292;
				file_open_information();
				}
			}

			State = 1295;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class File_logical_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public File_logical_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file_logical_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterFile_logical_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitFile_logical_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile_logical_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public File_logical_nameContext file_logical_name() {
		File_logical_nameContext _localctx = new File_logical_nameContext(Context, State);
		EnterRule(_localctx, 198, RULE_file_logical_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1297;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class File_open_informationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(vhdlParser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public File_logical_nameContext file_logical_name() {
			return GetRuleContext<File_logical_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(vhdlParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public File_open_informationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file_open_information; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterFile_open_information(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitFile_open_information(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile_open_information(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public File_open_informationContext file_open_information() {
		File_open_informationContext _localctx = new File_open_informationContext(Context, State);
		EnterRule(_localctx, 200, RULE_file_open_information);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1301;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN) {
				{
				State = 1299;
				Match(OPEN);
				State = 1300;
				expression();
				}
			}

			State = 1303;
			Match(IS);
			State = 1304;
			file_logical_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class File_type_definitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILE() { return GetToken(vhdlParser.FILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(vhdlParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Subtype_indicationContext subtype_indication() {
			return GetRuleContext<Subtype_indicationContext>(0);
		}
		public File_type_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file_type_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterFile_type_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitFile_type_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile_type_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public File_type_definitionContext file_type_definition() {
		File_type_definitionContext _localctx = new File_type_definitionContext(Context, State);
		EnterRule(_localctx, 202, RULE_file_type_definition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1306;
			Match(FILE);
			State = 1307;
			Match(OF);
			State = 1308;
			subtype_indication();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Formal_parameter_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Interface_listContext interface_list() {
			return GetRuleContext<Interface_listContext>(0);
		}
		public Formal_parameter_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formal_parameter_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterFormal_parameter_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitFormal_parameter_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormal_parameter_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Formal_parameter_listContext formal_parameter_list() {
		Formal_parameter_listContext _localctx = new Formal_parameter_listContext(Context, State);
		EnterRule(_localctx, 204, RULE_formal_parameter_list);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1310;
			interface_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Formal_partContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(vhdlParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Explicit_rangeContext explicit_range() {
			return GetRuleContext<Explicit_rangeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(vhdlParser.RPAREN, 0); }
		public Formal_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formal_part; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterFormal_part(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitFormal_part(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormal_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Formal_partContext formal_part() {
		Formal_partContext _localctx = new Formal_partContext(Context, State);
		EnterRule(_localctx, 206, RULE_formal_part);
		try {
			State = 1318;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,121,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1312;
				identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1313;
				identifier();
				State = 1314;
				Match(LPAREN);
				State = 1315;
				explicit_range();
				State = 1316;
				Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Free_quantity_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUANTITY() { return GetToken(vhdlParser.QUANTITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Identifier_listContext identifier_list() {
			return GetRuleContext<Identifier_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(vhdlParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Subtype_indicationContext subtype_indication() {
			return GetRuleContext<Subtype_indicationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(vhdlParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARASGN() { return GetToken(vhdlParser.VARASGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Free_quantity_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_free_quantity_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterFree_quantity_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitFree_quantity_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFree_quantity_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Free_quantity_declarationContext free_quantity_declaration() {
		Free_quantity_declarationContext _localctx = new Free_quantity_declarationContext(Context, State);
		EnterRule(_localctx, 208, RULE_free_quantity_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1320;
			Match(QUANTITY);
			State = 1321;
			identifier_list();
			State = 1322;
			Match(COLON);
			State = 1323;
			subtype_indication();
			State = 1326;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==VARASGN) {
				{
				State = 1324;
				Match(VARASGN);
				State = 1325;
				expression();
				}
			}

			State = 1328;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Generate_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Label_colonContext label_colon() {
			return GetRuleContext<Label_colonContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Generation_schemeContext generation_scheme() {
			return GetRuleContext<Generation_schemeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GENERATE() { return GetTokens(vhdlParser.GENERATE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GENERATE(int i) {
			return GetToken(vhdlParser.GENERATE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(vhdlParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(vhdlParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN() { return GetToken(vhdlParser.BEGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Architecture_statementContext[] architecture_statement() {
			return GetRuleContexts<Architecture_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Architecture_statementContext architecture_statement(int i) {
			return GetRuleContext<Architecture_statementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Block_declarative_itemContext[] block_declarative_item() {
			return GetRuleContexts<Block_declarative_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Block_declarative_itemContext block_declarative_item(int i) {
			return GetRuleContext<Block_declarative_itemContext>(i);
		}
		public Generate_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generate_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterGenerate_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitGenerate_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenerate_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Generate_statementContext generate_statement() {
		Generate_statementContext _localctx = new Generate_statementContext(Context, State);
		EnterRule(_localctx, 210, RULE_generate_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1330;
			label_colon();
			State = 1331;
			generation_scheme();
			State = 1332;
			Match(GENERATE);
			State = 1340;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALIAS) | (1L << ATTRIBUTE) | (1L << BEGIN) | (1L << COMPONENT) | (1L << CONSTANT) | (1L << DISCONNECT) | (1L << FILE) | (1L << FOR) | (1L << FUNCTION) | (1L << GROUP) | (1L << IMPURE) | (1L << LIMIT) | (1L << NATURE))) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (PROCEDURE - 68)) | (1L << (PURE - 68)) | (1L << (QUANTITY - 68)) | (1L << (SHARED - 68)) | (1L << (SIGNAL - 68)) | (1L << (SUBNATURE - 68)) | (1L << (SUBTYPE - 68)) | (1L << (TERMINAL - 68)) | (1L << (TYPE - 68)) | (1L << (USE - 68)) | (1L << (VARIABLE - 68)))) != 0)) {
				{
				State = 1336;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALIAS) | (1L << ATTRIBUTE) | (1L << COMPONENT) | (1L << CONSTANT) | (1L << DISCONNECT) | (1L << FILE) | (1L << FOR) | (1L << FUNCTION) | (1L << GROUP) | (1L << IMPURE) | (1L << LIMIT) | (1L << NATURE))) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (PROCEDURE - 68)) | (1L << (PURE - 68)) | (1L << (QUANTITY - 68)) | (1L << (SHARED - 68)) | (1L << (SIGNAL - 68)) | (1L << (SUBNATURE - 68)) | (1L << (SUBTYPE - 68)) | (1L << (TERMINAL - 68)) | (1L << (TYPE - 68)) | (1L << (USE - 68)) | (1L << (VARIABLE - 68)))) != 0)) {
					{
					{
					State = 1333;
					block_declarative_item();
					}
					}
					State = 1338;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1339;
				Match(BEGIN);
				}
			}

			State = 1345;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABS) | (1L << ASSERT) | (1L << BREAK) | (1L << CASE) | (1L << IF) | (1L << NEW) | (1L << NOT) | (1L << NULL_))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (POSTPONED - 66)) | (1L << (PROCESS - 66)) | (1L << (PROCEDURAL - 66)) | (1L << (WITH - 66)) | (1L << (BASE_LITERAL - 66)) | (1L << (BIT_STRING_LITERAL - 66)) | (1L << (REAL_LITERAL - 66)) | (1L << (BASIC_IDENTIFIER - 66)) | (1L << (EXTENDED_IDENTIFIER - 66)) | (1L << (CHARACTER_LITERAL - 66)) | (1L << (STRING_LITERAL - 66)))) != 0) || ((((_la - 141)) & ~0x3f) == 0 && ((1L << (_la - 141)) & ((1L << (LPAREN - 141)) | (1L << (PLUS - 141)) | (1L << (MINUS - 141)) | (1L << (INTEGER - 141)))) != 0)) {
				{
				{
				State = 1342;
				architecture_statement();
				}
				}
				State = 1347;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1348;
			Match(END);
			State = 1349;
			Match(GENERATE);
			State = 1351;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BASIC_IDENTIFIER || _la==EXTENDED_IDENTIFIER) {
				{
				State = 1350;
				identifier();
				}
			}

			State = 1353;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Generation_schemeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(vhdlParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Parameter_specificationContext parameter_specification() {
			return GetRuleContext<Parameter_specificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(vhdlParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public Generation_schemeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generation_scheme; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterGeneration_scheme(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitGeneration_scheme(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeneration_scheme(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Generation_schemeContext generation_scheme() {
		Generation_schemeContext _localctx = new Generation_schemeContext(Context, State);
		EnterRule(_localctx, 212, RULE_generation_scheme);
		try {
			State = 1359;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FOR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1355;
				Match(FOR);
				State = 1356;
				parameter_specification();
				}
				break;
			case IF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1357;
				Match(IF);
				State = 1358;
				condition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Generic_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GENERIC() { return GetToken(vhdlParser.GENERIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(vhdlParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Generic_listContext generic_list() {
			return GetRuleContext<Generic_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(vhdlParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(vhdlParser.SEMI, 0); }
		public Generic_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generic_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterGeneric_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitGeneric_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeneric_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Generic_clauseContext generic_clause() {
		Generic_clauseContext _localctx = new Generic_clauseContext(Context, State);
		EnterRule(_localctx, 214, RULE_generic_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1361;
			Match(GENERIC);
			State = 1362;
			Match(LPAREN);
			State = 1363;
			generic_list();
			State = 1364;
			Match(RPAREN);
			State = 1365;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Generic_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Interface_constant_declarationContext[] interface_constant_declaration() {
			return GetRuleContexts<Interface_constant_declarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Interface_constant_declarationContext interface_constant_declaration(int i) {
			return GetRuleContext<Interface_constant_declarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMI() { return GetTokens(vhdlParser.SEMI); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI(int i) {
			return GetToken(vhdlParser.SEMI, i);
		}
		public Generic_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generic_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterGeneric_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitGeneric_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeneric_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Generic_listContext generic_list() {
		Generic_listContext _localctx = new Generic_listContext(Context, State);
		EnterRule(_localctx, 216, RULE_generic_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1367;
			interface_constant_declaration();
			State = 1372;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SEMI) {
				{
				{
				State = 1368;
				Match(SEMI);
				State = 1369;
				interface_constant_declaration();
				}
				}
				State = 1374;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Generic_map_aspectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GENERIC() { return GetToken(vhdlParser.GENERIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAP() { return GetToken(vhdlParser.MAP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(vhdlParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Association_listContext association_list() {
			return GetRuleContext<Association_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(vhdlParser.RPAREN, 0); }
		public Generic_map_aspectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generic_map_aspect; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterGeneric_map_aspect(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitGeneric_map_aspect(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeneric_map_aspect(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Generic_map_aspectContext generic_map_aspect() {
		Generic_map_aspectContext _localctx = new Generic_map_aspectContext(Context, State);
		EnterRule(_localctx, 218, RULE_generic_map_aspect);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1375;
			Match(GENERIC);
			State = 1376;
			Match(MAP);
			State = 1377;
			Match(LPAREN);
			State = 1378;
			association_list();
			State = 1379;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Group_constituentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARACTER_LITERAL() { return GetToken(vhdlParser.CHARACTER_LITERAL, 0); }
		public Group_constituentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_group_constituent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterGroup_constituent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitGroup_constituent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroup_constituent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Group_constituentContext group_constituent() {
		Group_constituentContext _localctx = new Group_constituentContext(Context, State);
		EnterRule(_localctx, 220, RULE_group_constituent);
		try {
			State = 1383;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BASIC_IDENTIFIER:
			case EXTENDED_IDENTIFIER:
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1381;
				name();
				}
				break;
			case CHARACTER_LITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1382;
				Match(CHARACTER_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Group_constituent_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Group_constituentContext[] group_constituent() {
			return GetRuleContexts<Group_constituentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Group_constituentContext group_constituent(int i) {
			return GetRuleContext<Group_constituentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(vhdlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(vhdlParser.COMMA, i);
		}
		public Group_constituent_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_group_constituent_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterGroup_constituent_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitGroup_constituent_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroup_constituent_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Group_constituent_listContext group_constituent_list() {
		Group_constituent_listContext _localctx = new Group_constituent_listContext(Context, State);
		EnterRule(_localctx, 222, RULE_group_constituent_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1385;
			group_constituent();
			State = 1390;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1386;
				Match(COMMA);
				State = 1387;
				group_constituent();
				}
				}
				State = 1392;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Group_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP() { return GetToken(vhdlParser.GROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Label_colonContext label_colon() {
			return GetRuleContext<Label_colonContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(vhdlParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Group_constituent_listContext group_constituent_list() {
			return GetRuleContext<Group_constituent_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(vhdlParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(vhdlParser.SEMI, 0); }
		public Group_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_group_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterGroup_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitGroup_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroup_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Group_declarationContext group_declaration() {
		Group_declarationContext _localctx = new Group_declarationContext(Context, State);
		EnterRule(_localctx, 224, RULE_group_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1393;
			Match(GROUP);
			State = 1394;
			label_colon();
			State = 1395;
			name();
			State = 1396;
			Match(LPAREN);
			State = 1397;
			group_constituent_list();
			State = 1398;
			Match(RPAREN);
			State = 1399;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Group_template_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP() { return GetToken(vhdlParser.GROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(vhdlParser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(vhdlParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Entity_class_entry_listContext entity_class_entry_list() {
			return GetRuleContext<Entity_class_entry_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(vhdlParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(vhdlParser.SEMI, 0); }
		public Group_template_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_group_template_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterGroup_template_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitGroup_template_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroup_template_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Group_template_declarationContext group_template_declaration() {
		Group_template_declarationContext _localctx = new Group_template_declarationContext(Context, State);
		EnterRule(_localctx, 226, RULE_group_template_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1401;
			Match(GROUP);
			State = 1402;
			identifier();
			State = 1403;
			Match(IS);
			State = 1404;
			Match(LPAREN);
			State = 1405;
			entity_class_entry_list();
			State = 1406;
			Match(RPAREN);
			State = 1407;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Guarded_signal_specificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Signal_listContext signal_list() {
			return GetRuleContext<Signal_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(vhdlParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Guarded_signal_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_guarded_signal_specification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterGuarded_signal_specification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitGuarded_signal_specification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGuarded_signal_specification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Guarded_signal_specificationContext guarded_signal_specification() {
		Guarded_signal_specificationContext _localctx = new Guarded_signal_specificationContext(Context, State);
		EnterRule(_localctx, 228, RULE_guarded_signal_specification);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1409;
			signal_list();
			State = 1410;
			Match(COLON);
			State = 1411;
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BASIC_IDENTIFIER() { return GetToken(vhdlParser.BASIC_IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENDED_IDENTIFIER() { return GetToken(vhdlParser.EXTENDED_IDENTIFIER, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 230, RULE_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1413;
			_la = TokenStream.LA(1);
			if ( !(_la==BASIC_IDENTIFIER || _la==EXTENDED_IDENTIFIER) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Identifier_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(vhdlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(vhdlParser.COMMA, i);
		}
		public Identifier_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterIdentifier_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitIdentifier_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Identifier_listContext identifier_list() {
		Identifier_listContext _localctx = new Identifier_listContext(Context, State);
		EnterRule(_localctx, 232, RULE_identifier_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1415;
			identifier();
			State = 1420;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1416;
				Match(COMMA);
				State = 1417;
				identifier();
				}
				}
				State = 1422;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IF() { return GetTokens(vhdlParser.IF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF(int i) {
			return GetToken(vhdlParser.IF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext[] condition() {
			return GetRuleContexts<ConditionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition(int i) {
			return GetRuleContext<ConditionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] THEN() { return GetTokens(vhdlParser.THEN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN(int i) {
			return GetToken(vhdlParser.THEN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sequence_of_statementsContext[] sequence_of_statements() {
			return GetRuleContexts<Sequence_of_statementsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sequence_of_statementsContext sequence_of_statements(int i) {
			return GetRuleContext<Sequence_of_statementsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(vhdlParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(vhdlParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Label_colonContext label_colon() {
			return GetRuleContext<Label_colonContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ELSIF() { return GetTokens(vhdlParser.ELSIF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSIF(int i) {
			return GetToken(vhdlParser.ELSIF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(vhdlParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public If_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterIf_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitIf_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_statementContext if_statement() {
		If_statementContext _localctx = new If_statementContext(Context, State);
		EnterRule(_localctx, 234, RULE_if_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1424;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BASIC_IDENTIFIER || _la==EXTENDED_IDENTIFIER) {
				{
				State = 1423;
				label_colon();
				}
			}

			State = 1426;
			Match(IF);
			State = 1427;
			condition();
			State = 1428;
			Match(THEN);
			State = 1429;
			sequence_of_statements();
			State = 1437;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ELSIF) {
				{
				{
				State = 1430;
				Match(ELSIF);
				State = 1431;
				condition();
				State = 1432;
				Match(THEN);
				State = 1433;
				sequence_of_statements();
				}
				}
				State = 1439;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1442;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 1440;
				Match(ELSE);
				State = 1441;
				sequence_of_statements();
				}
			}

			State = 1444;
			Match(END);
			State = 1445;
			Match(IF);
			State = 1447;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BASIC_IDENTIFIER || _la==EXTENDED_IDENTIFIER) {
				{
				State = 1446;
				identifier();
				}
			}

			State = 1449;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Index_constraintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(vhdlParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Discrete_rangeContext[] discrete_range() {
			return GetRuleContexts<Discrete_rangeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Discrete_rangeContext discrete_range(int i) {
			return GetRuleContext<Discrete_rangeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(vhdlParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(vhdlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(vhdlParser.COMMA, i);
		}
		public Index_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index_constraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterIndex_constraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitIndex_constraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndex_constraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Index_constraintContext index_constraint() {
		Index_constraintContext _localctx = new Index_constraintContext(Context, State);
		EnterRule(_localctx, 236, RULE_index_constraint);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1451;
			Match(LPAREN);
			State = 1452;
			discrete_range();
			State = 1457;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1453;
				Match(COMMA);
				State = 1454;
				discrete_range();
				}
				}
				State = 1459;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1460;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Index_specificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Discrete_rangeContext discrete_range() {
			return GetRuleContext<Discrete_rangeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Index_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index_specification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterIndex_specification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitIndex_specification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndex_specification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Index_specificationContext index_specification() {
		Index_specificationContext _localctx = new Index_specificationContext(Context, State);
		EnterRule(_localctx, 238, RULE_index_specification);
		try {
			State = 1464;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,137,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1462;
				discrete_range();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1463;
				expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Index_subtype_definitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANGE() { return GetToken(vhdlParser.RANGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOX() { return GetToken(vhdlParser.BOX, 0); }
		public Index_subtype_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index_subtype_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterIndex_subtype_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitIndex_subtype_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndex_subtype_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Index_subtype_definitionContext index_subtype_definition() {
		Index_subtype_definitionContext _localctx = new Index_subtype_definitionContext(Context, State);
		EnterRule(_localctx, 240, RULE_index_subtype_definition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1466;
			name();
			State = 1467;
			Match(RANGE);
			State = 1468;
			Match(BOX);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Instantiated_unitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPONENT() { return GetToken(vhdlParser.COMPONENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENTITY() { return GetToken(vhdlParser.ENTITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(vhdlParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(vhdlParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONFIGURATION() { return GetToken(vhdlParser.CONFIGURATION, 0); }
		public Instantiated_unitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instantiated_unit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterInstantiated_unit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitInstantiated_unit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstantiated_unit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Instantiated_unitContext instantiated_unit() {
		Instantiated_unitContext _localctx = new Instantiated_unitContext(Context, State);
		EnterRule(_localctx, 242, RULE_instantiated_unit);
		int _la;
		try {
			State = 1484;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COMPONENT:
			case BASIC_IDENTIFIER:
			case EXTENDED_IDENTIFIER:
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1471;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMPONENT) {
					{
					State = 1470;
					Match(COMPONENT);
					}
				}

				State = 1473;
				name();
				}
				break;
			case ENTITY:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1474;
				Match(ENTITY);
				State = 1475;
				name();
				State = 1480;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LPAREN) {
					{
					State = 1476;
					Match(LPAREN);
					State = 1477;
					identifier();
					State = 1478;
					Match(RPAREN);
					}
				}

				}
				break;
			case CONFIGURATION:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1482;
				Match(CONFIGURATION);
				State = 1483;
				name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Instantiation_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(vhdlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(vhdlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OTHERS() { return GetToken(vhdlParser.OTHERS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(vhdlParser.ALL, 0); }
		public Instantiation_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instantiation_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterInstantiation_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitInstantiation_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstantiation_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Instantiation_listContext instantiation_list() {
		Instantiation_listContext _localctx = new Instantiation_listContext(Context, State);
		EnterRule(_localctx, 244, RULE_instantiation_list);
		int _la;
		try {
			State = 1496;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BASIC_IDENTIFIER:
			case EXTENDED_IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1486;
				identifier();
				State = 1491;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1487;
					Match(COMMA);
					State = 1488;
					identifier();
					}
					}
					State = 1493;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case OTHERS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1494;
				Match(OTHERS);
				}
				break;
			case ALL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1495;
				Match(ALL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_constant_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Identifier_listContext identifier_list() {
			return GetRuleContext<Identifier_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(vhdlParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Subtype_indicationContext subtype_indication() {
			return GetRuleContext<Subtype_indicationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTANT() { return GetToken(vhdlParser.CONSTANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(vhdlParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARASGN() { return GetToken(vhdlParser.VARASGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Interface_constant_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_constant_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterInterface_constant_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitInterface_constant_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterface_constant_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interface_constant_declarationContext interface_constant_declaration() {
		Interface_constant_declarationContext _localctx = new Interface_constant_declarationContext(Context, State);
		EnterRule(_localctx, 246, RULE_interface_constant_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1499;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CONSTANT) {
				{
				State = 1498;
				Match(CONSTANT);
				}
			}

			State = 1501;
			identifier_list();
			State = 1502;
			Match(COLON);
			State = 1504;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IN) {
				{
				State = 1503;
				Match(IN);
				}
			}

			State = 1506;
			subtype_indication();
			State = 1509;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==VARASGN) {
				{
				State = 1507;
				Match(VARASGN);
				State = 1508;
				expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Interface_constant_declarationContext interface_constant_declaration() {
			return GetRuleContext<Interface_constant_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Interface_signal_declarationContext interface_signal_declaration() {
			return GetRuleContext<Interface_signal_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Interface_variable_declarationContext interface_variable_declaration() {
			return GetRuleContext<Interface_variable_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Interface_file_declarationContext interface_file_declaration() {
			return GetRuleContext<Interface_file_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Interface_terminal_declarationContext interface_terminal_declaration() {
			return GetRuleContext<Interface_terminal_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Interface_quantity_declarationContext interface_quantity_declaration() {
			return GetRuleContext<Interface_quantity_declarationContext>(0);
		}
		public Interface_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterInterface_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitInterface_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterface_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interface_declarationContext interface_declaration() {
		Interface_declarationContext _localctx = new Interface_declarationContext(Context, State);
		EnterRule(_localctx, 248, RULE_interface_declaration);
		try {
			State = 1517;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,146,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1511;
				interface_constant_declaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1512;
				interface_signal_declaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1513;
				interface_variable_declaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1514;
				interface_file_declaration();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1515;
				interface_terminal_declaration();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1516;
				interface_quantity_declaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_elementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Interface_declarationContext interface_declaration() {
			return GetRuleContext<Interface_declarationContext>(0);
		}
		public Interface_elementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_element; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterInterface_element(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitInterface_element(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterface_element(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interface_elementContext interface_element() {
		Interface_elementContext _localctx = new Interface_elementContext(Context, State);
		EnterRule(_localctx, 250, RULE_interface_element);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1519;
			interface_declaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_file_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILE() { return GetToken(vhdlParser.FILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Identifier_listContext identifier_list() {
			return GetRuleContext<Identifier_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(vhdlParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Subtype_indicationContext subtype_indication() {
			return GetRuleContext<Subtype_indicationContext>(0);
		}
		public Interface_file_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_file_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterInterface_file_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitInterface_file_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterface_file_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interface_file_declarationContext interface_file_declaration() {
		Interface_file_declarationContext _localctx = new Interface_file_declarationContext(Context, State);
		EnterRule(_localctx, 252, RULE_interface_file_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1521;
			Match(FILE);
			State = 1522;
			identifier_list();
			State = 1523;
			Match(COLON);
			State = 1524;
			subtype_indication();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_signal_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Interface_signal_declarationContext[] interface_signal_declaration() {
			return GetRuleContexts<Interface_signal_declarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Interface_signal_declarationContext interface_signal_declaration(int i) {
			return GetRuleContext<Interface_signal_declarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMI() { return GetTokens(vhdlParser.SEMI); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI(int i) {
			return GetToken(vhdlParser.SEMI, i);
		}
		public Interface_signal_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_signal_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterInterface_signal_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitInterface_signal_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterface_signal_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interface_signal_listContext interface_signal_list() {
		Interface_signal_listContext _localctx = new Interface_signal_listContext(Context, State);
		EnterRule(_localctx, 254, RULE_interface_signal_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1526;
			interface_signal_declaration();
			State = 1531;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SEMI) {
				{
				{
				State = 1527;
				Match(SEMI);
				State = 1528;
				interface_signal_declaration();
				}
				}
				State = 1533;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_port_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Interface_port_declarationContext[] interface_port_declaration() {
			return GetRuleContexts<Interface_port_declarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Interface_port_declarationContext interface_port_declaration(int i) {
			return GetRuleContext<Interface_port_declarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMI() { return GetTokens(vhdlParser.SEMI); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI(int i) {
			return GetToken(vhdlParser.SEMI, i);
		}
		public Interface_port_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_port_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterInterface_port_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitInterface_port_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterface_port_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interface_port_listContext interface_port_list() {
		Interface_port_listContext _localctx = new Interface_port_listContext(Context, State);
		EnterRule(_localctx, 256, RULE_interface_port_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1534;
			interface_port_declaration();
			State = 1539;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SEMI) {
				{
				{
				State = 1535;
				Match(SEMI);
				State = 1536;
				interface_port_declaration();
				}
				}
				State = 1541;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Interface_elementContext[] interface_element() {
			return GetRuleContexts<Interface_elementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Interface_elementContext interface_element(int i) {
			return GetRuleContext<Interface_elementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMI() { return GetTokens(vhdlParser.SEMI); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI(int i) {
			return GetToken(vhdlParser.SEMI, i);
		}
		public Interface_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterInterface_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitInterface_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterface_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interface_listContext interface_list() {
		Interface_listContext _localctx = new Interface_listContext(Context, State);
		EnterRule(_localctx, 258, RULE_interface_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1542;
			interface_element();
			State = 1547;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SEMI) {
				{
				{
				State = 1543;
				Match(SEMI);
				State = 1544;
				interface_element();
				}
				}
				State = 1549;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_quantity_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUANTITY() { return GetToken(vhdlParser.QUANTITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Identifier_listContext identifier_list() {
			return GetRuleContext<Identifier_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(vhdlParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Subtype_indicationContext subtype_indication() {
			return GetRuleContext<Subtype_indicationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARASGN() { return GetToken(vhdlParser.VARASGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(vhdlParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUT() { return GetToken(vhdlParser.OUT, 0); }
		public Interface_quantity_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_quantity_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterInterface_quantity_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitInterface_quantity_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterface_quantity_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interface_quantity_declarationContext interface_quantity_declaration() {
		Interface_quantity_declarationContext _localctx = new Interface_quantity_declarationContext(Context, State);
		EnterRule(_localctx, 260, RULE_interface_quantity_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1550;
			Match(QUANTITY);
			State = 1551;
			identifier_list();
			State = 1552;
			Match(COLON);
			State = 1554;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IN || _la==OUT) {
				{
				State = 1553;
				_la = TokenStream.LA(1);
				if ( !(_la==IN || _la==OUT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 1556;
			subtype_indication();
			State = 1559;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==VARASGN) {
				{
				State = 1557;
				Match(VARASGN);
				State = 1558;
				expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_port_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Identifier_listContext identifier_list() {
			return GetRuleContext<Identifier_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(vhdlParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Subtype_indicationContext subtype_indication() {
			return GetRuleContext<Subtype_indicationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Signal_modeContext signal_mode() {
			return GetRuleContext<Signal_modeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BUS() { return GetToken(vhdlParser.BUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARASGN() { return GetToken(vhdlParser.VARASGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Interface_port_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_port_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterInterface_port_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitInterface_port_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterface_port_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interface_port_declarationContext interface_port_declaration() {
		Interface_port_declarationContext _localctx = new Interface_port_declarationContext(Context, State);
		EnterRule(_localctx, 262, RULE_interface_port_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1561;
			identifier_list();
			State = 1562;
			Match(COLON);
			State = 1564;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BUFFER) | (1L << IN) | (1L << INOUT) | (1L << LINKAGE) | (1L << OUT))) != 0)) {
				{
				State = 1563;
				signal_mode();
				}
			}

			State = 1566;
			subtype_indication();
			State = 1568;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BUS) {
				{
				State = 1567;
				Match(BUS);
				}
			}

			State = 1572;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==VARASGN) {
				{
				State = 1570;
				Match(VARASGN);
				State = 1571;
				expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_signal_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIGNAL() { return GetToken(vhdlParser.SIGNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Identifier_listContext identifier_list() {
			return GetRuleContext<Identifier_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(vhdlParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Subtype_indicationContext subtype_indication() {
			return GetRuleContext<Subtype_indicationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Signal_modeContext signal_mode() {
			return GetRuleContext<Signal_modeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BUS() { return GetToken(vhdlParser.BUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARASGN() { return GetToken(vhdlParser.VARASGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Interface_signal_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_signal_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterInterface_signal_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitInterface_signal_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterface_signal_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interface_signal_declarationContext interface_signal_declaration() {
		Interface_signal_declarationContext _localctx = new Interface_signal_declarationContext(Context, State);
		EnterRule(_localctx, 264, RULE_interface_signal_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1574;
			Match(SIGNAL);
			State = 1575;
			identifier_list();
			State = 1576;
			Match(COLON);
			State = 1578;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BUFFER) | (1L << IN) | (1L << INOUT) | (1L << LINKAGE) | (1L << OUT))) != 0)) {
				{
				State = 1577;
				signal_mode();
				}
			}

			State = 1580;
			subtype_indication();
			State = 1582;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BUS) {
				{
				State = 1581;
				Match(BUS);
				}
			}

			State = 1586;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==VARASGN) {
				{
				State = 1584;
				Match(VARASGN);
				State = 1585;
				expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_terminal_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TERMINAL() { return GetToken(vhdlParser.TERMINAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Identifier_listContext identifier_list() {
			return GetRuleContext<Identifier_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(vhdlParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Subnature_indicationContext subnature_indication() {
			return GetRuleContext<Subnature_indicationContext>(0);
		}
		public Interface_terminal_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_terminal_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterInterface_terminal_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitInterface_terminal_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterface_terminal_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interface_terminal_declarationContext interface_terminal_declaration() {
		Interface_terminal_declarationContext _localctx = new Interface_terminal_declarationContext(Context, State);
		EnterRule(_localctx, 266, RULE_interface_terminal_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1588;
			Match(TERMINAL);
			State = 1589;
			identifier_list();
			State = 1590;
			Match(COLON);
			State = 1591;
			subnature_indication();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_variable_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Identifier_listContext identifier_list() {
			return GetRuleContext<Identifier_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(vhdlParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Subtype_indicationContext subtype_indication() {
			return GetRuleContext<Subtype_indicationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(vhdlParser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Signal_modeContext signal_mode() {
			return GetRuleContext<Signal_modeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARASGN() { return GetToken(vhdlParser.VARASGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Interface_variable_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_variable_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterInterface_variable_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitInterface_variable_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterface_variable_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interface_variable_declarationContext interface_variable_declaration() {
		Interface_variable_declarationContext _localctx = new Interface_variable_declarationContext(Context, State);
		EnterRule(_localctx, 268, RULE_interface_variable_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1594;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==VARIABLE) {
				{
				State = 1593;
				Match(VARIABLE);
				}
			}

			State = 1596;
			identifier_list();
			State = 1597;
			Match(COLON);
			State = 1599;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BUFFER) | (1L << IN) | (1L << INOUT) | (1L << LINKAGE) | (1L << OUT))) != 0)) {
				{
				State = 1598;
				signal_mode();
				}
			}

			State = 1601;
			subtype_indication();
			State = 1604;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==VARASGN) {
				{
				State = 1602;
				Match(VARASGN);
				State = 1603;
				expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Iteration_schemeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(vhdlParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(vhdlParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Parameter_specificationContext parameter_specification() {
			return GetRuleContext<Parameter_specificationContext>(0);
		}
		public Iteration_schemeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iteration_scheme; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterIteration_scheme(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitIteration_scheme(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIteration_scheme(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Iteration_schemeContext iteration_scheme() {
		Iteration_schemeContext _localctx = new Iteration_schemeContext(Context, State);
		EnterRule(_localctx, 270, RULE_iteration_scheme);
		try {
			State = 1610;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WHILE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1606;
				Match(WHILE);
				State = 1607;
				condition();
				}
				break;
			case FOR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1608;
				Match(FOR);
				State = 1609;
				parameter_specification();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Label_colonContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(vhdlParser.COLON, 0); }
		public Label_colonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_label_colon; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterLabel_colon(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitLabel_colon(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabel_colon(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Label_colonContext label_colon() {
		Label_colonContext _localctx = new Label_colonContext(Context, State);
		EnterRule(_localctx, 272, RULE_label_colon);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1612;
			identifier();
			State = 1613;
			Match(COLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Library_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIBRARY() { return GetToken(vhdlParser.LIBRARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Logical_name_listContext logical_name_list() {
			return GetRuleContext<Logical_name_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(vhdlParser.SEMI, 0); }
		public Library_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_library_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterLibrary_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitLibrary_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLibrary_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Library_clauseContext library_clause() {
		Library_clauseContext _localctx = new Library_clauseContext(Context, State);
		EnterRule(_localctx, 274, RULE_library_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1615;
			Match(LIBRARY);
			State = 1616;
			logical_name_list();
			State = 1617;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Library_unitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Secondary_unitContext secondary_unit() {
			return GetRuleContext<Secondary_unitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Primary_unitContext primary_unit() {
			return GetRuleContext<Primary_unitContext>(0);
		}
		public Library_unitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_library_unit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterLibrary_unit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitLibrary_unit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLibrary_unit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Library_unitContext library_unit() {
		Library_unitContext _localctx = new Library_unitContext(Context, State);
		EnterRule(_localctx, 276, RULE_library_unit);
		try {
			State = 1621;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,162,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1619;
				secondary_unit();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1620;
				primary_unit();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_() { return GetToken(vhdlParser.NULL_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_STRING_LITERAL() { return GetToken(vhdlParser.BIT_STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(vhdlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Enumeration_literalContext enumeration_literal() {
			return GetRuleContext<Enumeration_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Numeric_literalContext numeric_literal() {
			return GetRuleContext<Numeric_literalContext>(0);
		}
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 278, RULE_literal);
		try {
			State = 1628;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NULL_:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1623;
				Match(NULL_);
				}
				break;
			case BIT_STRING_LITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1624;
				Match(BIT_STRING_LITERAL);
				}
				break;
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1625;
				Match(STRING_LITERAL);
				}
				break;
			case BASIC_IDENTIFIER:
			case EXTENDED_IDENTIFIER:
			case CHARACTER_LITERAL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1626;
				enumeration_literal();
				}
				break;
			case BASE_LITERAL:
			case REAL_LITERAL:
			case INTEGER:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1627;
				numeric_literal();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Logical_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Logical_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logical_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterLogical_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitLogical_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogical_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Logical_nameContext logical_name() {
		Logical_nameContext _localctx = new Logical_nameContext(Context, State);
		EnterRule(_localctx, 280, RULE_logical_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1630;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Logical_name_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Logical_nameContext[] logical_name() {
			return GetRuleContexts<Logical_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Logical_nameContext logical_name(int i) {
			return GetRuleContext<Logical_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(vhdlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(vhdlParser.COMMA, i);
		}
		public Logical_name_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logical_name_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterLogical_name_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitLogical_name_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogical_name_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Logical_name_listContext logical_name_list() {
		Logical_name_listContext _localctx = new Logical_name_listContext(Context, State);
		EnterRule(_localctx, 282, RULE_logical_name_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1632;
			logical_name();
			State = 1637;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1633;
				Match(COMMA);
				State = 1634;
				logical_name();
				}
				}
				State = 1639;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Logical_operatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(vhdlParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(vhdlParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAND() { return GetToken(vhdlParser.NAND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOR() { return GetToken(vhdlParser.NOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XOR() { return GetToken(vhdlParser.XOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XNOR() { return GetToken(vhdlParser.XNOR, 0); }
		public Logical_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logical_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterLogical_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitLogical_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogical_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Logical_operatorContext logical_operator() {
		Logical_operatorContext _localctx = new Logical_operatorContext(Context, State);
		EnterRule(_localctx, 284, RULE_logical_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1640;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AND) | (1L << NAND) | (1L << NOR) | (1L << OR))) != 0) || _la==XNOR || _la==XOR) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Loop_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LOOP() { return GetTokens(vhdlParser.LOOP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOOP(int i) {
			return GetToken(vhdlParser.LOOP, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sequence_of_statementsContext sequence_of_statements() {
			return GetRuleContext<Sequence_of_statementsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(vhdlParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(vhdlParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Label_colonContext label_colon() {
			return GetRuleContext<Label_colonContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Iteration_schemeContext iteration_scheme() {
			return GetRuleContext<Iteration_schemeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Loop_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loop_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterLoop_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitLoop_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoop_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Loop_statementContext loop_statement() {
		Loop_statementContext _localctx = new Loop_statementContext(Context, State);
		EnterRule(_localctx, 286, RULE_loop_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1643;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BASIC_IDENTIFIER || _la==EXTENDED_IDENTIFIER) {
				{
				State = 1642;
				label_colon();
				}
			}

			State = 1646;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FOR || _la==WHILE) {
				{
				State = 1645;
				iteration_scheme();
				}
			}

			State = 1648;
			Match(LOOP);
			State = 1649;
			sequence_of_statements();
			State = 1650;
			Match(END);
			State = 1651;
			Match(LOOP);
			State = 1653;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BASIC_IDENTIFIER || _la==EXTENDED_IDENTIFIER) {
				{
				State = 1652;
				identifier();
				}
			}

			State = 1655;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Signal_modeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(vhdlParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUT() { return GetToken(vhdlParser.OUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INOUT() { return GetToken(vhdlParser.INOUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BUFFER() { return GetToken(vhdlParser.BUFFER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINKAGE() { return GetToken(vhdlParser.LINKAGE, 0); }
		public Signal_modeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signal_mode; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterSignal_mode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitSignal_mode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSignal_mode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Signal_modeContext signal_mode() {
		Signal_modeContext _localctx = new Signal_modeContext(Context, State);
		EnterRule(_localctx, 288, RULE_signal_mode);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1657;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BUFFER) | (1L << IN) | (1L << INOUT) | (1L << LINKAGE) | (1L << OUT))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Multiplying_operatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUL() { return GetToken(vhdlParser.MUL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(vhdlParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(vhdlParser.MOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REM() { return GetToken(vhdlParser.REM, 0); }
		public Multiplying_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplying_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterMultiplying_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitMultiplying_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplying_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Multiplying_operatorContext multiplying_operator() {
		Multiplying_operatorContext _localctx = new Multiplying_operatorContext(Context, State);
		EnterRule(_localctx, 290, RULE_multiplying_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1659;
			_la = TokenStream.LA(1);
			if ( !(_la==MOD || _la==REM || _la==MUL || _la==DIV) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(vhdlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Name_partContext[] name_part() {
			return GetRuleContexts<Name_partContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Name_partContext name_part(int i) {
			return GetRuleContext<Name_partContext>(i);
		}
		public NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameContext name() {
		NameContext _localctx = new NameContext(Context, State);
		EnterRule(_localctx, 292, RULE_name);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1663;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BASIC_IDENTIFIER:
			case EXTENDED_IDENTIFIER:
				{
				State = 1661;
				identifier();
				}
				break;
			case STRING_LITERAL:
				{
				State = 1662;
				Match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1668;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,169,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1665;
					name_part();
					}
					} 
				}
				State = 1670;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,169,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Name_partContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Selected_name_partContext selected_name_part() {
			return GetRuleContext<Selected_name_partContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_call_or_indexed_name_partContext function_call_or_indexed_name_part() {
			return GetRuleContext<Function_call_or_indexed_name_partContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Slice_name_partContext slice_name_part() {
			return GetRuleContext<Slice_name_partContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Attribute_name_partContext attribute_name_part() {
			return GetRuleContext<Attribute_name_partContext>(0);
		}
		public Name_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name_part; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterName_part(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitName_part(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitName_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Name_partContext name_part() {
		Name_partContext _localctx = new Name_partContext(Context, State);
		EnterRule(_localctx, 294, RULE_name_part);
		try {
			State = 1675;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,170,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1671;
				selected_name_part();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1672;
				function_call_or_indexed_name_part();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1673;
				slice_name_part();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1674;
				attribute_name_part();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Selected_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(vhdlParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(vhdlParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SuffixContext[] suffix() {
			return GetRuleContexts<SuffixContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SuffixContext suffix(int i) {
			return GetRuleContext<SuffixContext>(i);
		}
		public Selected_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selected_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterSelected_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitSelected_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelected_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Selected_nameContext selected_name() {
		Selected_nameContext _localctx = new Selected_nameContext(Context, State);
		EnterRule(_localctx, 296, RULE_selected_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1677;
			identifier();
			State = 1682;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DOT) {
				{
				{
				State = 1678;
				Match(DOT);
				State = 1679;
				suffix();
				}
				}
				State = 1684;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Selected_name_partContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(vhdlParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(vhdlParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SuffixContext[] suffix() {
			return GetRuleContexts<SuffixContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SuffixContext suffix(int i) {
			return GetRuleContext<SuffixContext>(i);
		}
		public Selected_name_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selected_name_part; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterSelected_name_part(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitSelected_name_part(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelected_name_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Selected_name_partContext selected_name_part() {
		Selected_name_partContext _localctx = new Selected_name_partContext(Context, State);
		EnterRule(_localctx, 298, RULE_selected_name_part);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1687;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1685;
					Match(DOT);
					State = 1686;
					suffix();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1689;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,172,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_call_or_indexed_name_partContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(vhdlParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Actual_parameter_partContext actual_parameter_part() {
			return GetRuleContext<Actual_parameter_partContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(vhdlParser.RPAREN, 0); }
		public Function_call_or_indexed_name_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_call_or_indexed_name_part; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterFunction_call_or_indexed_name_part(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitFunction_call_or_indexed_name_part(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_call_or_indexed_name_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_call_or_indexed_name_partContext function_call_or_indexed_name_part() {
		Function_call_or_indexed_name_partContext _localctx = new Function_call_or_indexed_name_partContext(Context, State);
		EnterRule(_localctx, 300, RULE_function_call_or_indexed_name_part);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1691;
			Match(LPAREN);
			State = 1692;
			actual_parameter_part();
			State = 1693;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Slice_name_partContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(vhdlParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Discrete_rangeContext discrete_range() {
			return GetRuleContext<Discrete_rangeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(vhdlParser.RPAREN, 0); }
		public Slice_name_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_slice_name_part; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterSlice_name_part(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitSlice_name_part(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSlice_name_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Slice_name_partContext slice_name_part() {
		Slice_name_partContext _localctx = new Slice_name_partContext(Context, State);
		EnterRule(_localctx, 302, RULE_slice_name_part);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1695;
			Match(LPAREN);
			State = 1696;
			discrete_range();
			State = 1697;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attribute_name_partContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode APOSTROPHE() { return GetToken(vhdlParser.APOSTROPHE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Attribute_designatorContext attribute_designator() {
			return GetRuleContext<Attribute_designatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SignatureContext signature() {
			return GetRuleContext<SignatureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(vhdlParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(vhdlParser.RPAREN, 0); }
		public Attribute_name_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute_name_part; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterAttribute_name_part(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitAttribute_name_part(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute_name_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Attribute_name_partContext attribute_name_part() {
		Attribute_name_partContext _localctx = new Attribute_name_partContext(Context, State);
		EnterRule(_localctx, 304, RULE_attribute_name_part);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1700;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LBRACKET) {
				{
				State = 1699;
				signature();
				}
			}

			State = 1702;
			Match(APOSTROPHE);
			State = 1703;
			attribute_designator();
			State = 1708;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,174,Context) ) {
			case 1:
				{
				State = 1704;
				Match(LPAREN);
				State = 1705;
				expression();
				State = 1706;
				Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Nature_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NATURE() { return GetToken(vhdlParser.NATURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(vhdlParser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Nature_definitionContext nature_definition() {
			return GetRuleContext<Nature_definitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(vhdlParser.SEMI, 0); }
		public Nature_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nature_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterNature_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitNature_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNature_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Nature_declarationContext nature_declaration() {
		Nature_declarationContext _localctx = new Nature_declarationContext(Context, State);
		EnterRule(_localctx, 306, RULE_nature_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1710;
			Match(NATURE);
			State = 1711;
			identifier();
			State = 1712;
			Match(IS);
			State = 1713;
			nature_definition();
			State = 1714;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Nature_definitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Scalar_nature_definitionContext scalar_nature_definition() {
			return GetRuleContext<Scalar_nature_definitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Composite_nature_definitionContext composite_nature_definition() {
			return GetRuleContext<Composite_nature_definitionContext>(0);
		}
		public Nature_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nature_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterNature_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitNature_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNature_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Nature_definitionContext nature_definition() {
		Nature_definitionContext _localctx = new Nature_definitionContext(Context, State);
		EnterRule(_localctx, 308, RULE_nature_definition);
		try {
			State = 1718;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BASIC_IDENTIFIER:
			case EXTENDED_IDENTIFIER:
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1716;
				scalar_nature_definition();
				}
				break;
			case ARRAY:
			case RECORD:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1717;
				composite_nature_definition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Nature_element_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Identifier_listContext identifier_list() {
			return GetRuleContext<Identifier_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(vhdlParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Element_subnature_definitionContext element_subnature_definition() {
			return GetRuleContext<Element_subnature_definitionContext>(0);
		}
		public Nature_element_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nature_element_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterNature_element_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitNature_element_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNature_element_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Nature_element_declarationContext nature_element_declaration() {
		Nature_element_declarationContext _localctx = new Nature_element_declarationContext(Context, State);
		EnterRule(_localctx, 310, RULE_nature_element_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1720;
			identifier_list();
			State = 1721;
			Match(COLON);
			State = 1722;
			element_subnature_definition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Next_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEXT() { return GetToken(vhdlParser.NEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(vhdlParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Label_colonContext label_colon() {
			return GetRuleContext<Label_colonContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHEN() { return GetToken(vhdlParser.WHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public Next_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_next_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterNext_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitNext_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNext_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Next_statementContext next_statement() {
		Next_statementContext _localctx = new Next_statementContext(Context, State);
		EnterRule(_localctx, 312, RULE_next_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1725;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BASIC_IDENTIFIER || _la==EXTENDED_IDENTIFIER) {
				{
				State = 1724;
				label_colon();
				}
			}

			State = 1727;
			Match(NEXT);
			State = 1729;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BASIC_IDENTIFIER || _la==EXTENDED_IDENTIFIER) {
				{
				State = 1728;
				identifier();
				}
			}

			State = 1733;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHEN) {
				{
				State = 1731;
				Match(WHEN);
				State = 1732;
				condition();
				}
			}

			State = 1735;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Numeric_literalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Abstract_literalContext abstract_literal() {
			return GetRuleContext<Abstract_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Physical_literalContext physical_literal() {
			return GetRuleContext<Physical_literalContext>(0);
		}
		public Numeric_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numeric_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterNumeric_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitNumeric_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumeric_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Numeric_literalContext numeric_literal() {
		Numeric_literalContext _localctx = new Numeric_literalContext(Context, State);
		EnterRule(_localctx, 314, RULE_numeric_literal);
		try {
			State = 1739;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,179,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1737;
				abstract_literal();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1738;
				physical_literal();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Object_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Constant_declarationContext constant_declaration() {
			return GetRuleContext<Constant_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Signal_declarationContext signal_declaration() {
			return GetRuleContext<Signal_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variable_declarationContext variable_declaration() {
			return GetRuleContext<Variable_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public File_declarationContext file_declaration() {
			return GetRuleContext<File_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Terminal_declarationContext terminal_declaration() {
			return GetRuleContext<Terminal_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Quantity_declarationContext quantity_declaration() {
			return GetRuleContext<Quantity_declarationContext>(0);
		}
		public Object_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterObject_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitObject_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObject_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Object_declarationContext object_declaration() {
		Object_declarationContext _localctx = new Object_declarationContext(Context, State);
		EnterRule(_localctx, 316, RULE_object_declaration);
		try {
			State = 1747;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CONSTANT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1741;
				constant_declaration();
				}
				break;
			case SIGNAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1742;
				signal_declaration();
				}
				break;
			case SHARED:
			case VARIABLE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1743;
				variable_declaration();
				}
				break;
			case FILE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1744;
				file_declaration();
				}
				break;
			case TERMINAL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1745;
				terminal_declaration();
				}
				break;
			case QUANTITY:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1746;
				quantity_declaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GUARDED() { return GetToken(vhdlParser.GUARDED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Delay_mechanismContext delay_mechanism() {
			return GetRuleContext<Delay_mechanismContext>(0);
		}
		public OptsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opts; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterOpts(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitOpts(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpts(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OptsContext opts() {
		OptsContext _localctx = new OptsContext(Context, State);
		EnterRule(_localctx, 318, RULE_opts);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1750;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==GUARDED) {
				{
				State = 1749;
				Match(GUARDED);
				}
			}

			State = 1753;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 39)) & ~0x3f) == 0 && ((1L << (_la - 39)) & ((1L << (INERTIAL - 39)) | (1L << (REJECT - 39)) | (1L << (TRANSPORT - 39)))) != 0)) {
				{
				State = 1752;
				delay_mechanism();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Package_bodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PACKAGE() { return GetTokens(vhdlParser.PACKAGE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PACKAGE(int i) {
			return GetToken(vhdlParser.PACKAGE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BODY() { return GetTokens(vhdlParser.BODY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BODY(int i) {
			return GetToken(vhdlParser.BODY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(vhdlParser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Package_body_declarative_partContext package_body_declarative_part() {
			return GetRuleContext<Package_body_declarative_partContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(vhdlParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(vhdlParser.SEMI, 0); }
		public Package_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_package_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterPackage_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitPackage_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPackage_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Package_bodyContext package_body() {
		Package_bodyContext _localctx = new Package_bodyContext(Context, State);
		EnterRule(_localctx, 320, RULE_package_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1755;
			Match(PACKAGE);
			State = 1756;
			Match(BODY);
			State = 1757;
			identifier();
			State = 1758;
			Match(IS);
			State = 1759;
			package_body_declarative_part();
			State = 1760;
			Match(END);
			State = 1763;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PACKAGE) {
				{
				State = 1761;
				Match(PACKAGE);
				State = 1762;
				Match(BODY);
				}
			}

			State = 1766;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BASIC_IDENTIFIER || _la==EXTENDED_IDENTIFIER) {
				{
				State = 1765;
				identifier();
				}
			}

			State = 1768;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Package_body_declarative_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Subprogram_declarationContext subprogram_declaration() {
			return GetRuleContext<Subprogram_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Subprogram_bodyContext subprogram_body() {
			return GetRuleContext<Subprogram_bodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_declarationContext type_declaration() {
			return GetRuleContext<Type_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Subtype_declarationContext subtype_declaration() {
			return GetRuleContext<Subtype_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Constant_declarationContext constant_declaration() {
			return GetRuleContext<Constant_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variable_declarationContext variable_declaration() {
			return GetRuleContext<Variable_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public File_declarationContext file_declaration() {
			return GetRuleContext<File_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alias_declarationContext alias_declaration() {
			return GetRuleContext<Alias_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Use_clauseContext use_clause() {
			return GetRuleContext<Use_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Group_template_declarationContext group_template_declaration() {
			return GetRuleContext<Group_template_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Group_declarationContext group_declaration() {
			return GetRuleContext<Group_declarationContext>(0);
		}
		public Package_body_declarative_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_package_body_declarative_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterPackage_body_declarative_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitPackage_body_declarative_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPackage_body_declarative_item(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Package_body_declarative_itemContext package_body_declarative_item() {
		Package_body_declarative_itemContext _localctx = new Package_body_declarative_itemContext(Context, State);
		EnterRule(_localctx, 322, RULE_package_body_declarative_item);
		try {
			State = 1781;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,185,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1770;
				subprogram_declaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1771;
				subprogram_body();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1772;
				type_declaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1773;
				subtype_declaration();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1774;
				constant_declaration();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1775;
				variable_declaration();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1776;
				file_declaration();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1777;
				alias_declaration();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1778;
				use_clause();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1779;
				group_template_declaration();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1780;
				group_declaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Package_body_declarative_partContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Package_body_declarative_itemContext[] package_body_declarative_item() {
			return GetRuleContexts<Package_body_declarative_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Package_body_declarative_itemContext package_body_declarative_item(int i) {
			return GetRuleContext<Package_body_declarative_itemContext>(i);
		}
		public Package_body_declarative_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_package_body_declarative_part; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterPackage_body_declarative_part(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitPackage_body_declarative_part(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPackage_body_declarative_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Package_body_declarative_partContext package_body_declarative_part() {
		Package_body_declarative_partContext _localctx = new Package_body_declarative_partContext(Context, State);
		EnterRule(_localctx, 324, RULE_package_body_declarative_part);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1786;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALIAS) | (1L << CONSTANT) | (1L << FILE) | (1L << FUNCTION) | (1L << GROUP) | (1L << IMPURE))) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (PROCEDURE - 68)) | (1L << (PURE - 68)) | (1L << (SHARED - 68)) | (1L << (SUBTYPE - 68)) | (1L << (TYPE - 68)) | (1L << (USE - 68)) | (1L << (VARIABLE - 68)))) != 0)) {
				{
				{
				State = 1783;
				package_body_declarative_item();
				}
				}
				State = 1788;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Package_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PACKAGE() { return GetTokens(vhdlParser.PACKAGE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PACKAGE(int i) {
			return GetToken(vhdlParser.PACKAGE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(vhdlParser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Package_declarative_partContext package_declarative_part() {
			return GetRuleContext<Package_declarative_partContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(vhdlParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(vhdlParser.SEMI, 0); }
		public Package_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_package_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterPackage_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitPackage_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPackage_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Package_declarationContext package_declaration() {
		Package_declarationContext _localctx = new Package_declarationContext(Context, State);
		EnterRule(_localctx, 326, RULE_package_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1789;
			Match(PACKAGE);
			State = 1790;
			identifier();
			State = 1791;
			Match(IS);
			State = 1792;
			package_declarative_part();
			State = 1793;
			Match(END);
			State = 1795;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PACKAGE) {
				{
				State = 1794;
				Match(PACKAGE);
				}
			}

			State = 1798;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BASIC_IDENTIFIER || _la==EXTENDED_IDENTIFIER) {
				{
				State = 1797;
				identifier();
				}
			}

			State = 1800;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Package_declarative_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Subprogram_declarationContext subprogram_declaration() {
			return GetRuleContext<Subprogram_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Subprogram_bodyContext subprogram_body() {
			return GetRuleContext<Subprogram_bodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_declarationContext type_declaration() {
			return GetRuleContext<Type_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Subtype_declarationContext subtype_declaration() {
			return GetRuleContext<Subtype_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Constant_declarationContext constant_declaration() {
			return GetRuleContext<Constant_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Signal_declarationContext signal_declaration() {
			return GetRuleContext<Signal_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variable_declarationContext variable_declaration() {
			return GetRuleContext<Variable_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public File_declarationContext file_declaration() {
			return GetRuleContext<File_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alias_declarationContext alias_declaration() {
			return GetRuleContext<Alias_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Component_declarationContext component_declaration() {
			return GetRuleContext<Component_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Attribute_declarationContext attribute_declaration() {
			return GetRuleContext<Attribute_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Attribute_specificationContext attribute_specification() {
			return GetRuleContext<Attribute_specificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Disconnection_specificationContext disconnection_specification() {
			return GetRuleContext<Disconnection_specificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Use_clauseContext use_clause() {
			return GetRuleContext<Use_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Group_template_declarationContext group_template_declaration() {
			return GetRuleContext<Group_template_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Group_declarationContext group_declaration() {
			return GetRuleContext<Group_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Nature_declarationContext nature_declaration() {
			return GetRuleContext<Nature_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Subnature_declarationContext subnature_declaration() {
			return GetRuleContext<Subnature_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Terminal_declarationContext terminal_declaration() {
			return GetRuleContext<Terminal_declarationContext>(0);
		}
		public Package_declarative_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_package_declarative_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterPackage_declarative_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitPackage_declarative_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPackage_declarative_item(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Package_declarative_itemContext package_declarative_item() {
		Package_declarative_itemContext _localctx = new Package_declarative_itemContext(Context, State);
		EnterRule(_localctx, 328, RULE_package_declarative_item);
		try {
			State = 1821;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,189,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1802;
				subprogram_declaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1803;
				subprogram_body();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1804;
				type_declaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1805;
				subtype_declaration();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1806;
				constant_declaration();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1807;
				signal_declaration();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1808;
				variable_declaration();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1809;
				file_declaration();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1810;
				alias_declaration();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1811;
				component_declaration();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1812;
				attribute_declaration();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1813;
				attribute_specification();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 1814;
				disconnection_specification();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 1815;
				use_clause();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 1816;
				group_template_declaration();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 1817;
				group_declaration();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 1818;
				nature_declaration();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 1819;
				subnature_declaration();
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 1820;
				terminal_declaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Package_declarative_partContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Package_declarative_itemContext[] package_declarative_item() {
			return GetRuleContexts<Package_declarative_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Package_declarative_itemContext package_declarative_item(int i) {
			return GetRuleContext<Package_declarative_itemContext>(i);
		}
		public Package_declarative_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_package_declarative_part; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterPackage_declarative_part(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitPackage_declarative_part(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPackage_declarative_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Package_declarative_partContext package_declarative_part() {
		Package_declarative_partContext _localctx = new Package_declarative_partContext(Context, State);
		EnterRule(_localctx, 330, RULE_package_declarative_part);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1826;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALIAS) | (1L << ATTRIBUTE) | (1L << COMPONENT) | (1L << CONSTANT) | (1L << DISCONNECT) | (1L << FILE) | (1L << FUNCTION) | (1L << GROUP) | (1L << IMPURE) | (1L << NATURE))) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (PROCEDURE - 68)) | (1L << (PURE - 68)) | (1L << (SHARED - 68)) | (1L << (SIGNAL - 68)) | (1L << (SUBNATURE - 68)) | (1L << (SUBTYPE - 68)) | (1L << (TERMINAL - 68)) | (1L << (TYPE - 68)) | (1L << (USE - 68)) | (1L << (VARIABLE - 68)))) != 0)) {
				{
				{
				State = 1823;
				package_declarative_item();
				}
				}
				State = 1828;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parameter_specificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(vhdlParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Discrete_rangeContext discrete_range() {
			return GetRuleContext<Discrete_rangeContext>(0);
		}
		public Parameter_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter_specification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterParameter_specification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitParameter_specification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter_specification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Parameter_specificationContext parameter_specification() {
		Parameter_specificationContext _localctx = new Parameter_specificationContext(Context, State);
		EnterRule(_localctx, 332, RULE_parameter_specification);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1829;
			identifier();
			State = 1830;
			Match(IN);
			State = 1831;
			discrete_range();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Physical_literalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Abstract_literalContext abstract_literal() {
			return GetRuleContext<Abstract_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Physical_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_physical_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterPhysical_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitPhysical_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPhysical_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Physical_literalContext physical_literal() {
		Physical_literalContext _localctx = new Physical_literalContext(Context, State);
		EnterRule(_localctx, 334, RULE_physical_literal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1833;
			abstract_literal();
			{
			State = 1834;
			identifier();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Physical_type_definitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Range_constraintContext range_constraint() {
			return GetRuleContext<Range_constraintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] UNITS() { return GetTokens(vhdlParser.UNITS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNITS(int i) {
			return GetToken(vhdlParser.UNITS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Base_unit_declarationContext base_unit_declaration() {
			return GetRuleContext<Base_unit_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(vhdlParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Secondary_unit_declarationContext[] secondary_unit_declaration() {
			return GetRuleContexts<Secondary_unit_declarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Secondary_unit_declarationContext secondary_unit_declaration(int i) {
			return GetRuleContext<Secondary_unit_declarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Physical_type_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_physical_type_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterPhysical_type_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitPhysical_type_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPhysical_type_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Physical_type_definitionContext physical_type_definition() {
		Physical_type_definitionContext _localctx = new Physical_type_definitionContext(Context, State);
		EnterRule(_localctx, 336, RULE_physical_type_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1836;
			range_constraint();
			State = 1837;
			Match(UNITS);
			State = 1838;
			base_unit_declaration();
			State = 1842;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==BASIC_IDENTIFIER || _la==EXTENDED_IDENTIFIER) {
				{
				{
				State = 1839;
				secondary_unit_declaration();
				}
				}
				State = 1844;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1845;
			Match(END);
			State = 1846;
			Match(UNITS);
			State = 1848;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BASIC_IDENTIFIER || _la==EXTENDED_IDENTIFIER) {
				{
				State = 1847;
				identifier();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Port_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PORT() { return GetToken(vhdlParser.PORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(vhdlParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Port_listContext port_list() {
			return GetRuleContext<Port_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(vhdlParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(vhdlParser.SEMI, 0); }
		public Port_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_port_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterPort_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitPort_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPort_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Port_clauseContext port_clause() {
		Port_clauseContext _localctx = new Port_clauseContext(Context, State);
		EnterRule(_localctx, 338, RULE_port_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1850;
			Match(PORT);
			State = 1851;
			Match(LPAREN);
			State = 1852;
			port_list();
			State = 1853;
			Match(RPAREN);
			State = 1854;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Port_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Interface_port_listContext interface_port_list() {
			return GetRuleContext<Interface_port_listContext>(0);
		}
		public Port_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_port_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterPort_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitPort_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPort_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Port_listContext port_list() {
		Port_listContext _localctx = new Port_listContext(Context, State);
		EnterRule(_localctx, 340, RULE_port_list);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1856;
			interface_port_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Port_map_aspectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PORT() { return GetToken(vhdlParser.PORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAP() { return GetToken(vhdlParser.MAP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(vhdlParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Association_listContext association_list() {
			return GetRuleContext<Association_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(vhdlParser.RPAREN, 0); }
		public Port_map_aspectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_port_map_aspect; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterPort_map_aspect(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitPort_map_aspect(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPort_map_aspect(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Port_map_aspectContext port_map_aspect() {
		Port_map_aspectContext _localctx = new Port_map_aspectContext(Context, State);
		EnterRule(_localctx, 342, RULE_port_map_aspect);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1858;
			Match(PORT);
			State = 1859;
			Match(MAP);
			State = 1860;
			Match(LPAREN);
			State = 1861;
			association_list();
			State = 1862;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Qualified_expressionContext qualified_expression() {
			return GetRuleContext<Qualified_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(vhdlParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(vhdlParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AllocatorContext allocator() {
			return GetRuleContext<AllocatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AggregateContext aggregate() {
			return GetRuleContext<AggregateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public PrimaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterPrimary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitPrimary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryContext primary() {
		PrimaryContext _localctx = new PrimaryContext(Context, State);
		EnterRule(_localctx, 344, RULE_primary);
		try {
			State = 1873;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,193,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1864;
				literal();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1865;
				qualified_expression();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1866;
				Match(LPAREN);
				State = 1867;
				expression();
				State = 1868;
				Match(RPAREN);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1870;
				allocator();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1871;
				aggregate();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1872;
				name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Primary_unitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Entity_declarationContext entity_declaration() {
			return GetRuleContext<Entity_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Configuration_declarationContext configuration_declaration() {
			return GetRuleContext<Configuration_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Package_declarationContext package_declaration() {
			return GetRuleContext<Package_declarationContext>(0);
		}
		public Primary_unitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary_unit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterPrimary_unit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitPrimary_unit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimary_unit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Primary_unitContext primary_unit() {
		Primary_unitContext _localctx = new Primary_unitContext(Context, State);
		EnterRule(_localctx, 346, RULE_primary_unit);
		try {
			State = 1878;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ENTITY:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1875;
				entity_declaration();
				}
				break;
			case CONFIGURATION:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1876;
				configuration_declaration();
				}
				break;
			case PACKAGE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1877;
				package_declaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Procedural_declarative_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Subprogram_declarationContext subprogram_declaration() {
			return GetRuleContext<Subprogram_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Subprogram_bodyContext subprogram_body() {
			return GetRuleContext<Subprogram_bodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_declarationContext type_declaration() {
			return GetRuleContext<Type_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Subtype_declarationContext subtype_declaration() {
			return GetRuleContext<Subtype_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Constant_declarationContext constant_declaration() {
			return GetRuleContext<Constant_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variable_declarationContext variable_declaration() {
			return GetRuleContext<Variable_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alias_declarationContext alias_declaration() {
			return GetRuleContext<Alias_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Attribute_declarationContext attribute_declaration() {
			return GetRuleContext<Attribute_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Attribute_specificationContext attribute_specification() {
			return GetRuleContext<Attribute_specificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Use_clauseContext use_clause() {
			return GetRuleContext<Use_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Group_template_declarationContext group_template_declaration() {
			return GetRuleContext<Group_template_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Group_declarationContext group_declaration() {
			return GetRuleContext<Group_declarationContext>(0);
		}
		public Procedural_declarative_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedural_declarative_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterProcedural_declarative_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitProcedural_declarative_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedural_declarative_item(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Procedural_declarative_itemContext procedural_declarative_item() {
		Procedural_declarative_itemContext _localctx = new Procedural_declarative_itemContext(Context, State);
		EnterRule(_localctx, 348, RULE_procedural_declarative_item);
		try {
			State = 1892;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,195,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1880;
				subprogram_declaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1881;
				subprogram_body();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1882;
				type_declaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1883;
				subtype_declaration();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1884;
				constant_declaration();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1885;
				variable_declaration();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1886;
				alias_declaration();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1887;
				attribute_declaration();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1888;
				attribute_specification();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1889;
				use_clause();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1890;
				group_template_declaration();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1891;
				group_declaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Procedural_declarative_partContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Procedural_declarative_itemContext[] procedural_declarative_item() {
			return GetRuleContexts<Procedural_declarative_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Procedural_declarative_itemContext procedural_declarative_item(int i) {
			return GetRuleContext<Procedural_declarative_itemContext>(i);
		}
		public Procedural_declarative_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedural_declarative_part; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterProcedural_declarative_part(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitProcedural_declarative_part(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedural_declarative_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Procedural_declarative_partContext procedural_declarative_part() {
		Procedural_declarative_partContext _localctx = new Procedural_declarative_partContext(Context, State);
		EnterRule(_localctx, 350, RULE_procedural_declarative_part);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1897;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALIAS) | (1L << ATTRIBUTE) | (1L << CONSTANT) | (1L << FUNCTION) | (1L << GROUP) | (1L << IMPURE))) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (PROCEDURE - 68)) | (1L << (PURE - 68)) | (1L << (SHARED - 68)) | (1L << (SUBTYPE - 68)) | (1L << (TYPE - 68)) | (1L << (USE - 68)) | (1L << (VARIABLE - 68)))) != 0)) {
				{
				{
				State = 1894;
				procedural_declarative_item();
				}
				}
				State = 1899;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Procedural_statement_partContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Sequential_statementContext[] sequential_statement() {
			return GetRuleContexts<Sequential_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sequential_statementContext sequential_statement(int i) {
			return GetRuleContext<Sequential_statementContext>(i);
		}
		public Procedural_statement_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedural_statement_part; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterProcedural_statement_part(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitProcedural_statement_part(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedural_statement_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Procedural_statement_partContext procedural_statement_part() {
		Procedural_statement_partContext _localctx = new Procedural_statement_partContext(Context, State);
		EnterRule(_localctx, 352, RULE_procedural_statement_part);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1903;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ASSERT) | (1L << BREAK) | (1L << CASE) | (1L << EXIT) | (1L << FOR) | (1L << IF) | (1L << LOOP) | (1L << NEXT) | (1L << NULL_))) != 0) || ((((_la - 79)) & ~0x3f) == 0 && ((1L << (_la - 79)) & ((1L << (REPORT - 79)) | (1L << (RETURN - 79)) | (1L << (WAIT - 79)) | (1L << (WHILE - 79)) | (1L << (BASIC_IDENTIFIER - 79)) | (1L << (EXTENDED_IDENTIFIER - 79)) | (1L << (STRING_LITERAL - 79)) | (1L << (LPAREN - 79)))) != 0)) {
				{
				{
				State = 1900;
				sequential_statement();
				}
				}
				State = 1905;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Procedure_callContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Selected_nameContext selected_name() {
			return GetRuleContext<Selected_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(vhdlParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Actual_parameter_partContext actual_parameter_part() {
			return GetRuleContext<Actual_parameter_partContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(vhdlParser.RPAREN, 0); }
		public Procedure_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedure_call; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterProcedure_call(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitProcedure_call(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedure_call(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Procedure_callContext procedure_call() {
		Procedure_callContext _localctx = new Procedure_callContext(Context, State);
		EnterRule(_localctx, 354, RULE_procedure_call);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1906;
			selected_name();
			State = 1911;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAREN) {
				{
				State = 1907;
				Match(LPAREN);
				State = 1908;
				actual_parameter_part();
				State = 1909;
				Match(RPAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Procedure_call_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Procedure_callContext procedure_call() {
			return GetRuleContext<Procedure_callContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(vhdlParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Label_colonContext label_colon() {
			return GetRuleContext<Label_colonContext>(0);
		}
		public Procedure_call_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedure_call_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterProcedure_call_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitProcedure_call_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedure_call_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Procedure_call_statementContext procedure_call_statement() {
		Procedure_call_statementContext _localctx = new Procedure_call_statementContext(Context, State);
		EnterRule(_localctx, 356, RULE_procedure_call_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1914;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,199,Context) ) {
			case 1:
				{
				State = 1913;
				label_colon();
				}
				break;
			}
			State = 1916;
			procedure_call();
			State = 1917;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Process_declarative_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Subprogram_declarationContext subprogram_declaration() {
			return GetRuleContext<Subprogram_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Subprogram_bodyContext subprogram_body() {
			return GetRuleContext<Subprogram_bodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_declarationContext type_declaration() {
			return GetRuleContext<Type_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Subtype_declarationContext subtype_declaration() {
			return GetRuleContext<Subtype_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Constant_declarationContext constant_declaration() {
			return GetRuleContext<Constant_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variable_declarationContext variable_declaration() {
			return GetRuleContext<Variable_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public File_declarationContext file_declaration() {
			return GetRuleContext<File_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alias_declarationContext alias_declaration() {
			return GetRuleContext<Alias_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Attribute_declarationContext attribute_declaration() {
			return GetRuleContext<Attribute_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Attribute_specificationContext attribute_specification() {
			return GetRuleContext<Attribute_specificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Use_clauseContext use_clause() {
			return GetRuleContext<Use_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Group_template_declarationContext group_template_declaration() {
			return GetRuleContext<Group_template_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Group_declarationContext group_declaration() {
			return GetRuleContext<Group_declarationContext>(0);
		}
		public Process_declarative_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_process_declarative_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterProcess_declarative_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitProcess_declarative_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcess_declarative_item(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Process_declarative_itemContext process_declarative_item() {
		Process_declarative_itemContext _localctx = new Process_declarative_itemContext(Context, State);
		EnterRule(_localctx, 358, RULE_process_declarative_item);
		try {
			State = 1932;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,200,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1919;
				subprogram_declaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1920;
				subprogram_body();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1921;
				type_declaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1922;
				subtype_declaration();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1923;
				constant_declaration();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1924;
				variable_declaration();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1925;
				file_declaration();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1926;
				alias_declaration();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1927;
				attribute_declaration();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1928;
				attribute_specification();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1929;
				use_clause();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1930;
				group_template_declaration();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 1931;
				group_declaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Process_declarative_partContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Process_declarative_itemContext[] process_declarative_item() {
			return GetRuleContexts<Process_declarative_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Process_declarative_itemContext process_declarative_item(int i) {
			return GetRuleContext<Process_declarative_itemContext>(i);
		}
		public Process_declarative_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_process_declarative_part; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterProcess_declarative_part(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitProcess_declarative_part(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcess_declarative_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Process_declarative_partContext process_declarative_part() {
		Process_declarative_partContext _localctx = new Process_declarative_partContext(Context, State);
		EnterRule(_localctx, 360, RULE_process_declarative_part);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1937;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALIAS) | (1L << ATTRIBUTE) | (1L << CONSTANT) | (1L << FILE) | (1L << FUNCTION) | (1L << GROUP) | (1L << IMPURE))) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (PROCEDURE - 68)) | (1L << (PURE - 68)) | (1L << (SHARED - 68)) | (1L << (SUBTYPE - 68)) | (1L << (TYPE - 68)) | (1L << (USE - 68)) | (1L << (VARIABLE - 68)))) != 0)) {
				{
				{
				State = 1934;
				process_declarative_item();
				}
				}
				State = 1939;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Process_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PROCESS() { return GetTokens(vhdlParser.PROCESS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCESS(int i) {
			return GetToken(vhdlParser.PROCESS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Process_declarative_partContext process_declarative_part() {
			return GetRuleContext<Process_declarative_partContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN() { return GetToken(vhdlParser.BEGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Process_statement_partContext process_statement_part() {
			return GetRuleContext<Process_statement_partContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(vhdlParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(vhdlParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Label_colonContext label_colon() {
			return GetRuleContext<Label_colonContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] POSTPONED() { return GetTokens(vhdlParser.POSTPONED); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POSTPONED(int i) {
			return GetToken(vhdlParser.POSTPONED, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(vhdlParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sensitivity_listContext sensitivity_list() {
			return GetRuleContext<Sensitivity_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(vhdlParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(vhdlParser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Process_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_process_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterProcess_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitProcess_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcess_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Process_statementContext process_statement() {
		Process_statementContext _localctx = new Process_statementContext(Context, State);
		EnterRule(_localctx, 362, RULE_process_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1941;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BASIC_IDENTIFIER || _la==EXTENDED_IDENTIFIER) {
				{
				State = 1940;
				label_colon();
				}
			}

			State = 1944;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==POSTPONED) {
				{
				State = 1943;
				Match(POSTPONED);
				}
			}

			State = 1946;
			Match(PROCESS);
			State = 1951;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAREN) {
				{
				State = 1947;
				Match(LPAREN);
				State = 1948;
				sensitivity_list();
				State = 1949;
				Match(RPAREN);
				}
			}

			State = 1954;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IS) {
				{
				State = 1953;
				Match(IS);
				}
			}

			State = 1956;
			process_declarative_part();
			State = 1957;
			Match(BEGIN);
			State = 1958;
			process_statement_part();
			State = 1959;
			Match(END);
			State = 1961;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==POSTPONED) {
				{
				State = 1960;
				Match(POSTPONED);
				}
			}

			State = 1963;
			Match(PROCESS);
			State = 1965;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BASIC_IDENTIFIER || _la==EXTENDED_IDENTIFIER) {
				{
				State = 1964;
				identifier();
				}
			}

			State = 1967;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Process_statement_partContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Sequential_statementContext[] sequential_statement() {
			return GetRuleContexts<Sequential_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sequential_statementContext sequential_statement(int i) {
			return GetRuleContext<Sequential_statementContext>(i);
		}
		public Process_statement_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_process_statement_part; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterProcess_statement_part(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitProcess_statement_part(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcess_statement_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Process_statement_partContext process_statement_part() {
		Process_statement_partContext _localctx = new Process_statement_partContext(Context, State);
		EnterRule(_localctx, 364, RULE_process_statement_part);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1972;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ASSERT) | (1L << BREAK) | (1L << CASE) | (1L << EXIT) | (1L << FOR) | (1L << IF) | (1L << LOOP) | (1L << NEXT) | (1L << NULL_))) != 0) || ((((_la - 79)) & ~0x3f) == 0 && ((1L << (_la - 79)) & ((1L << (REPORT - 79)) | (1L << (RETURN - 79)) | (1L << (WAIT - 79)) | (1L << (WHILE - 79)) | (1L << (BASIC_IDENTIFIER - 79)) | (1L << (EXTENDED_IDENTIFIER - 79)) | (1L << (STRING_LITERAL - 79)) | (1L << (LPAREN - 79)))) != 0)) {
				{
				{
				State = 1969;
				sequential_statement();
				}
				}
				State = 1974;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Qualified_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Subtype_indicationContext subtype_indication() {
			return GetRuleContext<Subtype_indicationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode APOSTROPHE() { return GetToken(vhdlParser.APOSTROPHE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AggregateContext aggregate() {
			return GetRuleContext<AggregateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(vhdlParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(vhdlParser.RPAREN, 0); }
		public Qualified_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualified_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterQualified_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitQualified_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualified_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Qualified_expressionContext qualified_expression() {
		Qualified_expressionContext _localctx = new Qualified_expressionContext(Context, State);
		EnterRule(_localctx, 366, RULE_qualified_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1975;
			subtype_indication();
			State = 1976;
			Match(APOSTROPHE);
			State = 1982;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,209,Context) ) {
			case 1:
				{
				State = 1977;
				aggregate();
				}
				break;
			case 2:
				{
				State = 1978;
				Match(LPAREN);
				State = 1979;
				expression();
				State = 1980;
				Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Quantity_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Free_quantity_declarationContext free_quantity_declaration() {
			return GetRuleContext<Free_quantity_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Branch_quantity_declarationContext branch_quantity_declaration() {
			return GetRuleContext<Branch_quantity_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Source_quantity_declarationContext source_quantity_declaration() {
			return GetRuleContext<Source_quantity_declarationContext>(0);
		}
		public Quantity_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_quantity_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterQuantity_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitQuantity_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuantity_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Quantity_declarationContext quantity_declaration() {
		Quantity_declarationContext _localctx = new Quantity_declarationContext(Context, State);
		EnterRule(_localctx, 368, RULE_quantity_declaration);
		try {
			State = 1987;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,210,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1984;
				free_quantity_declaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1985;
				branch_quantity_declaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1986;
				source_quantity_declaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Quantity_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext[] name() {
			return GetRuleContexts<NameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name(int i) {
			return GetRuleContext<NameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(vhdlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(vhdlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OTHERS() { return GetToken(vhdlParser.OTHERS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(vhdlParser.ALL, 0); }
		public Quantity_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_quantity_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterQuantity_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitQuantity_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuantity_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Quantity_listContext quantity_list() {
		Quantity_listContext _localctx = new Quantity_listContext(Context, State);
		EnterRule(_localctx, 370, RULE_quantity_list);
		int _la;
		try {
			State = 1999;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BASIC_IDENTIFIER:
			case EXTENDED_IDENTIFIER:
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1989;
				name();
				State = 1994;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1990;
					Match(COMMA);
					State = 1991;
					name();
					}
					}
					State = 1996;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case OTHERS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1997;
				Match(OTHERS);
				}
				break;
			case ALL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1998;
				Match(ALL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Quantity_specificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Quantity_listContext quantity_list() {
			return GetRuleContext<Quantity_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(vhdlParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Quantity_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_quantity_specification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterQuantity_specification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitQuantity_specification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuantity_specification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Quantity_specificationContext quantity_specification() {
		Quantity_specificationContext _localctx = new Quantity_specificationContext(Context, State);
		EnterRule(_localctx, 372, RULE_quantity_specification);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2001;
			quantity_list();
			State = 2002;
			Match(COLON);
			State = 2003;
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Range_declContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Explicit_rangeContext explicit_range() {
			return GetRuleContext<Explicit_rangeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public Range_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_range_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterRange_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitRange_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRange_decl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Range_declContext range_decl() {
		Range_declContext _localctx = new Range_declContext(Context, State);
		EnterRule(_localctx, 374, RULE_range_decl);
		try {
			State = 2007;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,213,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2005;
				explicit_range();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2006;
				name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Explicit_rangeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Simple_expressionContext[] simple_expression() {
			return GetRuleContexts<Simple_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Simple_expressionContext simple_expression(int i) {
			return GetRuleContext<Simple_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DirectionContext direction() {
			return GetRuleContext<DirectionContext>(0);
		}
		public Explicit_rangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicit_range; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterExplicit_range(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitExplicit_range(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplicit_range(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Explicit_rangeContext explicit_range() {
		Explicit_rangeContext _localctx = new Explicit_rangeContext(Context, State);
		EnterRule(_localctx, 376, RULE_explicit_range);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2009;
			simple_expression();
			State = 2013;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,214,Context) ) {
			case 1:
				{
				State = 2010;
				direction();
				State = 2011;
				simple_expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Range_constraintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANGE() { return GetToken(vhdlParser.RANGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Range_declContext range_decl() {
			return GetRuleContext<Range_declContext>(0);
		}
		public Range_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_range_constraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterRange_constraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitRange_constraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRange_constraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Range_constraintContext range_constraint() {
		Range_constraintContext _localctx = new Range_constraintContext(Context, State);
		EnterRule(_localctx, 378, RULE_range_constraint);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2015;
			Match(RANGE);
			State = 2016;
			range_decl();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Record_nature_definitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RECORD() { return GetTokens(vhdlParser.RECORD); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECORD(int i) {
			return GetToken(vhdlParser.RECORD, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(vhdlParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Nature_element_declarationContext[] nature_element_declaration() {
			return GetRuleContexts<Nature_element_declarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Nature_element_declarationContext nature_element_declaration(int i) {
			return GetRuleContext<Nature_element_declarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Record_nature_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_record_nature_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterRecord_nature_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitRecord_nature_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRecord_nature_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Record_nature_definitionContext record_nature_definition() {
		Record_nature_definitionContext _localctx = new Record_nature_definitionContext(Context, State);
		EnterRule(_localctx, 380, RULE_record_nature_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2018;
			Match(RECORD);
			State = 2020;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 2019;
				nature_element_declaration();
				}
				}
				State = 2022;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==BASIC_IDENTIFIER || _la==EXTENDED_IDENTIFIER );
			State = 2024;
			Match(END);
			State = 2025;
			Match(RECORD);
			State = 2027;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BASIC_IDENTIFIER || _la==EXTENDED_IDENTIFIER) {
				{
				State = 2026;
				identifier();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Record_type_definitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RECORD() { return GetTokens(vhdlParser.RECORD); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECORD(int i) {
			return GetToken(vhdlParser.RECORD, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(vhdlParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Element_declarationContext[] element_declaration() {
			return GetRuleContexts<Element_declarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Element_declarationContext element_declaration(int i) {
			return GetRuleContext<Element_declarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Record_type_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_record_type_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterRecord_type_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitRecord_type_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRecord_type_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Record_type_definitionContext record_type_definition() {
		Record_type_definitionContext _localctx = new Record_type_definitionContext(Context, State);
		EnterRule(_localctx, 382, RULE_record_type_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2029;
			Match(RECORD);
			State = 2031;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 2030;
				element_declaration();
				}
				}
				State = 2033;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==BASIC_IDENTIFIER || _la==EXTENDED_IDENTIFIER );
			State = 2035;
			Match(END);
			State = 2036;
			Match(RECORD);
			State = 2038;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BASIC_IDENTIFIER || _la==EXTENDED_IDENTIFIER) {
				{
				State = 2037;
				identifier();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Shift_expressionContext[] shift_expression() {
			return GetRuleContexts<Shift_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Shift_expressionContext shift_expression(int i) {
			return GetRuleContext<Shift_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Relational_operatorContext relational_operator() {
			return GetRuleContext<Relational_operatorContext>(0);
		}
		public RelationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterRelation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitRelation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelationContext relation() {
		RelationContext _localctx = new RelationContext(Context, State);
		EnterRule(_localctx, 384, RULE_relation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2040;
			shift_expression();
			State = 2044;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,219,Context) ) {
			case 1:
				{
				State = 2041;
				relational_operator();
				State = 2042;
				shift_expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Relational_operatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(vhdlParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEQ() { return GetToken(vhdlParser.NEQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOWERTHAN() { return GetToken(vhdlParser.LOWERTHAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LE() { return GetToken(vhdlParser.LE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATERTHAN() { return GetToken(vhdlParser.GREATERTHAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GE() { return GetToken(vhdlParser.GE, 0); }
		public Relational_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relational_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterRelational_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitRelational_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelational_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Relational_operatorContext relational_operator() {
		Relational_operatorContext _localctx = new Relational_operatorContext(Context, State);
		EnterRule(_localctx, 386, RULE_relational_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2046;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (LE - 131)) | (1L << (GE - 131)) | (1L << (NEQ - 131)) | (1L << (LOWERTHAN - 131)) | (1L << (GREATERTHAN - 131)) | (1L << (EQ - 131)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Report_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPORT() { return GetToken(vhdlParser.REPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(vhdlParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Label_colonContext label_colon() {
			return GetRuleContext<Label_colonContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEVERITY() { return GetToken(vhdlParser.SEVERITY, 0); }
		public Report_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_report_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterReport_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitReport_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReport_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Report_statementContext report_statement() {
		Report_statementContext _localctx = new Report_statementContext(Context, State);
		EnterRule(_localctx, 388, RULE_report_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2049;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BASIC_IDENTIFIER || _la==EXTENDED_IDENTIFIER) {
				{
				State = 2048;
				label_colon();
				}
			}

			State = 2051;
			Match(REPORT);
			State = 2052;
			expression();
			State = 2055;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEVERITY) {
				{
				State = 2053;
				Match(SEVERITY);
				State = 2054;
				expression();
				}
			}

			State = 2057;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Return_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(vhdlParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(vhdlParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Label_colonContext label_colon() {
			return GetRuleContext<Label_colonContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Return_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterReturn_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitReturn_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturn_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Return_statementContext return_statement() {
		Return_statementContext _localctx = new Return_statementContext(Context, State);
		EnterRule(_localctx, 390, RULE_return_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2060;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BASIC_IDENTIFIER || _la==EXTENDED_IDENTIFIER) {
				{
				State = 2059;
				label_colon();
				}
			}

			State = 2062;
			Match(RETURN);
			State = 2064;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABS) | (1L << NEW) | (1L << NOT) | (1L << NULL_))) != 0) || ((((_la - 112)) & ~0x3f) == 0 && ((1L << (_la - 112)) & ((1L << (BASE_LITERAL - 112)) | (1L << (BIT_STRING_LITERAL - 112)) | (1L << (REAL_LITERAL - 112)) | (1L << (BASIC_IDENTIFIER - 112)) | (1L << (EXTENDED_IDENTIFIER - 112)) | (1L << (CHARACTER_LITERAL - 112)) | (1L << (STRING_LITERAL - 112)) | (1L << (LPAREN - 112)) | (1L << (PLUS - 112)) | (1L << (MINUS - 112)) | (1L << (INTEGER - 112)))) != 0)) {
				{
				State = 2063;
				expression();
				}
			}

			State = 2066;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Scalar_nature_definitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext[] name() {
			return GetRuleContexts<NameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name(int i) {
			return GetRuleContext<NameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACROSS() { return GetToken(vhdlParser.ACROSS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THROUGH() { return GetToken(vhdlParser.THROUGH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFERENCE() { return GetToken(vhdlParser.REFERENCE, 0); }
		public Scalar_nature_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scalar_nature_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterScalar_nature_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitScalar_nature_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScalar_nature_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Scalar_nature_definitionContext scalar_nature_definition() {
		Scalar_nature_definitionContext _localctx = new Scalar_nature_definitionContext(Context, State);
		EnterRule(_localctx, 392, RULE_scalar_nature_definition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2068;
			name();
			State = 2069;
			Match(ACROSS);
			State = 2070;
			name();
			State = 2071;
			Match(THROUGH);
			State = 2072;
			name();
			State = 2073;
			Match(REFERENCE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Scalar_type_definitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Physical_type_definitionContext physical_type_definition() {
			return GetRuleContext<Physical_type_definitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Enumeration_type_definitionContext enumeration_type_definition() {
			return GetRuleContext<Enumeration_type_definitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Range_constraintContext range_constraint() {
			return GetRuleContext<Range_constraintContext>(0);
		}
		public Scalar_type_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scalar_type_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterScalar_type_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitScalar_type_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScalar_type_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Scalar_type_definitionContext scalar_type_definition() {
		Scalar_type_definitionContext _localctx = new Scalar_type_definitionContext(Context, State);
		EnterRule(_localctx, 394, RULE_scalar_type_definition);
		try {
			State = 2078;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,224,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2075;
				physical_type_definition();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2076;
				enumeration_type_definition();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2077;
				range_constraint();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Secondary_unitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Architecture_bodyContext architecture_body() {
			return GetRuleContext<Architecture_bodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Package_bodyContext package_body() {
			return GetRuleContext<Package_bodyContext>(0);
		}
		public Secondary_unitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_secondary_unit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterSecondary_unit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitSecondary_unit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSecondary_unit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Secondary_unitContext secondary_unit() {
		Secondary_unitContext _localctx = new Secondary_unitContext(Context, State);
		EnterRule(_localctx, 396, RULE_secondary_unit);
		try {
			State = 2082;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ARCHITECTURE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2080;
				architecture_body();
				}
				break;
			case PACKAGE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2081;
				package_body();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Secondary_unit_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(vhdlParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Physical_literalContext physical_literal() {
			return GetRuleContext<Physical_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(vhdlParser.SEMI, 0); }
		public Secondary_unit_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_secondary_unit_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterSecondary_unit_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitSecondary_unit_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSecondary_unit_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Secondary_unit_declarationContext secondary_unit_declaration() {
		Secondary_unit_declarationContext _localctx = new Secondary_unit_declarationContext(Context, State);
		EnterRule(_localctx, 398, RULE_secondary_unit_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2084;
			identifier();
			State = 2085;
			Match(EQ);
			State = 2086;
			physical_literal();
			State = 2087;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Selected_signal_assignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(vhdlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT() { return GetToken(vhdlParser.SELECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TargetContext target() {
			return GetRuleContext<TargetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LE() { return GetToken(vhdlParser.LE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OptsContext opts() {
			return GetRuleContext<OptsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Selected_waveformsContext selected_waveforms() {
			return GetRuleContext<Selected_waveformsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(vhdlParser.SEMI, 0); }
		public Selected_signal_assignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selected_signal_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterSelected_signal_assignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitSelected_signal_assignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelected_signal_assignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Selected_signal_assignmentContext selected_signal_assignment() {
		Selected_signal_assignmentContext _localctx = new Selected_signal_assignmentContext(Context, State);
		EnterRule(_localctx, 400, RULE_selected_signal_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2089;
			Match(WITH);
			State = 2090;
			expression();
			State = 2091;
			Match(SELECT);
			State = 2092;
			target();
			State = 2093;
			Match(LE);
			State = 2094;
			opts();
			State = 2095;
			selected_waveforms();
			State = 2096;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Selected_waveformsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public WaveformContext[] waveform() {
			return GetRuleContexts<WaveformContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WaveformContext waveform(int i) {
			return GetRuleContext<WaveformContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WHEN() { return GetTokens(vhdlParser.WHEN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHEN(int i) {
			return GetToken(vhdlParser.WHEN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChoicesContext[] choices() {
			return GetRuleContexts<ChoicesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChoicesContext choices(int i) {
			return GetRuleContext<ChoicesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(vhdlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(vhdlParser.COMMA, i);
		}
		public Selected_waveformsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selected_waveforms; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterSelected_waveforms(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitSelected_waveforms(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelected_waveforms(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Selected_waveformsContext selected_waveforms() {
		Selected_waveformsContext _localctx = new Selected_waveformsContext(Context, State);
		EnterRule(_localctx, 402, RULE_selected_waveforms);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2098;
			waveform();
			State = 2099;
			Match(WHEN);
			State = 2100;
			choices();
			State = 2108;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2101;
				Match(COMMA);
				State = 2102;
				waveform();
				State = 2103;
				Match(WHEN);
				State = 2104;
				choices();
				}
				}
				State = 2110;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sensitivity_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(vhdlParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sensitivity_listContext sensitivity_list() {
			return GetRuleContext<Sensitivity_listContext>(0);
		}
		public Sensitivity_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sensitivity_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterSensitivity_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitSensitivity_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSensitivity_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sensitivity_clauseContext sensitivity_clause() {
		Sensitivity_clauseContext _localctx = new Sensitivity_clauseContext(Context, State);
		EnterRule(_localctx, 404, RULE_sensitivity_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2111;
			Match(ON);
			State = 2112;
			sensitivity_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sensitivity_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext[] name() {
			return GetRuleContexts<NameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name(int i) {
			return GetRuleContext<NameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(vhdlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(vhdlParser.COMMA, i);
		}
		public Sensitivity_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sensitivity_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterSensitivity_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitSensitivity_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSensitivity_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sensitivity_listContext sensitivity_list() {
		Sensitivity_listContext _localctx = new Sensitivity_listContext(Context, State);
		EnterRule(_localctx, 406, RULE_sensitivity_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2114;
			name();
			State = 2119;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2115;
				Match(COMMA);
				State = 2116;
				name();
				}
				}
				State = 2121;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sequence_of_statementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Sequential_statementContext[] sequential_statement() {
			return GetRuleContexts<Sequential_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sequential_statementContext sequential_statement(int i) {
			return GetRuleContext<Sequential_statementContext>(i);
		}
		public Sequence_of_statementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sequence_of_statements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterSequence_of_statements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitSequence_of_statements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSequence_of_statements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sequence_of_statementsContext sequence_of_statements() {
		Sequence_of_statementsContext _localctx = new Sequence_of_statementsContext(Context, State);
		EnterRule(_localctx, 408, RULE_sequence_of_statements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2125;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ASSERT) | (1L << BREAK) | (1L << CASE) | (1L << EXIT) | (1L << FOR) | (1L << IF) | (1L << LOOP) | (1L << NEXT) | (1L << NULL_))) != 0) || ((((_la - 79)) & ~0x3f) == 0 && ((1L << (_la - 79)) & ((1L << (REPORT - 79)) | (1L << (RETURN - 79)) | (1L << (WAIT - 79)) | (1L << (WHILE - 79)) | (1L << (BASIC_IDENTIFIER - 79)) | (1L << (EXTENDED_IDENTIFIER - 79)) | (1L << (STRING_LITERAL - 79)) | (1L << (LPAREN - 79)))) != 0)) {
				{
				{
				State = 2122;
				sequential_statement();
				}
				}
				State = 2127;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sequential_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Wait_statementContext wait_statement() {
			return GetRuleContext<Wait_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Assertion_statementContext assertion_statement() {
			return GetRuleContext<Assertion_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Report_statementContext report_statement() {
			return GetRuleContext<Report_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Signal_assignment_statementContext signal_assignment_statement() {
			return GetRuleContext<Signal_assignment_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variable_assignment_statementContext variable_assignment_statement() {
			return GetRuleContext<Variable_assignment_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public If_statementContext if_statement() {
			return GetRuleContext<If_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Case_statementContext case_statement() {
			return GetRuleContext<Case_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Loop_statementContext loop_statement() {
			return GetRuleContext<Loop_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Next_statementContext next_statement() {
			return GetRuleContext<Next_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Exit_statementContext exit_statement() {
			return GetRuleContext<Exit_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Return_statementContext return_statement() {
			return GetRuleContext<Return_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_() { return GetToken(vhdlParser.NULL_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(vhdlParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Label_colonContext label_colon() {
			return GetRuleContext<Label_colonContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Break_statementContext break_statement() {
			return GetRuleContext<Break_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Procedure_call_statementContext procedure_call_statement() {
			return GetRuleContext<Procedure_call_statementContext>(0);
		}
		public Sequential_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sequential_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterSequential_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitSequential_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSequential_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sequential_statementContext sequential_statement() {
		Sequential_statementContext _localctx = new Sequential_statementContext(Context, State);
		EnterRule(_localctx, 410, RULE_sequential_statement);
		int _la;
		try {
			State = 2146;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,230,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2128;
				wait_statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2129;
				assertion_statement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2130;
				report_statement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2131;
				signal_assignment_statement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2132;
				variable_assignment_statement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2133;
				if_statement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2134;
				case_statement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2135;
				loop_statement();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 2136;
				next_statement();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 2137;
				exit_statement();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 2138;
				return_statement();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 2140;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==BASIC_IDENTIFIER || _la==EXTENDED_IDENTIFIER) {
					{
					State = 2139;
					label_colon();
					}
				}

				State = 2142;
				Match(NULL_);
				State = 2143;
				Match(SEMI);
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 2144;
				break_statement();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 2145;
				procedure_call_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Shift_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Simple_expressionContext[] simple_expression() {
			return GetRuleContexts<Simple_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Simple_expressionContext simple_expression(int i) {
			return GetRuleContext<Simple_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Shift_operatorContext shift_operator() {
			return GetRuleContext<Shift_operatorContext>(0);
		}
		public Shift_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shift_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterShift_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitShift_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShift_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Shift_expressionContext shift_expression() {
		Shift_expressionContext _localctx = new Shift_expressionContext(Context, State);
		EnterRule(_localctx, 412, RULE_shift_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2148;
			simple_expression();
			State = 2152;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,231,Context) ) {
			case 1:
				{
				State = 2149;
				shift_operator();
				State = 2150;
				simple_expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Shift_operatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLL() { return GetToken(vhdlParser.SLL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SRL() { return GetToken(vhdlParser.SRL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLA() { return GetToken(vhdlParser.SLA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SRA() { return GetToken(vhdlParser.SRA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROL() { return GetToken(vhdlParser.ROL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROR() { return GetToken(vhdlParser.ROR, 0); }
		public Shift_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shift_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterShift_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitShift_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShift_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Shift_operatorContext shift_operator() {
		Shift_operatorContext _localctx = new Shift_operatorContext(Context, State);
		EnterRule(_localctx, 414, RULE_shift_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2154;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 81)) & ~0x3f) == 0 && ((1L << (_la - 81)) & ((1L << (ROL - 81)) | (1L << (ROR - 81)) | (1L << (SLA - 81)) | (1L << (SLL - 81)) | (1L << (SRA - 81)) | (1L << (SRL - 81)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Signal_assignment_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TargetContext target() {
			return GetRuleContext<TargetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LE() { return GetToken(vhdlParser.LE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WaveformContext waveform() {
			return GetRuleContext<WaveformContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(vhdlParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Label_colonContext label_colon() {
			return GetRuleContext<Label_colonContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Delay_mechanismContext delay_mechanism() {
			return GetRuleContext<Delay_mechanismContext>(0);
		}
		public Signal_assignment_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signal_assignment_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterSignal_assignment_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitSignal_assignment_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSignal_assignment_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Signal_assignment_statementContext signal_assignment_statement() {
		Signal_assignment_statementContext _localctx = new Signal_assignment_statementContext(Context, State);
		EnterRule(_localctx, 416, RULE_signal_assignment_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2157;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,232,Context) ) {
			case 1:
				{
				State = 2156;
				label_colon();
				}
				break;
			}
			State = 2159;
			target();
			State = 2160;
			Match(LE);
			State = 2162;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 39)) & ~0x3f) == 0 && ((1L << (_la - 39)) & ((1L << (INERTIAL - 39)) | (1L << (REJECT - 39)) | (1L << (TRANSPORT - 39)))) != 0)) {
				{
				State = 2161;
				delay_mechanism();
				}
			}

			State = 2164;
			waveform();
			State = 2165;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Signal_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIGNAL() { return GetToken(vhdlParser.SIGNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Identifier_listContext identifier_list() {
			return GetRuleContext<Identifier_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(vhdlParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Subtype_indicationContext subtype_indication() {
			return GetRuleContext<Subtype_indicationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(vhdlParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Signal_kindContext signal_kind() {
			return GetRuleContext<Signal_kindContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARASGN() { return GetToken(vhdlParser.VARASGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Signal_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signal_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterSignal_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitSignal_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSignal_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Signal_declarationContext signal_declaration() {
		Signal_declarationContext _localctx = new Signal_declarationContext(Context, State);
		EnterRule(_localctx, 418, RULE_signal_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2167;
			Match(SIGNAL);
			State = 2168;
			identifier_list();
			State = 2169;
			Match(COLON);
			State = 2170;
			subtype_indication();
			State = 2172;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BUS || _la==REGISTER) {
				{
				State = 2171;
				signal_kind();
				}
			}

			State = 2176;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==VARASGN) {
				{
				State = 2174;
				Match(VARASGN);
				State = 2175;
				expression();
				}
			}

			State = 2178;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Signal_kindContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REGISTER() { return GetToken(vhdlParser.REGISTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BUS() { return GetToken(vhdlParser.BUS, 0); }
		public Signal_kindContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signal_kind; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterSignal_kind(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitSignal_kind(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSignal_kind(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Signal_kindContext signal_kind() {
		Signal_kindContext _localctx = new Signal_kindContext(Context, State);
		EnterRule(_localctx, 420, RULE_signal_kind);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2180;
			_la = TokenStream.LA(1);
			if ( !(_la==BUS || _la==REGISTER) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Signal_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext[] name() {
			return GetRuleContexts<NameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name(int i) {
			return GetRuleContext<NameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(vhdlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(vhdlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OTHERS() { return GetToken(vhdlParser.OTHERS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(vhdlParser.ALL, 0); }
		public Signal_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signal_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterSignal_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitSignal_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSignal_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Signal_listContext signal_list() {
		Signal_listContext _localctx = new Signal_listContext(Context, State);
		EnterRule(_localctx, 422, RULE_signal_list);
		int _la;
		try {
			State = 2192;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BASIC_IDENTIFIER:
			case EXTENDED_IDENTIFIER:
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2182;
				name();
				State = 2187;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 2183;
					Match(COMMA);
					State = 2184;
					name();
					}
					}
					State = 2189;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case OTHERS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2190;
				Match(OTHERS);
				}
				break;
			case ALL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2191;
				Match(ALL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignatureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET() { return GetToken(vhdlParser.LBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET() { return GetToken(vhdlParser.RBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext[] name() {
			return GetRuleContexts<NameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name(int i) {
			return GetRuleContext<NameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(vhdlParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(vhdlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(vhdlParser.COMMA, i);
		}
		public SignatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signature; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterSignature(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitSignature(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSignature(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SignatureContext signature() {
		SignatureContext _localctx = new SignatureContext(Context, State);
		EnterRule(_localctx, 424, RULE_signature);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2194;
			Match(LBRACKET);
			State = 2203;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 118)) & ~0x3f) == 0 && ((1L << (_la - 118)) & ((1L << (BASIC_IDENTIFIER - 118)) | (1L << (EXTENDED_IDENTIFIER - 118)) | (1L << (STRING_LITERAL - 118)))) != 0)) {
				{
				State = 2195;
				name();
				State = 2200;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 2196;
					Match(COMMA);
					State = 2197;
					name();
					}
					}
					State = 2202;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 2207;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RETURN) {
				{
				State = 2205;
				Match(RETURN);
				State = 2206;
				name();
				}
			}

			State = 2209;
			Match(RBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Adding_operatorContext[] adding_operator() {
			return GetRuleContexts<Adding_operatorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Adding_operatorContext adding_operator(int i) {
			return GetRuleContext<Adding_operatorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(vhdlParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(vhdlParser.MINUS, 0); }
		public Simple_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterSimple_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitSimple_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimple_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Simple_expressionContext simple_expression() {
		Simple_expressionContext _localctx = new Simple_expressionContext(Context, State);
		EnterRule(_localctx, 426, RULE_simple_expression);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2212;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PLUS || _la==MINUS) {
				{
				State = 2211;
				_la = TokenStream.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 2214;
			term();
			State = 2220;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,242,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2215;
					adding_operator();
					State = 2216;
					term();
					}
					} 
				}
				State = 2222;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,242,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_simultaneous_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Simple_expressionContext[] simple_expression() {
			return GetRuleContexts<Simple_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Simple_expressionContext simple_expression(int i) {
			return GetRuleContext<Simple_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(vhdlParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(vhdlParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Label_colonContext label_colon() {
			return GetRuleContext<Label_colonContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Tolerance_aspectContext tolerance_aspect() {
			return GetRuleContext<Tolerance_aspectContext>(0);
		}
		public Simple_simultaneous_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_simultaneous_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterSimple_simultaneous_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitSimple_simultaneous_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimple_simultaneous_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Simple_simultaneous_statementContext simple_simultaneous_statement() {
		Simple_simultaneous_statementContext _localctx = new Simple_simultaneous_statementContext(Context, State);
		EnterRule(_localctx, 428, RULE_simple_simultaneous_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2224;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,243,Context) ) {
			case 1:
				{
				State = 2223;
				label_colon();
				}
				break;
			}
			State = 2226;
			simple_expression();
			State = 2227;
			Match(ASSIGN);
			State = 2228;
			simple_expression();
			State = 2230;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TOLERANCE) {
				{
				State = 2229;
				tolerance_aspect();
				}
			}

			State = 2232;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simultaneous_alternativeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHEN() { return GetToken(vhdlParser.WHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ChoicesContext choices() {
			return GetRuleContext<ChoicesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARROW() { return GetToken(vhdlParser.ARROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Simultaneous_statement_partContext simultaneous_statement_part() {
			return GetRuleContext<Simultaneous_statement_partContext>(0);
		}
		public Simultaneous_alternativeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simultaneous_alternative; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterSimultaneous_alternative(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitSimultaneous_alternative(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimultaneous_alternative(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Simultaneous_alternativeContext simultaneous_alternative() {
		Simultaneous_alternativeContext _localctx = new Simultaneous_alternativeContext(Context, State);
		EnterRule(_localctx, 430, RULE_simultaneous_alternative);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2234;
			Match(WHEN);
			State = 2235;
			choices();
			State = 2236;
			Match(ARROW);
			State = 2237;
			simultaneous_statement_part();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simultaneous_case_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CASE() { return GetTokens(vhdlParser.CASE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE(int i) {
			return GetToken(vhdlParser.CASE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USE() { return GetToken(vhdlParser.USE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(vhdlParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(vhdlParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Label_colonContext label_colon() {
			return GetRuleContext<Label_colonContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Simultaneous_alternativeContext[] simultaneous_alternative() {
			return GetRuleContexts<Simultaneous_alternativeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Simultaneous_alternativeContext simultaneous_alternative(int i) {
			return GetRuleContext<Simultaneous_alternativeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Simultaneous_case_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simultaneous_case_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterSimultaneous_case_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitSimultaneous_case_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimultaneous_case_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Simultaneous_case_statementContext simultaneous_case_statement() {
		Simultaneous_case_statementContext _localctx = new Simultaneous_case_statementContext(Context, State);
		EnterRule(_localctx, 432, RULE_simultaneous_case_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2240;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BASIC_IDENTIFIER || _la==EXTENDED_IDENTIFIER) {
				{
				State = 2239;
				label_colon();
				}
			}

			State = 2242;
			Match(CASE);
			State = 2243;
			expression();
			State = 2244;
			Match(USE);
			State = 2246;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 2245;
				simultaneous_alternative();
				}
				}
				State = 2248;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==WHEN );
			State = 2250;
			Match(END);
			State = 2251;
			Match(CASE);
			State = 2253;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BASIC_IDENTIFIER || _la==EXTENDED_IDENTIFIER) {
				{
				State = 2252;
				identifier();
				}
			}

			State = 2255;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simultaneous_if_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(vhdlParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext[] condition() {
			return GetRuleContexts<ConditionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition(int i) {
			return GetRuleContext<ConditionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] USE() { return GetTokens(vhdlParser.USE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USE(int i) {
			return GetToken(vhdlParser.USE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Simultaneous_statement_partContext[] simultaneous_statement_part() {
			return GetRuleContexts<Simultaneous_statement_partContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Simultaneous_statement_partContext simultaneous_statement_part(int i) {
			return GetRuleContext<Simultaneous_statement_partContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(vhdlParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(vhdlParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Label_colonContext label_colon() {
			return GetRuleContext<Label_colonContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ELSIF() { return GetTokens(vhdlParser.ELSIF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSIF(int i) {
			return GetToken(vhdlParser.ELSIF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(vhdlParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Simultaneous_if_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simultaneous_if_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterSimultaneous_if_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitSimultaneous_if_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimultaneous_if_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Simultaneous_if_statementContext simultaneous_if_statement() {
		Simultaneous_if_statementContext _localctx = new Simultaneous_if_statementContext(Context, State);
		EnterRule(_localctx, 434, RULE_simultaneous_if_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2258;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BASIC_IDENTIFIER || _la==EXTENDED_IDENTIFIER) {
				{
				State = 2257;
				label_colon();
				}
			}

			State = 2260;
			Match(IF);
			State = 2261;
			condition();
			State = 2262;
			Match(USE);
			State = 2263;
			simultaneous_statement_part();
			State = 2271;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ELSIF) {
				{
				{
				State = 2264;
				Match(ELSIF);
				State = 2265;
				condition();
				State = 2266;
				Match(USE);
				State = 2267;
				simultaneous_statement_part();
				}
				}
				State = 2273;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2276;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 2274;
				Match(ELSE);
				State = 2275;
				simultaneous_statement_part();
				}
			}

			State = 2278;
			Match(END);
			State = 2279;
			Match(USE);
			State = 2281;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BASIC_IDENTIFIER || _la==EXTENDED_IDENTIFIER) {
				{
				State = 2280;
				identifier();
				}
			}

			State = 2283;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simultaneous_procedural_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PROCEDURAL() { return GetTokens(vhdlParser.PROCEDURAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURAL(int i) {
			return GetToken(vhdlParser.PROCEDURAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Procedural_declarative_partContext procedural_declarative_part() {
			return GetRuleContext<Procedural_declarative_partContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN() { return GetToken(vhdlParser.BEGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Procedural_statement_partContext procedural_statement_part() {
			return GetRuleContext<Procedural_statement_partContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(vhdlParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(vhdlParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Label_colonContext label_colon() {
			return GetRuleContext<Label_colonContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(vhdlParser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Simultaneous_procedural_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simultaneous_procedural_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterSimultaneous_procedural_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitSimultaneous_procedural_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimultaneous_procedural_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Simultaneous_procedural_statementContext simultaneous_procedural_statement() {
		Simultaneous_procedural_statementContext _localctx = new Simultaneous_procedural_statementContext(Context, State);
		EnterRule(_localctx, 436, RULE_simultaneous_procedural_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2286;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BASIC_IDENTIFIER || _la==EXTENDED_IDENTIFIER) {
				{
				State = 2285;
				label_colon();
				}
			}

			State = 2288;
			Match(PROCEDURAL);
			State = 2290;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IS) {
				{
				State = 2289;
				Match(IS);
				}
			}

			State = 2292;
			procedural_declarative_part();
			State = 2293;
			Match(BEGIN);
			State = 2294;
			procedural_statement_part();
			State = 2295;
			Match(END);
			State = 2296;
			Match(PROCEDURAL);
			State = 2298;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BASIC_IDENTIFIER || _la==EXTENDED_IDENTIFIER) {
				{
				State = 2297;
				identifier();
				}
			}

			State = 2300;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simultaneous_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Simple_simultaneous_statementContext simple_simultaneous_statement() {
			return GetRuleContext<Simple_simultaneous_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Simultaneous_if_statementContext simultaneous_if_statement() {
			return GetRuleContext<Simultaneous_if_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Simultaneous_case_statementContext simultaneous_case_statement() {
			return GetRuleContext<Simultaneous_case_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Simultaneous_procedural_statementContext simultaneous_procedural_statement() {
			return GetRuleContext<Simultaneous_procedural_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_() { return GetToken(vhdlParser.NULL_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(vhdlParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Label_colonContext label_colon() {
			return GetRuleContext<Label_colonContext>(0);
		}
		public Simultaneous_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simultaneous_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterSimultaneous_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitSimultaneous_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimultaneous_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Simultaneous_statementContext simultaneous_statement() {
		Simultaneous_statementContext _localctx = new Simultaneous_statementContext(Context, State);
		EnterRule(_localctx, 438, RULE_simultaneous_statement);
		int _la;
		try {
			State = 2311;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,256,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2302;
				simple_simultaneous_statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2303;
				simultaneous_if_statement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2304;
				simultaneous_case_statement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2305;
				simultaneous_procedural_statement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2307;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==BASIC_IDENTIFIER || _la==EXTENDED_IDENTIFIER) {
					{
					State = 2306;
					label_colon();
					}
				}

				State = 2309;
				Match(NULL_);
				State = 2310;
				Match(SEMI);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simultaneous_statement_partContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Simultaneous_statementContext[] simultaneous_statement() {
			return GetRuleContexts<Simultaneous_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Simultaneous_statementContext simultaneous_statement(int i) {
			return GetRuleContext<Simultaneous_statementContext>(i);
		}
		public Simultaneous_statement_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simultaneous_statement_part; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterSimultaneous_statement_part(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitSimultaneous_statement_part(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimultaneous_statement_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Simultaneous_statement_partContext simultaneous_statement_part() {
		Simultaneous_statement_partContext _localctx = new Simultaneous_statement_partContext(Context, State);
		EnterRule(_localctx, 440, RULE_simultaneous_statement_part);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2316;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABS) | (1L << CASE) | (1L << IF) | (1L << NEW) | (1L << NOT) | (1L << NULL_))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (PROCEDURAL - 69)) | (1L << (BASE_LITERAL - 69)) | (1L << (BIT_STRING_LITERAL - 69)) | (1L << (REAL_LITERAL - 69)) | (1L << (BASIC_IDENTIFIER - 69)) | (1L << (EXTENDED_IDENTIFIER - 69)) | (1L << (CHARACTER_LITERAL - 69)) | (1L << (STRING_LITERAL - 69)))) != 0) || ((((_la - 141)) & ~0x3f) == 0 && ((1L << (_la - 141)) & ((1L << (LPAREN - 141)) | (1L << (PLUS - 141)) | (1L << (MINUS - 141)) | (1L << (INTEGER - 141)))) != 0)) {
				{
				{
				State = 2313;
				simultaneous_statement();
				}
				}
				State = 2318;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Source_aspectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPECTRUM() { return GetToken(vhdlParser.SPECTRUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Simple_expressionContext[] simple_expression() {
			return GetRuleContexts<Simple_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Simple_expressionContext simple_expression(int i) {
			return GetRuleContext<Simple_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(vhdlParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOISE() { return GetToken(vhdlParser.NOISE, 0); }
		public Source_aspectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_source_aspect; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterSource_aspect(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitSource_aspect(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSource_aspect(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Source_aspectContext source_aspect() {
		Source_aspectContext _localctx = new Source_aspectContext(Context, State);
		EnterRule(_localctx, 442, RULE_source_aspect);
		try {
			State = 2326;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SPECTRUM:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2319;
				Match(SPECTRUM);
				State = 2320;
				simple_expression();
				State = 2321;
				Match(COMMA);
				State = 2322;
				simple_expression();
				}
				break;
			case NOISE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2324;
				Match(NOISE);
				State = 2325;
				simple_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Source_quantity_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUANTITY() { return GetToken(vhdlParser.QUANTITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Identifier_listContext identifier_list() {
			return GetRuleContext<Identifier_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(vhdlParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Subtype_indicationContext subtype_indication() {
			return GetRuleContext<Subtype_indicationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Source_aspectContext source_aspect() {
			return GetRuleContext<Source_aspectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(vhdlParser.SEMI, 0); }
		public Source_quantity_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_source_quantity_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterSource_quantity_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitSource_quantity_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSource_quantity_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Source_quantity_declarationContext source_quantity_declaration() {
		Source_quantity_declarationContext _localctx = new Source_quantity_declarationContext(Context, State);
		EnterRule(_localctx, 444, RULE_source_quantity_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2328;
			Match(QUANTITY);
			State = 2329;
			identifier_list();
			State = 2330;
			Match(COLON);
			State = 2331;
			subtype_indication();
			State = 2332;
			source_aspect();
			State = 2333;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Step_limit_specificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIMIT() { return GetToken(vhdlParser.LIMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Quantity_specificationContext quantity_specification() {
			return GetRuleContext<Quantity_specificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(vhdlParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(vhdlParser.SEMI, 0); }
		public Step_limit_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_step_limit_specification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterStep_limit_specification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitStep_limit_specification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStep_limit_specification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Step_limit_specificationContext step_limit_specification() {
		Step_limit_specificationContext _localctx = new Step_limit_specificationContext(Context, State);
		EnterRule(_localctx, 446, RULE_step_limit_specification);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2335;
			Match(LIMIT);
			State = 2336;
			quantity_specification();
			State = 2337;
			Match(WITH);
			State = 2338;
			expression();
			State = 2339;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Subnature_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBNATURE() { return GetToken(vhdlParser.SUBNATURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(vhdlParser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Subnature_indicationContext subnature_indication() {
			return GetRuleContext<Subnature_indicationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(vhdlParser.SEMI, 0); }
		public Subnature_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subnature_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterSubnature_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitSubnature_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubnature_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Subnature_declarationContext subnature_declaration() {
		Subnature_declarationContext _localctx = new Subnature_declarationContext(Context, State);
		EnterRule(_localctx, 448, RULE_subnature_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2341;
			Match(SUBNATURE);
			State = 2342;
			identifier();
			State = 2343;
			Match(IS);
			State = 2344;
			subnature_indication();
			State = 2345;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Subnature_indicationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Index_constraintContext index_constraint() {
			return GetRuleContext<Index_constraintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOLERANCE() { return GetToken(vhdlParser.TOLERANCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACROSS() { return GetToken(vhdlParser.ACROSS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THROUGH() { return GetToken(vhdlParser.THROUGH, 0); }
		public Subnature_indicationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subnature_indication; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterSubnature_indication(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitSubnature_indication(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubnature_indication(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Subnature_indicationContext subnature_indication() {
		Subnature_indicationContext _localctx = new Subnature_indicationContext(Context, State);
		EnterRule(_localctx, 450, RULE_subnature_indication);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2347;
			name();
			State = 2349;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAREN) {
				{
				State = 2348;
				index_constraint();
				}
			}

			State = 2357;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TOLERANCE) {
				{
				State = 2351;
				Match(TOLERANCE);
				State = 2352;
				expression();
				State = 2353;
				Match(ACROSS);
				State = 2354;
				expression();
				State = 2355;
				Match(THROUGH);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Subprogram_bodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Subprogram_specificationContext subprogram_specification() {
			return GetRuleContext<Subprogram_specificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(vhdlParser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Subprogram_declarative_partContext subprogram_declarative_part() {
			return GetRuleContext<Subprogram_declarative_partContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN() { return GetToken(vhdlParser.BEGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Subprogram_statement_partContext subprogram_statement_part() {
			return GetRuleContext<Subprogram_statement_partContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(vhdlParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(vhdlParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Subprogram_kindContext subprogram_kind() {
			return GetRuleContext<Subprogram_kindContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DesignatorContext designator() {
			return GetRuleContext<DesignatorContext>(0);
		}
		public Subprogram_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subprogram_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterSubprogram_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitSubprogram_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubprogram_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Subprogram_bodyContext subprogram_body() {
		Subprogram_bodyContext _localctx = new Subprogram_bodyContext(Context, State);
		EnterRule(_localctx, 452, RULE_subprogram_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2359;
			subprogram_specification();
			State = 2360;
			Match(IS);
			State = 2361;
			subprogram_declarative_part();
			State = 2362;
			Match(BEGIN);
			State = 2363;
			subprogram_statement_part();
			State = 2364;
			Match(END);
			State = 2366;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FUNCTION || _la==PROCEDURE) {
				{
				State = 2365;
				subprogram_kind();
				}
			}

			State = 2369;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 118)) & ~0x3f) == 0 && ((1L << (_la - 118)) & ((1L << (BASIC_IDENTIFIER - 118)) | (1L << (EXTENDED_IDENTIFIER - 118)) | (1L << (STRING_LITERAL - 118)))) != 0)) {
				{
				State = 2368;
				designator();
				}
			}

			State = 2371;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Subprogram_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Subprogram_specificationContext subprogram_specification() {
			return GetRuleContext<Subprogram_specificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(vhdlParser.SEMI, 0); }
		public Subprogram_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subprogram_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterSubprogram_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitSubprogram_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubprogram_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Subprogram_declarationContext subprogram_declaration() {
		Subprogram_declarationContext _localctx = new Subprogram_declarationContext(Context, State);
		EnterRule(_localctx, 454, RULE_subprogram_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2373;
			subprogram_specification();
			State = 2374;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Subprogram_declarative_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Subprogram_declarationContext subprogram_declaration() {
			return GetRuleContext<Subprogram_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Subprogram_bodyContext subprogram_body() {
			return GetRuleContext<Subprogram_bodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_declarationContext type_declaration() {
			return GetRuleContext<Type_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Subtype_declarationContext subtype_declaration() {
			return GetRuleContext<Subtype_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Constant_declarationContext constant_declaration() {
			return GetRuleContext<Constant_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variable_declarationContext variable_declaration() {
			return GetRuleContext<Variable_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public File_declarationContext file_declaration() {
			return GetRuleContext<File_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alias_declarationContext alias_declaration() {
			return GetRuleContext<Alias_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Attribute_declarationContext attribute_declaration() {
			return GetRuleContext<Attribute_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Attribute_specificationContext attribute_specification() {
			return GetRuleContext<Attribute_specificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Use_clauseContext use_clause() {
			return GetRuleContext<Use_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Group_template_declarationContext group_template_declaration() {
			return GetRuleContext<Group_template_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Group_declarationContext group_declaration() {
			return GetRuleContext<Group_declarationContext>(0);
		}
		public Subprogram_declarative_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subprogram_declarative_item; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterSubprogram_declarative_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitSubprogram_declarative_item(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubprogram_declarative_item(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Subprogram_declarative_itemContext subprogram_declarative_item() {
		Subprogram_declarative_itemContext _localctx = new Subprogram_declarative_itemContext(Context, State);
		EnterRule(_localctx, 456, RULE_subprogram_declarative_item);
		try {
			State = 2389;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,263,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2376;
				subprogram_declaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2377;
				subprogram_body();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2378;
				type_declaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2379;
				subtype_declaration();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2380;
				constant_declaration();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2381;
				variable_declaration();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2382;
				file_declaration();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2383;
				alias_declaration();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 2384;
				attribute_declaration();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 2385;
				attribute_specification();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 2386;
				use_clause();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 2387;
				group_template_declaration();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 2388;
				group_declaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Subprogram_declarative_partContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Subprogram_declarative_itemContext[] subprogram_declarative_item() {
			return GetRuleContexts<Subprogram_declarative_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Subprogram_declarative_itemContext subprogram_declarative_item(int i) {
			return GetRuleContext<Subprogram_declarative_itemContext>(i);
		}
		public Subprogram_declarative_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subprogram_declarative_part; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterSubprogram_declarative_part(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitSubprogram_declarative_part(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubprogram_declarative_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Subprogram_declarative_partContext subprogram_declarative_part() {
		Subprogram_declarative_partContext _localctx = new Subprogram_declarative_partContext(Context, State);
		EnterRule(_localctx, 458, RULE_subprogram_declarative_part);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2394;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALIAS) | (1L << ATTRIBUTE) | (1L << CONSTANT) | (1L << FILE) | (1L << FUNCTION) | (1L << GROUP) | (1L << IMPURE))) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (PROCEDURE - 68)) | (1L << (PURE - 68)) | (1L << (SHARED - 68)) | (1L << (SUBTYPE - 68)) | (1L << (TYPE - 68)) | (1L << (USE - 68)) | (1L << (VARIABLE - 68)))) != 0)) {
				{
				{
				State = 2391;
				subprogram_declarative_item();
				}
				}
				State = 2396;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Subprogram_kindContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(vhdlParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(vhdlParser.FUNCTION, 0); }
		public Subprogram_kindContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subprogram_kind; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterSubprogram_kind(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitSubprogram_kind(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubprogram_kind(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Subprogram_kindContext subprogram_kind() {
		Subprogram_kindContext _localctx = new Subprogram_kindContext(Context, State);
		EnterRule(_localctx, 460, RULE_subprogram_kind);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2397;
			_la = TokenStream.LA(1);
			if ( !(_la==FUNCTION || _la==PROCEDURE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Subprogram_specificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Procedure_specificationContext procedure_specification() {
			return GetRuleContext<Procedure_specificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_specificationContext function_specification() {
			return GetRuleContext<Function_specificationContext>(0);
		}
		public Subprogram_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subprogram_specification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterSubprogram_specification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitSubprogram_specification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubprogram_specification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Subprogram_specificationContext subprogram_specification() {
		Subprogram_specificationContext _localctx = new Subprogram_specificationContext(Context, State);
		EnterRule(_localctx, 462, RULE_subprogram_specification);
		try {
			State = 2401;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PROCEDURE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2399;
				procedure_specification();
				}
				break;
			case FUNCTION:
			case IMPURE:
			case PURE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2400;
				function_specification();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Procedure_specificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(vhdlParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DesignatorContext designator() {
			return GetRuleContext<DesignatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(vhdlParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Formal_parameter_listContext formal_parameter_list() {
			return GetRuleContext<Formal_parameter_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(vhdlParser.RPAREN, 0); }
		public Procedure_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedure_specification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterProcedure_specification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitProcedure_specification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedure_specification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Procedure_specificationContext procedure_specification() {
		Procedure_specificationContext _localctx = new Procedure_specificationContext(Context, State);
		EnterRule(_localctx, 464, RULE_procedure_specification);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2403;
			Match(PROCEDURE);
			State = 2404;
			designator();
			State = 2409;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAREN) {
				{
				State = 2405;
				Match(LPAREN);
				State = 2406;
				formal_parameter_list();
				State = 2407;
				Match(RPAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_specificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(vhdlParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DesignatorContext designator() {
			return GetRuleContext<DesignatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(vhdlParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Subtype_indicationContext subtype_indication() {
			return GetRuleContext<Subtype_indicationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(vhdlParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Formal_parameter_listContext formal_parameter_list() {
			return GetRuleContext<Formal_parameter_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(vhdlParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PURE() { return GetToken(vhdlParser.PURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPURE() { return GetToken(vhdlParser.IMPURE, 0); }
		public Function_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_specification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterFunction_specification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitFunction_specification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_specification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_specificationContext function_specification() {
		Function_specificationContext _localctx = new Function_specificationContext(Context, State);
		EnterRule(_localctx, 466, RULE_function_specification);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2412;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IMPURE || _la==PURE) {
				{
				State = 2411;
				_la = TokenStream.LA(1);
				if ( !(_la==IMPURE || _la==PURE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 2414;
			Match(FUNCTION);
			State = 2415;
			designator();
			State = 2420;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAREN) {
				{
				State = 2416;
				Match(LPAREN);
				State = 2417;
				formal_parameter_list();
				State = 2418;
				Match(RPAREN);
				}
			}

			State = 2422;
			Match(RETURN);
			State = 2423;
			subtype_indication();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Subprogram_statement_partContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Sequential_statementContext[] sequential_statement() {
			return GetRuleContexts<Sequential_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sequential_statementContext sequential_statement(int i) {
			return GetRuleContext<Sequential_statementContext>(i);
		}
		public Subprogram_statement_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subprogram_statement_part; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterSubprogram_statement_part(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitSubprogram_statement_part(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubprogram_statement_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Subprogram_statement_partContext subprogram_statement_part() {
		Subprogram_statement_partContext _localctx = new Subprogram_statement_partContext(Context, State);
		EnterRule(_localctx, 468, RULE_subprogram_statement_part);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2428;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ASSERT) | (1L << BREAK) | (1L << CASE) | (1L << EXIT) | (1L << FOR) | (1L << IF) | (1L << LOOP) | (1L << NEXT) | (1L << NULL_))) != 0) || ((((_la - 79)) & ~0x3f) == 0 && ((1L << (_la - 79)) & ((1L << (REPORT - 79)) | (1L << (RETURN - 79)) | (1L << (WAIT - 79)) | (1L << (WHILE - 79)) | (1L << (BASIC_IDENTIFIER - 79)) | (1L << (EXTENDED_IDENTIFIER - 79)) | (1L << (STRING_LITERAL - 79)) | (1L << (LPAREN - 79)))) != 0)) {
				{
				{
				State = 2425;
				sequential_statement();
				}
				}
				State = 2430;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Subtype_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBTYPE() { return GetToken(vhdlParser.SUBTYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(vhdlParser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Subtype_indicationContext subtype_indication() {
			return GetRuleContext<Subtype_indicationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(vhdlParser.SEMI, 0); }
		public Subtype_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subtype_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterSubtype_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitSubtype_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubtype_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Subtype_declarationContext subtype_declaration() {
		Subtype_declarationContext _localctx = new Subtype_declarationContext(Context, State);
		EnterRule(_localctx, 470, RULE_subtype_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2431;
			Match(SUBTYPE);
			State = 2432;
			identifier();
			State = 2433;
			Match(IS);
			State = 2434;
			subtype_indication();
			State = 2435;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Subtype_indicationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Selected_nameContext[] selected_name() {
			return GetRuleContexts<Selected_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Selected_nameContext selected_name(int i) {
			return GetRuleContext<Selected_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstraintContext constraint() {
			return GetRuleContext<ConstraintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Tolerance_aspectContext tolerance_aspect() {
			return GetRuleContext<Tolerance_aspectContext>(0);
		}
		public Subtype_indicationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subtype_indication; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterSubtype_indication(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitSubtype_indication(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubtype_indication(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Subtype_indicationContext subtype_indication() {
		Subtype_indicationContext _localctx = new Subtype_indicationContext(Context, State);
		EnterRule(_localctx, 472, RULE_subtype_indication);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2437;
			selected_name();
			State = 2439;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BASIC_IDENTIFIER || _la==EXTENDED_IDENTIFIER) {
				{
				State = 2438;
				selected_name();
				}
			}

			State = 2442;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RANGE || _la==LPAREN) {
				{
				State = 2441;
				constraint();
				}
			}

			State = 2445;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,272,Context) ) {
			case 1:
				{
				State = 2444;
				tolerance_aspect();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SuffixContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARACTER_LITERAL() { return GetToken(vhdlParser.CHARACTER_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(vhdlParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(vhdlParser.ALL, 0); }
		public SuffixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_suffix; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterSuffix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitSuffix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSuffix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SuffixContext suffix() {
		SuffixContext _localctx = new SuffixContext(Context, State);
		EnterRule(_localctx, 474, RULE_suffix);
		try {
			State = 2451;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BASIC_IDENTIFIER:
			case EXTENDED_IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2447;
				identifier();
				}
				break;
			case CHARACTER_LITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2448;
				Match(CHARACTER_LITERAL);
				}
				break;
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2449;
				Match(STRING_LITERAL);
				}
				break;
			case ALL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2450;
				Match(ALL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TargetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AggregateContext aggregate() {
			return GetRuleContext<AggregateContext>(0);
		}
		public TargetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_target; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterTarget(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitTarget(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTarget(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TargetContext target() {
		TargetContext _localctx = new TargetContext(Context, State);
		EnterRule(_localctx, 476, RULE_target);
		try {
			State = 2455;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BASIC_IDENTIFIER:
			case EXTENDED_IDENTIFIER:
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2453;
				name();
				}
				break;
			case LPAREN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2454;
				aggregate();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext[] factor() {
			return GetRuleContexts<FactorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor(int i) {
			return GetRuleContext<FactorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Multiplying_operatorContext[] multiplying_operator() {
			return GetRuleContexts<Multiplying_operatorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Multiplying_operatorContext multiplying_operator(int i) {
			return GetRuleContext<Multiplying_operatorContext>(i);
		}
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 478, RULE_term);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2457;
			factor();
			State = 2463;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,275,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2458;
					multiplying_operator();
					State = 2459;
					factor();
					}
					} 
				}
				State = 2465;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,275,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Terminal_aspectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NameContext[] name() {
			return GetRuleContexts<NameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name(int i) {
			return GetRuleContext<NameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(vhdlParser.TO, 0); }
		public Terminal_aspectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_terminal_aspect; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterTerminal_aspect(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitTerminal_aspect(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerminal_aspect(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Terminal_aspectContext terminal_aspect() {
		Terminal_aspectContext _localctx = new Terminal_aspectContext(Context, State);
		EnterRule(_localctx, 480, RULE_terminal_aspect);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2466;
			name();
			State = 2469;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TO) {
				{
				State = 2467;
				Match(TO);
				State = 2468;
				name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Terminal_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TERMINAL() { return GetToken(vhdlParser.TERMINAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Identifier_listContext identifier_list() {
			return GetRuleContext<Identifier_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(vhdlParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Subnature_indicationContext subnature_indication() {
			return GetRuleContext<Subnature_indicationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(vhdlParser.SEMI, 0); }
		public Terminal_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_terminal_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterTerminal_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitTerminal_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerminal_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Terminal_declarationContext terminal_declaration() {
		Terminal_declarationContext _localctx = new Terminal_declarationContext(Context, State);
		EnterRule(_localctx, 482, RULE_terminal_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2471;
			Match(TERMINAL);
			State = 2472;
			identifier_list();
			State = 2473;
			Match(COLON);
			State = 2474;
			subnature_indication();
			State = 2475;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Through_aspectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Identifier_listContext identifier_list() {
			return GetRuleContext<Identifier_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THROUGH() { return GetToken(vhdlParser.THROUGH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Tolerance_aspectContext tolerance_aspect() {
			return GetRuleContext<Tolerance_aspectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARASGN() { return GetToken(vhdlParser.VARASGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Through_aspectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_through_aspect; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterThrough_aspect(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitThrough_aspect(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThrough_aspect(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Through_aspectContext through_aspect() {
		Through_aspectContext _localctx = new Through_aspectContext(Context, State);
		EnterRule(_localctx, 484, RULE_through_aspect);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2477;
			identifier_list();
			State = 2479;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TOLERANCE) {
				{
				State = 2478;
				tolerance_aspect();
				}
			}

			State = 2483;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==VARASGN) {
				{
				State = 2481;
				Match(VARASGN);
				State = 2482;
				expression();
				}
			}

			State = 2485;
			Match(THROUGH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Timeout_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(vhdlParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Timeout_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_timeout_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterTimeout_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitTimeout_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimeout_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Timeout_clauseContext timeout_clause() {
		Timeout_clauseContext _localctx = new Timeout_clauseContext(Context, State);
		EnterRule(_localctx, 486, RULE_timeout_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2487;
			Match(FOR);
			State = 2488;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Tolerance_aspectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOLERANCE() { return GetToken(vhdlParser.TOLERANCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Tolerance_aspectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tolerance_aspect; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterTolerance_aspect(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitTolerance_aspect(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTolerance_aspect(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Tolerance_aspectContext tolerance_aspect() {
		Tolerance_aspectContext _localctx = new Tolerance_aspectContext(Context, State);
		EnterRule(_localctx, 488, RULE_tolerance_aspect);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2490;
			Match(TOLERANCE);
			State = 2491;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(vhdlParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(vhdlParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(vhdlParser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_definitionContext type_definition() {
			return GetRuleContext<Type_definitionContext>(0);
		}
		public Type_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterType_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitType_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_declarationContext type_declaration() {
		Type_declarationContext _localctx = new Type_declarationContext(Context, State);
		EnterRule(_localctx, 490, RULE_type_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2493;
			Match(TYPE);
			State = 2494;
			identifier();
			State = 2497;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IS) {
				{
				State = 2495;
				Match(IS);
				State = 2496;
				type_definition();
				}
			}

			State = 2499;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_definitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Scalar_type_definitionContext scalar_type_definition() {
			return GetRuleContext<Scalar_type_definitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Composite_type_definitionContext composite_type_definition() {
			return GetRuleContext<Composite_type_definitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Access_type_definitionContext access_type_definition() {
			return GetRuleContext<Access_type_definitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public File_type_definitionContext file_type_definition() {
			return GetRuleContext<File_type_definitionContext>(0);
		}
		public Type_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterType_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitType_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_definitionContext type_definition() {
		Type_definitionContext _localctx = new Type_definitionContext(Context, State);
		EnterRule(_localctx, 492, RULE_type_definition);
		try {
			State = 2505;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case RANGE:
			case LPAREN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2501;
				scalar_type_definition();
				}
				break;
			case ARRAY:
			case RECORD:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2502;
				composite_type_definition();
				}
				break;
			case ACCESS:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2503;
				access_type_definition();
				}
				break;
			case FILE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2504;
				file_type_definition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unconstrained_array_definitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY() { return GetToken(vhdlParser.ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(vhdlParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Index_subtype_definitionContext[] index_subtype_definition() {
			return GetRuleContexts<Index_subtype_definitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Index_subtype_definitionContext index_subtype_definition(int i) {
			return GetRuleContext<Index_subtype_definitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(vhdlParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(vhdlParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Subtype_indicationContext subtype_indication() {
			return GetRuleContext<Subtype_indicationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(vhdlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(vhdlParser.COMMA, i);
		}
		public Unconstrained_array_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unconstrained_array_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterUnconstrained_array_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitUnconstrained_array_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnconstrained_array_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unconstrained_array_definitionContext unconstrained_array_definition() {
		Unconstrained_array_definitionContext _localctx = new Unconstrained_array_definitionContext(Context, State);
		EnterRule(_localctx, 494, RULE_unconstrained_array_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2507;
			Match(ARRAY);
			State = 2508;
			Match(LPAREN);
			State = 2509;
			index_subtype_definition();
			State = 2514;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2510;
				Match(COMMA);
				State = 2511;
				index_subtype_definition();
				}
				}
				State = 2516;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2517;
			Match(RPAREN);
			State = 2518;
			Match(OF);
			State = 2519;
			subtype_indication();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unconstrained_nature_definitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY() { return GetToken(vhdlParser.ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(vhdlParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Index_subtype_definitionContext[] index_subtype_definition() {
			return GetRuleContexts<Index_subtype_definitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Index_subtype_definitionContext index_subtype_definition(int i) {
			return GetRuleContext<Index_subtype_definitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(vhdlParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(vhdlParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Subnature_indicationContext subnature_indication() {
			return GetRuleContext<Subnature_indicationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(vhdlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(vhdlParser.COMMA, i);
		}
		public Unconstrained_nature_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unconstrained_nature_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterUnconstrained_nature_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitUnconstrained_nature_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnconstrained_nature_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unconstrained_nature_definitionContext unconstrained_nature_definition() {
		Unconstrained_nature_definitionContext _localctx = new Unconstrained_nature_definitionContext(Context, State);
		EnterRule(_localctx, 496, RULE_unconstrained_nature_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2521;
			Match(ARRAY);
			State = 2522;
			Match(LPAREN);
			State = 2523;
			index_subtype_definition();
			State = 2528;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2524;
				Match(COMMA);
				State = 2525;
				index_subtype_definition();
				}
				}
				State = 2530;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2531;
			Match(RPAREN);
			State = 2532;
			Match(OF);
			State = 2533;
			subnature_indication();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Use_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USE() { return GetToken(vhdlParser.USE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Selected_nameContext[] selected_name() {
			return GetRuleContexts<Selected_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Selected_nameContext selected_name(int i) {
			return GetRuleContext<Selected_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(vhdlParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(vhdlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(vhdlParser.COMMA, i);
		}
		public Use_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_use_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterUse_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitUse_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUse_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Use_clauseContext use_clause() {
		Use_clauseContext _localctx = new Use_clauseContext(Context, State);
		EnterRule(_localctx, 498, RULE_use_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2535;
			Match(USE);
			State = 2536;
			selected_name();
			State = 2541;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2537;
				Match(COMMA);
				State = 2538;
				selected_name();
				}
				}
				State = 2543;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2544;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_assignment_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TargetContext target() {
			return GetRuleContext<TargetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARASGN() { return GetToken(vhdlParser.VARASGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(vhdlParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Label_colonContext label_colon() {
			return GetRuleContext<Label_colonContext>(0);
		}
		public Variable_assignment_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_assignment_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterVariable_assignment_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitVariable_assignment_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable_assignment_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_assignment_statementContext variable_assignment_statement() {
		Variable_assignment_statementContext _localctx = new Variable_assignment_statementContext(Context, State);
		EnterRule(_localctx, 500, RULE_variable_assignment_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2547;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,284,Context) ) {
			case 1:
				{
				State = 2546;
				label_colon();
				}
				break;
			}
			State = 2549;
			target();
			State = 2550;
			Match(VARASGN);
			State = 2551;
			expression();
			State = 2552;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(vhdlParser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Identifier_listContext identifier_list() {
			return GetRuleContext<Identifier_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(vhdlParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Subtype_indicationContext subtype_indication() {
			return GetRuleContext<Subtype_indicationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(vhdlParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHARED() { return GetToken(vhdlParser.SHARED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARASGN() { return GetToken(vhdlParser.VARASGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Variable_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterVariable_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitVariable_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_declarationContext variable_declaration() {
		Variable_declarationContext _localctx = new Variable_declarationContext(Context, State);
		EnterRule(_localctx, 502, RULE_variable_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2555;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SHARED) {
				{
				State = 2554;
				Match(SHARED);
				}
			}

			State = 2557;
			Match(VARIABLE);
			State = 2558;
			identifier_list();
			State = 2559;
			Match(COLON);
			State = 2560;
			subtype_indication();
			State = 2563;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==VARASGN) {
				{
				State = 2561;
				Match(VARASGN);
				State = 2562;
				expression();
				}
			}

			State = 2565;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Wait_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WAIT() { return GetToken(vhdlParser.WAIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(vhdlParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Label_colonContext label_colon() {
			return GetRuleContext<Label_colonContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sensitivity_clauseContext sensitivity_clause() {
			return GetRuleContext<Sensitivity_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Condition_clauseContext condition_clause() {
			return GetRuleContext<Condition_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Timeout_clauseContext timeout_clause() {
			return GetRuleContext<Timeout_clauseContext>(0);
		}
		public Wait_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_wait_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterWait_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitWait_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWait_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Wait_statementContext wait_statement() {
		Wait_statementContext _localctx = new Wait_statementContext(Context, State);
		EnterRule(_localctx, 504, RULE_wait_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2568;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BASIC_IDENTIFIER || _la==EXTENDED_IDENTIFIER) {
				{
				State = 2567;
				label_colon();
				}
			}

			State = 2570;
			Match(WAIT);
			State = 2572;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ON) {
				{
				State = 2571;
				sensitivity_clause();
				}
			}

			State = 2575;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==UNTIL) {
				{
				State = 2574;
				condition_clause();
				}
			}

			State = 2578;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FOR) {
				{
				State = 2577;
				timeout_clause();
				}
			}

			State = 2580;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WaveformContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Waveform_elementContext[] waveform_element() {
			return GetRuleContexts<Waveform_elementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Waveform_elementContext waveform_element(int i) {
			return GetRuleContext<Waveform_elementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(vhdlParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(vhdlParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNAFFECTED() { return GetToken(vhdlParser.UNAFFECTED, 0); }
		public WaveformContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_waveform; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterWaveform(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitWaveform(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWaveform(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WaveformContext waveform() {
		WaveformContext _localctx = new WaveformContext(Context, State);
		EnterRule(_localctx, 506, RULE_waveform);
		int _la;
		try {
			State = 2591;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ABS:
			case NEW:
			case NOT:
			case NULL_:
			case BASE_LITERAL:
			case BIT_STRING_LITERAL:
			case REAL_LITERAL:
			case BASIC_IDENTIFIER:
			case EXTENDED_IDENTIFIER:
			case CHARACTER_LITERAL:
			case STRING_LITERAL:
			case LPAREN:
			case PLUS:
			case MINUS:
			case INTEGER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2582;
				waveform_element();
				State = 2587;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 2583;
					Match(COMMA);
					State = 2584;
					waveform_element();
					}
					}
					State = 2589;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case UNAFFECTED:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2590;
				Match(UNAFFECTED);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Waveform_elementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AFTER() { return GetToken(vhdlParser.AFTER, 0); }
		public Waveform_elementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_waveform_element; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.EnterWaveform_element(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IvhdlListener typedListener = listener as IvhdlListener;
			if (typedListener != null) typedListener.ExitWaveform_element(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IvhdlVisitor<TResult> typedVisitor = visitor as IvhdlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWaveform_element(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Waveform_elementContext waveform_element() {
		Waveform_elementContext _localctx = new Waveform_elementContext(Context, State);
		EnterRule(_localctx, 508, RULE_waveform_element);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2593;
			expression();
			State = 2596;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AFTER) {
				{
				State = 2594;
				Match(AFTER);
				State = 2595;
				expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\xA4', '\xA29', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x4', '\x30', '\t', '\x30', '\x4', '\x31', '\t', '\x31', '\x4', '\x32', 
		'\t', '\x32', '\x4', '\x33', '\t', '\x33', '\x4', '\x34', '\t', '\x34', 
		'\x4', '\x35', '\t', '\x35', '\x4', '\x36', '\t', '\x36', '\x4', '\x37', 
		'\t', '\x37', '\x4', '\x38', '\t', '\x38', '\x4', '\x39', '\t', '\x39', 
		'\x4', ':', '\t', ':', '\x4', ';', '\t', ';', '\x4', '<', '\t', '<', '\x4', 
		'=', '\t', '=', '\x4', '>', '\t', '>', '\x4', '?', '\t', '?', '\x4', '@', 
		'\t', '@', '\x4', '\x41', '\t', '\x41', '\x4', '\x42', '\t', '\x42', '\x4', 
		'\x43', '\t', '\x43', '\x4', '\x44', '\t', '\x44', '\x4', '\x45', '\t', 
		'\x45', '\x4', '\x46', '\t', '\x46', '\x4', 'G', '\t', 'G', '\x4', 'H', 
		'\t', 'H', '\x4', 'I', '\t', 'I', '\x4', 'J', '\t', 'J', '\x4', 'K', '\t', 
		'K', '\x4', 'L', '\t', 'L', '\x4', 'M', '\t', 'M', '\x4', 'N', '\t', 'N', 
		'\x4', 'O', '\t', 'O', '\x4', 'P', '\t', 'P', '\x4', 'Q', '\t', 'Q', '\x4', 
		'R', '\t', 'R', '\x4', 'S', '\t', 'S', '\x4', 'T', '\t', 'T', '\x4', 'U', 
		'\t', 'U', '\x4', 'V', '\t', 'V', '\x4', 'W', '\t', 'W', '\x4', 'X', '\t', 
		'X', '\x4', 'Y', '\t', 'Y', '\x4', 'Z', '\t', 'Z', '\x4', '[', '\t', '[', 
		'\x4', '\\', '\t', '\\', '\x4', ']', '\t', ']', '\x4', '^', '\t', '^', 
		'\x4', '_', '\t', '_', '\x4', '`', '\t', '`', '\x4', '\x61', '\t', '\x61', 
		'\x4', '\x62', '\t', '\x62', '\x4', '\x63', '\t', '\x63', '\x4', '\x64', 
		'\t', '\x64', '\x4', '\x65', '\t', '\x65', '\x4', '\x66', '\t', '\x66', 
		'\x4', 'g', '\t', 'g', '\x4', 'h', '\t', 'h', '\x4', 'i', '\t', 'i', '\x4', 
		'j', '\t', 'j', '\x4', 'k', '\t', 'k', '\x4', 'l', '\t', 'l', '\x4', 'm', 
		'\t', 'm', '\x4', 'n', '\t', 'n', '\x4', 'o', '\t', 'o', '\x4', 'p', '\t', 
		'p', '\x4', 'q', '\t', 'q', '\x4', 'r', '\t', 'r', '\x4', 's', '\t', 's', 
		'\x4', 't', '\t', 't', '\x4', 'u', '\t', 'u', '\x4', 'v', '\t', 'v', '\x4', 
		'w', '\t', 'w', '\x4', 'x', '\t', 'x', '\x4', 'y', '\t', 'y', '\x4', 'z', 
		'\t', 'z', '\x4', '{', '\t', '{', '\x4', '|', '\t', '|', '\x4', '}', '\t', 
		'}', '\x4', '~', '\t', '~', '\x4', '\x7F', '\t', '\x7F', '\x4', '\x80', 
		'\t', '\x80', '\x4', '\x81', '\t', '\x81', '\x4', '\x82', '\t', '\x82', 
		'\x4', '\x83', '\t', '\x83', '\x4', '\x84', '\t', '\x84', '\x4', '\x85', 
		'\t', '\x85', '\x4', '\x86', '\t', '\x86', '\x4', '\x87', '\t', '\x87', 
		'\x4', '\x88', '\t', '\x88', '\x4', '\x89', '\t', '\x89', '\x4', '\x8A', 
		'\t', '\x8A', '\x4', '\x8B', '\t', '\x8B', '\x4', '\x8C', '\t', '\x8C', 
		'\x4', '\x8D', '\t', '\x8D', '\x4', '\x8E', '\t', '\x8E', '\x4', '\x8F', 
		'\t', '\x8F', '\x4', '\x90', '\t', '\x90', '\x4', '\x91', '\t', '\x91', 
		'\x4', '\x92', '\t', '\x92', '\x4', '\x93', '\t', '\x93', '\x4', '\x94', 
		'\t', '\x94', '\x4', '\x95', '\t', '\x95', '\x4', '\x96', '\t', '\x96', 
		'\x4', '\x97', '\t', '\x97', '\x4', '\x98', '\t', '\x98', '\x4', '\x99', 
		'\t', '\x99', '\x4', '\x9A', '\t', '\x9A', '\x4', '\x9B', '\t', '\x9B', 
		'\x4', '\x9C', '\t', '\x9C', '\x4', '\x9D', '\t', '\x9D', '\x4', '\x9E', 
		'\t', '\x9E', '\x4', '\x9F', '\t', '\x9F', '\x4', '\xA0', '\t', '\xA0', 
		'\x4', '\xA1', '\t', '\xA1', '\x4', '\xA2', '\t', '\xA2', '\x4', '\xA3', 
		'\t', '\xA3', '\x4', '\xA4', '\t', '\xA4', '\x4', '\xA5', '\t', '\xA5', 
		'\x4', '\xA6', '\t', '\xA6', '\x4', '\xA7', '\t', '\xA7', '\x4', '\xA8', 
		'\t', '\xA8', '\x4', '\xA9', '\t', '\xA9', '\x4', '\xAA', '\t', '\xAA', 
		'\x4', '\xAB', '\t', '\xAB', '\x4', '\xAC', '\t', '\xAC', '\x4', '\xAD', 
		'\t', '\xAD', '\x4', '\xAE', '\t', '\xAE', '\x4', '\xAF', '\t', '\xAF', 
		'\x4', '\xB0', '\t', '\xB0', '\x4', '\xB1', '\t', '\xB1', '\x4', '\xB2', 
		'\t', '\xB2', '\x4', '\xB3', '\t', '\xB3', '\x4', '\xB4', '\t', '\xB4', 
		'\x4', '\xB5', '\t', '\xB5', '\x4', '\xB6', '\t', '\xB6', '\x4', '\xB7', 
		'\t', '\xB7', '\x4', '\xB8', '\t', '\xB8', '\x4', '\xB9', '\t', '\xB9', 
		'\x4', '\xBA', '\t', '\xBA', '\x4', '\xBB', '\t', '\xBB', '\x4', '\xBC', 
		'\t', '\xBC', '\x4', '\xBD', '\t', '\xBD', '\x4', '\xBE', '\t', '\xBE', 
		'\x4', '\xBF', '\t', '\xBF', '\x4', '\xC0', '\t', '\xC0', '\x4', '\xC1', 
		'\t', '\xC1', '\x4', '\xC2', '\t', '\xC2', '\x4', '\xC3', '\t', '\xC3', 
		'\x4', '\xC4', '\t', '\xC4', '\x4', '\xC5', '\t', '\xC5', '\x4', '\xC6', 
		'\t', '\xC6', '\x4', '\xC7', '\t', '\xC7', '\x4', '\xC8', '\t', '\xC8', 
		'\x4', '\xC9', '\t', '\xC9', '\x4', '\xCA', '\t', '\xCA', '\x4', '\xCB', 
		'\t', '\xCB', '\x4', '\xCC', '\t', '\xCC', '\x4', '\xCD', '\t', '\xCD', 
		'\x4', '\xCE', '\t', '\xCE', '\x4', '\xCF', '\t', '\xCF', '\x4', '\xD0', 
		'\t', '\xD0', '\x4', '\xD1', '\t', '\xD1', '\x4', '\xD2', '\t', '\xD2', 
		'\x4', '\xD3', '\t', '\xD3', '\x4', '\xD4', '\t', '\xD4', '\x4', '\xD5', 
		'\t', '\xD5', '\x4', '\xD6', '\t', '\xD6', '\x4', '\xD7', '\t', '\xD7', 
		'\x4', '\xD8', '\t', '\xD8', '\x4', '\xD9', '\t', '\xD9', '\x4', '\xDA', 
		'\t', '\xDA', '\x4', '\xDB', '\t', '\xDB', '\x4', '\xDC', '\t', '\xDC', 
		'\x4', '\xDD', '\t', '\xDD', '\x4', '\xDE', '\t', '\xDE', '\x4', '\xDF', 
		'\t', '\xDF', '\x4', '\xE0', '\t', '\xE0', '\x4', '\xE1', '\t', '\xE1', 
		'\x4', '\xE2', '\t', '\xE2', '\x4', '\xE3', '\t', '\xE3', '\x4', '\xE4', 
		'\t', '\xE4', '\x4', '\xE5', '\t', '\xE5', '\x4', '\xE6', '\t', '\xE6', 
		'\x4', '\xE7', '\t', '\xE7', '\x4', '\xE8', '\t', '\xE8', '\x4', '\xE9', 
		'\t', '\xE9', '\x4', '\xEA', '\t', '\xEA', '\x4', '\xEB', '\t', '\xEB', 
		'\x4', '\xEC', '\t', '\xEC', '\x4', '\xED', '\t', '\xED', '\x4', '\xEE', 
		'\t', '\xEE', '\x4', '\xEF', '\t', '\xEF', '\x4', '\xF0', '\t', '\xF0', 
		'\x4', '\xF1', '\t', '\xF1', '\x4', '\xF2', '\t', '\xF2', '\x4', '\xF3', 
		'\t', '\xF3', '\x4', '\xF4', '\t', '\xF4', '\x4', '\xF5', '\t', '\xF5', 
		'\x4', '\xF6', '\t', '\xF6', '\x4', '\xF7', '\t', '\xF7', '\x4', '\xF8', 
		'\t', '\xF8', '\x4', '\xF9', '\t', '\xF9', '\x4', '\xFA', '\t', '\xFA', 
		'\x4', '\xFB', '\t', '\xFB', '\x4', '\xFC', '\t', '\xFC', '\x4', '\xFD', 
		'\t', '\xFD', '\x4', '\xFE', '\t', '\xFE', '\x4', '\xFF', '\t', '\xFF', 
		'\x4', '\x100', '\t', '\x100', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', 
		'\x208', '\n', '\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', '\x20C', 
		'\n', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x5', 
		'\x5', '\x212', '\n', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', 
		'\a', '\x21C', '\n', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\a', '\t', '\x224', '\n', '\t', '\f', 
		'\t', '\xE', '\t', '\x227', '\v', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x5', '\n', '\x22F', '\n', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x5', '\n', '\x234', '\n', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x5', '\v', '\x23B', '\n', '\v', '\x3', '\f', '\x3', '\f', '\x5', '\f', 
		'\x23F', '\n', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x5', '\r', 
		'\x244', '\n', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x5', '\xE', '\x250', '\n', '\xE', '\x3', '\xE', 
		'\x5', '\xE', '\x253', '\n', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xF', '\a', '\xF', '\x258', '\n', '\xF', '\f', '\xF', '\xE', '\xF', '\x25B', 
		'\v', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', 
		'\x260', '\n', '\x10', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', '\x264', 
		'\n', '\x10', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', '\x268', '\n', 
		'\x10', '\x3', '\x10', '\x5', '\x10', '\x26B', '\n', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', 
		'\x272', '\n', '\x10', '\x3', '\x11', '\a', '\x11', '\x275', '\n', '\x11', 
		'\f', '\x11', '\xE', '\x11', '\x278', '\v', '\x11', '\x3', '\x12', '\x3', 
		'\x12', '\x5', '\x12', '\x27C', '\n', '\x12', '\x3', '\x13', '\x3', '\x13', 
		'\x5', '\x13', '\x280', '\n', '\x13', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x5', '\x14', '\x286', '\n', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x5', '\x14', '\x28A', '\n', '\x14', '\x3', '\x15', '\x5', 
		'\x15', '\x28D', '\n', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x5', '\x16', '\x295', '\n', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\a', '\x17', '\x29C', '\n', '\x17', '\f', '\x17', '\xE', '\x17', 
		'\x29F', '\v', '\x17', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', 
		'\x18', '\x3', '\x18', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', 
		'\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x5', '\x19', '\x2AD', 
		'\n', '\x19', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', 
		'\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1B', 
		'\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1C', '\x3', '\x1C', '\x5', '\x1C', 
		'\x2BC', '\n', '\x1C', '\x3', '\x1C', '\x5', '\x1C', '\x2BF', '\n', '\x1C', 
		'\x3', '\x1C', '\x5', '\x1C', '\x2C2', '\n', '\x1C', '\x3', '\x1D', '\x3', 
		'\x1D', '\x3', '\x1D', '\a', '\x1D', '\x2C7', '\n', '\x1D', '\f', '\x1D', 
		'\xE', '\x1D', '\x2CA', '\v', '\x1D', '\x3', '\x1D', '\a', '\x1D', '\x2CD', 
		'\n', '\x1D', '\f', '\x1D', '\xE', '\x1D', '\x2D0', '\v', '\x1D', '\x3', 
		'\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1E', '\x3', 
		'\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', 
		'\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', 
		'\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', 
		'\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', 
		'\x1E', '\x5', '\x1E', '\x2EC', '\n', '\x1E', '\x3', '\x1F', '\a', '\x1F', 
		'\x2EF', '\n', '\x1F', '\f', '\x1F', '\xE', '\x1F', '\x2F2', '\v', '\x1F', 
		'\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x5', ' ', '\x2F8', '\n', 
		' ', '\x5', ' ', '\x2FA', '\n', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', 
		'\x3', ' ', '\x5', ' ', '\x300', '\n', ' ', '\x5', ' ', '\x302', '\n', 
		' ', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', '!', '\x5', 
		'!', '\x309', '\n', '!', '\x3', '!', '\x5', '!', '\x30C', '\n', '!', '\x3', 
		'\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', 
		'\x5', '\"', '\x314', '\n', '\"', '\x3', '\"', '\x5', '\"', '\x317', '\n', 
		'\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', 
		'\x3', '\"', '\x3', '\"', '\x5', '\"', '\x320', '\n', '\"', '\x3', '\"', 
		'\x3', '\"', '\x3', '#', '\a', '#', '\x325', '\n', '#', '\f', '#', '\xE', 
		'#', '\x328', '\v', '#', '\x3', '$', '\x3', '$', '\x5', '$', '\x32C', 
		'\n', '$', '\x3', '$', '\x5', '$', '\x32F', '\n', '$', '\x3', '$', '\x3', 
		'$', '\x3', '$', '\x3', '%', '\x5', '%', '\x335', '\n', '%', '\x3', '%', 
		'\x3', '%', '\x3', '%', '\x3', '%', '\x3', '&', '\x3', '&', '\x3', '&', 
		'\a', '&', '\x33E', '\n', '&', '\f', '&', '\xE', '&', '\x341', '\v', '&', 
		'\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '(', '\x5', 
		'(', '\x348', '\n', '(', '\x3', '(', '\x3', '(', '\x5', '(', '\x34C', 
		'\n', '(', '\x3', '(', '\x3', '(', '\x5', '(', '\x350', '\n', '(', '\x3', 
		'(', '\x3', '(', '\x3', ')', '\x5', ')', '\x355', '\n', ')', '\x3', ')', 
		'\x3', ')', '\x3', ')', '\x3', ')', '\x6', ')', '\x35B', '\n', ')', '\r', 
		')', '\xE', ')', '\x35C', '\x3', ')', '\x3', ')', '\x3', ')', '\x5', ')', 
		'\x362', '\n', ')', '\x3', ')', '\x3', ')', '\x3', '*', '\x3', '*', '\x3', 
		'*', '\x3', '*', '\x3', '*', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', 
		'+', '\x5', '+', '\x36F', '\n', '+', '\x3', ',', '\x3', ',', '\x3', ',', 
		'\a', ',', '\x374', '\n', ',', '\f', ',', '\xE', ',', '\x377', '\v', ',', 
		'\x3', '-', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', '-', '\x5', '-', 
		'\x37E', '\n', '-', '\x3', '-', '\x5', '-', '\x381', '\n', '-', '\x3', 
		'-', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', '.', '\x3', '.', '\x3', 
		'.', '\x5', '.', '\x38A', '\n', '.', '\x3', '.', '\x5', '.', '\x38D', 
		'\n', '.', '\x3', '.', '\x5', '.', '\x390', '\n', '.', '\x3', '.', '\x3', 
		'.', '\x3', '.', '\x5', '.', '\x395', '\n', '.', '\x3', '.', '\x3', '.', 
		'\x3', '/', '\x3', '/', '\x3', '/', '\x5', '/', '\x39C', '\n', '/', '\x3', 
		'/', '\x5', '/', '\x39F', '\n', '/', '\x3', '/', '\x3', '/', '\x3', '\x30', 
		'\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x31', '\x3', '\x31', 
		'\x5', '\x31', '\x3A9', '\n', '\x31', '\x3', '\x32', '\x3', '\x32', '\x5', 
		'\x32', '\x3AD', '\n', '\x32', '\x3', '\x33', '\x5', '\x33', '\x3B0', 
		'\n', '\x33', '\x3', '\x33', '\x5', '\x33', '\x3B3', '\n', '\x33', '\x3', 
		'\x33', '\x3', '\x33', '\x3', '\x33', '\x3', '\x34', '\x5', '\x34', '\x3B9', 
		'\n', '\x34', '\x3', '\x34', '\x3', '\x34', '\x5', '\x34', '\x3BD', '\n', 
		'\x34', '\x3', '\x34', '\x5', '\x34', '\x3C0', '\n', '\x34', '\x3', '\x34', 
		'\x3', '\x34', '\x5', '\x34', '\x3C4', '\n', '\x34', '\x3', '\x34', '\x3', 
		'\x34', '\x3', '\x35', '\x5', '\x35', '\x3C9', '\n', '\x35', '\x3', '\x35', 
		'\x5', '\x35', '\x3CC', '\n', '\x35', '\x3', '\x35', '\x3', '\x35', '\x3', 
		'\x35', '\x3', '\x36', '\x5', '\x36', '\x3D2', '\n', '\x36', '\x3', '\x36', 
		'\x5', '\x36', '\x3D5', '\n', '\x36', '\x3', '\x36', '\x3', '\x36', '\x5', 
		'\x36', '\x3D9', '\n', '\x36', '\x3', '\x37', '\x3', '\x37', '\x3', '\x38', 
		'\x3', '\x38', '\x3', '\x38', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', 
		'\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', ':', '\x3', ':', '\x3', 
		':', '\x3', ':', '\x3', ':', '\x5', ':', '\x3EB', '\n', ':', '\x5', ':', 
		'\x3ED', '\n', ':', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', 
		';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x5', ';', '\x3F8', 
		'\n', ';', '\x3', ';', '\x5', ';', '\x3FB', '\n', ';', '\x3', ';', '\x3', 
		';', '\x3', '<', '\x3', '<', '\x3', '<', '\x5', '<', '\x402', '\n', '<', 
		'\x3', '=', '\a', '=', '\x405', '\n', '=', '\f', '=', '\xE', '=', '\x408', 
		'\v', '=', '\x3', '>', '\x3', '>', '\x5', '>', '\x40C', '\n', '>', '\x3', 
		'?', '\x3', '?', '\x3', '?', '\x3', '?', '\x3', '?', '\x3', '@', '\x3', 
		'@', '\x3', '@', '\x3', '@', '\x3', '@', '\x3', '@', '\x5', '@', '\x419', 
		'\n', '@', '\x3', '@', '\x3', '@', '\x3', '\x41', '\x3', '\x41', '\x3', 
		'\x41', '\x3', '\x41', '\x3', '\x41', '\x3', '\x42', '\x3', '\x42', '\x3', 
		'\x42', '\x3', '\x42', '\x3', '\x42', '\x3', '\x43', '\x3', '\x43', '\x5', 
		'\x43', '\x429', '\n', '\x43', '\x3', '\x44', '\a', '\x44', '\x42C', '\n', 
		'\x44', '\f', '\x44', '\xE', '\x44', '\x42F', '\v', '\x44', '\x3', '\x45', 
		'\x3', '\x45', '\x5', '\x45', '\x433', '\n', '\x45', '\x3', '\x46', '\x3', 
		'\x46', '\x3', '\x46', '\x5', '\x46', '\x438', '\n', '\x46', '\x3', '\x46', 
		'\x5', '\x46', '\x43B', '\n', '\x46', '\x3', 'G', '\a', 'G', '\x43E', 
		'\n', 'G', '\f', 'G', '\xE', 'G', '\x441', '\v', 'G', '\x3', 'G', '\x3', 
		'G', '\x3', 'H', '\x3', 'H', '\x3', 'H', '\x3', 'I', '\x3', 'I', '\x5', 
		'I', '\x44A', '\n', 'I', '\x3', 'J', '\x3', 'J', '\x3', 'K', '\x3', 'K', 
		'\x3', 'K', '\x3', 'K', '\x3', 'K', '\x3', 'K', '\x3', 'L', '\x3', 'L', 
		'\x5', 'L', '\x456', '\n', 'L', '\x3', 'M', '\x3', 'M', '\x3', 'M', '\x5', 
		'M', '\x45B', '\n', 'M', '\x3', 'M', '\x3', 'M', '\x3', 'N', '\x3', 'N', 
		'\x3', 'N', '\x3', 'N', '\x3', 'N', '\x3', 'O', '\x3', 'O', '\x3', 'P', 
		'\x3', 'P', '\x3', 'Q', '\x3', 'Q', '\x3', 'Q', '\x3', 'Q', '\x3', 'Q', 
		'\x3', 'Q', '\x5', 'Q', '\x46E', '\n', 'Q', '\x3', 'Q', '\x3', 'Q', '\x3', 
		'Q', '\x5', 'Q', '\x473', '\n', 'Q', '\x3', 'R', '\x3', 'R', '\x3', 'S', 
		'\x3', 'S', '\x5', 'S', '\x479', '\n', 'S', '\x3', 'T', '\x3', 'T', '\x3', 
		'T', '\a', 'T', '\x47E', '\n', 'T', '\f', 'T', '\xE', 'T', '\x481', '\v', 
		'T', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 
		'U', '\x3', 'U', '\x5', 'U', '\x48A', '\n', 'U', '\x3', 'U', '\x3', 'U', 
		'\x5', 'U', '\x48E', '\n', 'U', '\x3', 'U', '\x5', 'U', '\x491', '\n', 
		'U', '\x3', 'U', '\x3', 'U', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 
		'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 
		'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 
		'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\x5', 'V', '\x4A9', 
		'\n', 'V', '\x3', 'W', '\a', 'W', '\x4AC', '\n', 'W', '\f', 'W', '\xE', 
		'W', '\x4AF', '\v', 'W', '\x3', 'X', '\x3', 'X', '\x5', 'X', '\x4B3', 
		'\n', 'X', '\x3', 'Y', '\x5', 'Y', '\x4B6', '\n', 'Y', '\x3', 'Y', '\x5', 
		'Y', '\x4B9', '\n', 'Y', '\x3', 'Z', '\x3', 'Z', '\x3', 'Z', '\a', 'Z', 
		'\x4BE', '\n', 'Z', '\f', 'Z', '\xE', 'Z', '\x4C1', '\v', 'Z', '\x3', 
		'Z', '\x3', 'Z', '\x5', 'Z', '\x4C5', '\n', 'Z', '\x3', '[', '\x3', '[', 
		'\x3', '[', '\x3', '[', '\x3', '\\', '\x3', '\\', '\x3', '\\', '\x5', 
		'\\', '\x4CE', '\n', '\\', '\x3', ']', '\a', ']', '\x4D1', '\n', ']', 
		'\f', ']', '\xE', ']', '\x4D4', '\v', ']', '\x3', '^', '\x3', '^', '\x3', 
		'^', '\x5', '^', '\x4D9', '\n', '^', '\x3', '_', '\x3', '_', '\x5', '_', 
		'\x4DD', '\n', '_', '\x3', '`', '\x3', '`', '\x3', '`', '\x3', '`', '\a', 
		'`', '\x4E3', '\n', '`', '\f', '`', '\xE', '`', '\x4E6', '\v', '`', '\x3', 
		'`', '\x3', '`', '\x3', '\x61', '\x5', '\x61', '\x4EB', '\n', '\x61', 
		'\x3', '\x61', '\x3', '\x61', '\x5', '\x61', '\x4EF', '\n', '\x61', '\x3', 
		'\x61', '\x3', '\x61', '\x5', '\x61', '\x4F3', '\n', '\x61', '\x3', '\x61', 
		'\x3', '\x61', '\x3', '\x62', '\x3', '\x62', '\x3', '\x62', '\x3', '\x62', 
		'\a', '\x62', '\x4FB', '\n', '\x62', '\f', '\x62', '\xE', '\x62', '\x4FE', 
		'\v', '\x62', '\x3', '\x63', '\x3', '\x63', '\x3', '\x63', '\x5', '\x63', 
		'\x503', '\n', '\x63', '\x3', '\x63', '\x3', '\x63', '\x3', '\x63', '\x3', 
		'\x63', '\x5', '\x63', '\x509', '\n', '\x63', '\x3', '\x64', '\x3', '\x64', 
		'\x3', '\x64', '\x3', '\x64', '\x3', '\x64', '\x5', '\x64', '\x510', '\n', 
		'\x64', '\x3', '\x64', '\x3', '\x64', '\x3', '\x65', '\x3', '\x65', '\x3', 
		'\x66', '\x3', '\x66', '\x5', '\x66', '\x518', '\n', '\x66', '\x3', '\x66', 
		'\x3', '\x66', '\x3', '\x66', '\x3', 'g', '\x3', 'g', '\x3', 'g', '\x3', 
		'g', '\x3', 'h', '\x3', 'h', '\x3', 'i', '\x3', 'i', '\x3', 'i', '\x3', 
		'i', '\x3', 'i', '\x3', 'i', '\x5', 'i', '\x529', '\n', 'i', '\x3', 'j', 
		'\x3', 'j', '\x3', 'j', '\x3', 'j', '\x3', 'j', '\x3', 'j', '\x5', 'j', 
		'\x531', '\n', 'j', '\x3', 'j', '\x3', 'j', '\x3', 'k', '\x3', 'k', '\x3', 
		'k', '\x3', 'k', '\a', 'k', '\x539', '\n', 'k', '\f', 'k', '\xE', 'k', 
		'\x53C', '\v', 'k', '\x3', 'k', '\x5', 'k', '\x53F', '\n', 'k', '\x3', 
		'k', '\a', 'k', '\x542', '\n', 'k', '\f', 'k', '\xE', 'k', '\x545', '\v', 
		'k', '\x3', 'k', '\x3', 'k', '\x3', 'k', '\x5', 'k', '\x54A', '\n', 'k', 
		'\x3', 'k', '\x3', 'k', '\x3', 'l', '\x3', 'l', '\x3', 'l', '\x3', 'l', 
		'\x5', 'l', '\x552', '\n', 'l', '\x3', 'm', '\x3', 'm', '\x3', 'm', '\x3', 
		'm', '\x3', 'm', '\x3', 'm', '\x3', 'n', '\x3', 'n', '\x3', 'n', '\a', 
		'n', '\x55D', '\n', 'n', '\f', 'n', '\xE', 'n', '\x560', '\v', 'n', '\x3', 
		'o', '\x3', 'o', '\x3', 'o', '\x3', 'o', '\x3', 'o', '\x3', 'o', '\x3', 
		'p', '\x3', 'p', '\x5', 'p', '\x56A', '\n', 'p', '\x3', 'q', '\x3', 'q', 
		'\x3', 'q', '\a', 'q', '\x56F', '\n', 'q', '\f', 'q', '\xE', 'q', '\x572', 
		'\v', 'q', '\x3', 'r', '\x3', 'r', '\x3', 'r', '\x3', 'r', '\x3', 'r', 
		'\x3', 'r', '\x3', 'r', '\x3', 'r', '\x3', 's', '\x3', 's', '\x3', 's', 
		'\x3', 's', '\x3', 's', '\x3', 's', '\x3', 's', '\x3', 's', '\x3', 't', 
		'\x3', 't', '\x3', 't', '\x3', 't', '\x3', 'u', '\x3', 'u', '\x3', 'v', 
		'\x3', 'v', '\x3', 'v', '\a', 'v', '\x58D', '\n', 'v', '\f', 'v', '\xE', 
		'v', '\x590', '\v', 'v', '\x3', 'w', '\x5', 'w', '\x593', '\n', 'w', '\x3', 
		'w', '\x3', 'w', '\x3', 'w', '\x3', 'w', '\x3', 'w', '\x3', 'w', '\x3', 
		'w', '\x3', 'w', '\x3', 'w', '\a', 'w', '\x59E', '\n', 'w', '\f', 'w', 
		'\xE', 'w', '\x5A1', '\v', 'w', '\x3', 'w', '\x3', 'w', '\x5', 'w', '\x5A5', 
		'\n', 'w', '\x3', 'w', '\x3', 'w', '\x3', 'w', '\x5', 'w', '\x5AA', '\n', 
		'w', '\x3', 'w', '\x3', 'w', '\x3', 'x', '\x3', 'x', '\x3', 'x', '\x3', 
		'x', '\a', 'x', '\x5B2', '\n', 'x', '\f', 'x', '\xE', 'x', '\x5B5', '\v', 
		'x', '\x3', 'x', '\x3', 'x', '\x3', 'y', '\x3', 'y', '\x5', 'y', '\x5BB', 
		'\n', 'y', '\x3', 'z', '\x3', 'z', '\x3', 'z', '\x3', 'z', '\x3', '{', 
		'\x5', '{', '\x5C2', '\n', '{', '\x3', '{', '\x3', '{', '\x3', '{', '\x3', 
		'{', '\x3', '{', '\x3', '{', '\x3', '{', '\x5', '{', '\x5CB', '\n', '{', 
		'\x3', '{', '\x3', '{', '\x5', '{', '\x5CF', '\n', '{', '\x3', '|', '\x3', 
		'|', '\x3', '|', '\a', '|', '\x5D4', '\n', '|', '\f', '|', '\xE', '|', 
		'\x5D7', '\v', '|', '\x3', '|', '\x3', '|', '\x5', '|', '\x5DB', '\n', 
		'|', '\x3', '}', '\x5', '}', '\x5DE', '\n', '}', '\x3', '}', '\x3', '}', 
		'\x3', '}', '\x5', '}', '\x5E3', '\n', '}', '\x3', '}', '\x3', '}', '\x3', 
		'}', '\x5', '}', '\x5E8', '\n', '}', '\x3', '~', '\x3', '~', '\x3', '~', 
		'\x3', '~', '\x3', '~', '\x3', '~', '\x5', '~', '\x5F0', '\n', '~', '\x3', 
		'\x7F', '\x3', '\x7F', '\x3', '\x80', '\x3', '\x80', '\x3', '\x80', '\x3', 
		'\x80', '\x3', '\x80', '\x3', '\x81', '\x3', '\x81', '\x3', '\x81', '\a', 
		'\x81', '\x5FC', '\n', '\x81', '\f', '\x81', '\xE', '\x81', '\x5FF', '\v', 
		'\x81', '\x3', '\x82', '\x3', '\x82', '\x3', '\x82', '\a', '\x82', '\x604', 
		'\n', '\x82', '\f', '\x82', '\xE', '\x82', '\x607', '\v', '\x82', '\x3', 
		'\x83', '\x3', '\x83', '\x3', '\x83', '\a', '\x83', '\x60C', '\n', '\x83', 
		'\f', '\x83', '\xE', '\x83', '\x60F', '\v', '\x83', '\x3', '\x84', '\x3', 
		'\x84', '\x3', '\x84', '\x3', '\x84', '\x5', '\x84', '\x615', '\n', '\x84', 
		'\x3', '\x84', '\x3', '\x84', '\x3', '\x84', '\x5', '\x84', '\x61A', '\n', 
		'\x84', '\x3', '\x85', '\x3', '\x85', '\x3', '\x85', '\x5', '\x85', '\x61F', 
		'\n', '\x85', '\x3', '\x85', '\x3', '\x85', '\x5', '\x85', '\x623', '\n', 
		'\x85', '\x3', '\x85', '\x3', '\x85', '\x5', '\x85', '\x627', '\n', '\x85', 
		'\x3', '\x86', '\x3', '\x86', '\x3', '\x86', '\x3', '\x86', '\x5', '\x86', 
		'\x62D', '\n', '\x86', '\x3', '\x86', '\x3', '\x86', '\x5', '\x86', '\x631', 
		'\n', '\x86', '\x3', '\x86', '\x3', '\x86', '\x5', '\x86', '\x635', '\n', 
		'\x86', '\x3', '\x87', '\x3', '\x87', '\x3', '\x87', '\x3', '\x87', '\x3', 
		'\x87', '\x3', '\x88', '\x5', '\x88', '\x63D', '\n', '\x88', '\x3', '\x88', 
		'\x3', '\x88', '\x3', '\x88', '\x5', '\x88', '\x642', '\n', '\x88', '\x3', 
		'\x88', '\x3', '\x88', '\x3', '\x88', '\x5', '\x88', '\x647', '\n', '\x88', 
		'\x3', '\x89', '\x3', '\x89', '\x3', '\x89', '\x3', '\x89', '\x5', '\x89', 
		'\x64D', '\n', '\x89', '\x3', '\x8A', '\x3', '\x8A', '\x3', '\x8A', '\x3', 
		'\x8B', '\x3', '\x8B', '\x3', '\x8B', '\x3', '\x8B', '\x3', '\x8C', '\x3', 
		'\x8C', '\x5', '\x8C', '\x658', '\n', '\x8C', '\x3', '\x8D', '\x3', '\x8D', 
		'\x3', '\x8D', '\x3', '\x8D', '\x3', '\x8D', '\x5', '\x8D', '\x65F', '\n', 
		'\x8D', '\x3', '\x8E', '\x3', '\x8E', '\x3', '\x8F', '\x3', '\x8F', '\x3', 
		'\x8F', '\a', '\x8F', '\x666', '\n', '\x8F', '\f', '\x8F', '\xE', '\x8F', 
		'\x669', '\v', '\x8F', '\x3', '\x90', '\x3', '\x90', '\x3', '\x91', '\x5', 
		'\x91', '\x66E', '\n', '\x91', '\x3', '\x91', '\x5', '\x91', '\x671', 
		'\n', '\x91', '\x3', '\x91', '\x3', '\x91', '\x3', '\x91', '\x3', '\x91', 
		'\x3', '\x91', '\x5', '\x91', '\x678', '\n', '\x91', '\x3', '\x91', '\x3', 
		'\x91', '\x3', '\x92', '\x3', '\x92', '\x3', '\x93', '\x3', '\x93', '\x3', 
		'\x94', '\x3', '\x94', '\x5', '\x94', '\x682', '\n', '\x94', '\x3', '\x94', 
		'\a', '\x94', '\x685', '\n', '\x94', '\f', '\x94', '\xE', '\x94', '\x688', 
		'\v', '\x94', '\x3', '\x95', '\x3', '\x95', '\x3', '\x95', '\x3', '\x95', 
		'\x5', '\x95', '\x68E', '\n', '\x95', '\x3', '\x96', '\x3', '\x96', '\x3', 
		'\x96', '\a', '\x96', '\x693', '\n', '\x96', '\f', '\x96', '\xE', '\x96', 
		'\x696', '\v', '\x96', '\x3', '\x97', '\x3', '\x97', '\x6', '\x97', '\x69A', 
		'\n', '\x97', '\r', '\x97', '\xE', '\x97', '\x69B', '\x3', '\x98', '\x3', 
		'\x98', '\x3', '\x98', '\x3', '\x98', '\x3', '\x99', '\x3', '\x99', '\x3', 
		'\x99', '\x3', '\x99', '\x3', '\x9A', '\x5', '\x9A', '\x6A7', '\n', '\x9A', 
		'\x3', '\x9A', '\x3', '\x9A', '\x3', '\x9A', '\x3', '\x9A', '\x3', '\x9A', 
		'\x3', '\x9A', '\x5', '\x9A', '\x6AF', '\n', '\x9A', '\x3', '\x9B', '\x3', 
		'\x9B', '\x3', '\x9B', '\x3', '\x9B', '\x3', '\x9B', '\x3', '\x9B', '\x3', 
		'\x9C', '\x3', '\x9C', '\x5', '\x9C', '\x6B9', '\n', '\x9C', '\x3', '\x9D', 
		'\x3', '\x9D', '\x3', '\x9D', '\x3', '\x9D', '\x3', '\x9E', '\x5', '\x9E', 
		'\x6C0', '\n', '\x9E', '\x3', '\x9E', '\x3', '\x9E', '\x5', '\x9E', '\x6C4', 
		'\n', '\x9E', '\x3', '\x9E', '\x3', '\x9E', '\x5', '\x9E', '\x6C8', '\n', 
		'\x9E', '\x3', '\x9E', '\x3', '\x9E', '\x3', '\x9F', '\x3', '\x9F', '\x5', 
		'\x9F', '\x6CE', '\n', '\x9F', '\x3', '\xA0', '\x3', '\xA0', '\x3', '\xA0', 
		'\x3', '\xA0', '\x3', '\xA0', '\x3', '\xA0', '\x5', '\xA0', '\x6D6', '\n', 
		'\xA0', '\x3', '\xA1', '\x5', '\xA1', '\x6D9', '\n', '\xA1', '\x3', '\xA1', 
		'\x5', '\xA1', '\x6DC', '\n', '\xA1', '\x3', '\xA2', '\x3', '\xA2', '\x3', 
		'\xA2', '\x3', '\xA2', '\x3', '\xA2', '\x3', '\xA2', '\x3', '\xA2', '\x3', 
		'\xA2', '\x5', '\xA2', '\x6E6', '\n', '\xA2', '\x3', '\xA2', '\x5', '\xA2', 
		'\x6E9', '\n', '\xA2', '\x3', '\xA2', '\x3', '\xA2', '\x3', '\xA3', '\x3', 
		'\xA3', '\x3', '\xA3', '\x3', '\xA3', '\x3', '\xA3', '\x3', '\xA3', '\x3', 
		'\xA3', '\x3', '\xA3', '\x3', '\xA3', '\x3', '\xA3', '\x3', '\xA3', '\x5', 
		'\xA3', '\x6F8', '\n', '\xA3', '\x3', '\xA4', '\a', '\xA4', '\x6FB', '\n', 
		'\xA4', '\f', '\xA4', '\xE', '\xA4', '\x6FE', '\v', '\xA4', '\x3', '\xA5', 
		'\x3', '\xA5', '\x3', '\xA5', '\x3', '\xA5', '\x3', '\xA5', '\x3', '\xA5', 
		'\x5', '\xA5', '\x706', '\n', '\xA5', '\x3', '\xA5', '\x5', '\xA5', '\x709', 
		'\n', '\xA5', '\x3', '\xA5', '\x3', '\xA5', '\x3', '\xA6', '\x3', '\xA6', 
		'\x3', '\xA6', '\x3', '\xA6', '\x3', '\xA6', '\x3', '\xA6', '\x3', '\xA6', 
		'\x3', '\xA6', '\x3', '\xA6', '\x3', '\xA6', '\x3', '\xA6', '\x3', '\xA6', 
		'\x3', '\xA6', '\x3', '\xA6', '\x3', '\xA6', '\x3', '\xA6', '\x3', '\xA6', 
		'\x3', '\xA6', '\x3', '\xA6', '\x5', '\xA6', '\x720', '\n', '\xA6', '\x3', 
		'\xA7', '\a', '\xA7', '\x723', '\n', '\xA7', '\f', '\xA7', '\xE', '\xA7', 
		'\x726', '\v', '\xA7', '\x3', '\xA8', '\x3', '\xA8', '\x3', '\xA8', '\x3', 
		'\xA8', '\x3', '\xA9', '\x3', '\xA9', '\x3', '\xA9', '\x3', '\xAA', '\x3', 
		'\xAA', '\x3', '\xAA', '\x3', '\xAA', '\a', '\xAA', '\x733', '\n', '\xAA', 
		'\f', '\xAA', '\xE', '\xAA', '\x736', '\v', '\xAA', '\x3', '\xAA', '\x3', 
		'\xAA', '\x3', '\xAA', '\x5', '\xAA', '\x73B', '\n', '\xAA', '\x3', '\xAB', 
		'\x3', '\xAB', '\x3', '\xAB', '\x3', '\xAB', '\x3', '\xAB', '\x3', '\xAB', 
		'\x3', '\xAC', '\x3', '\xAC', '\x3', '\xAD', '\x3', '\xAD', '\x3', '\xAD', 
		'\x3', '\xAD', '\x3', '\xAD', '\x3', '\xAD', '\x3', '\xAE', '\x3', '\xAE', 
		'\x3', '\xAE', '\x3', '\xAE', '\x3', '\xAE', '\x3', '\xAE', '\x3', '\xAE', 
		'\x3', '\xAE', '\x3', '\xAE', '\x5', '\xAE', '\x754', '\n', '\xAE', '\x3', 
		'\xAF', '\x3', '\xAF', '\x3', '\xAF', '\x5', '\xAF', '\x759', '\n', '\xAF', 
		'\x3', '\xB0', '\x3', '\xB0', '\x3', '\xB0', '\x3', '\xB0', '\x3', '\xB0', 
		'\x3', '\xB0', '\x3', '\xB0', '\x3', '\xB0', '\x3', '\xB0', '\x3', '\xB0', 
		'\x3', '\xB0', '\x3', '\xB0', '\x5', '\xB0', '\x767', '\n', '\xB0', '\x3', 
		'\xB1', '\a', '\xB1', '\x76A', '\n', '\xB1', '\f', '\xB1', '\xE', '\xB1', 
		'\x76D', '\v', '\xB1', '\x3', '\xB2', '\a', '\xB2', '\x770', '\n', '\xB2', 
		'\f', '\xB2', '\xE', '\xB2', '\x773', '\v', '\xB2', '\x3', '\xB3', '\x3', 
		'\xB3', '\x3', '\xB3', '\x3', '\xB3', '\x3', '\xB3', '\x5', '\xB3', '\x77A', 
		'\n', '\xB3', '\x3', '\xB4', '\x5', '\xB4', '\x77D', '\n', '\xB4', '\x3', 
		'\xB4', '\x3', '\xB4', '\x3', '\xB4', '\x3', '\xB5', '\x3', '\xB5', '\x3', 
		'\xB5', '\x3', '\xB5', '\x3', '\xB5', '\x3', '\xB5', '\x3', '\xB5', '\x3', 
		'\xB5', '\x3', '\xB5', '\x3', '\xB5', '\x3', '\xB5', '\x3', '\xB5', '\x3', 
		'\xB5', '\x5', '\xB5', '\x78F', '\n', '\xB5', '\x3', '\xB6', '\a', '\xB6', 
		'\x792', '\n', '\xB6', '\f', '\xB6', '\xE', '\xB6', '\x795', '\v', '\xB6', 
		'\x3', '\xB7', '\x5', '\xB7', '\x798', '\n', '\xB7', '\x3', '\xB7', '\x5', 
		'\xB7', '\x79B', '\n', '\xB7', '\x3', '\xB7', '\x3', '\xB7', '\x3', '\xB7', 
		'\x3', '\xB7', '\x3', '\xB7', '\x5', '\xB7', '\x7A2', '\n', '\xB7', '\x3', 
		'\xB7', '\x5', '\xB7', '\x7A5', '\n', '\xB7', '\x3', '\xB7', '\x3', '\xB7', 
		'\x3', '\xB7', '\x3', '\xB7', '\x3', '\xB7', '\x5', '\xB7', '\x7AC', '\n', 
		'\xB7', '\x3', '\xB7', '\x3', '\xB7', '\x5', '\xB7', '\x7B0', '\n', '\xB7', 
		'\x3', '\xB7', '\x3', '\xB7', '\x3', '\xB8', '\a', '\xB8', '\x7B5', '\n', 
		'\xB8', '\f', '\xB8', '\xE', '\xB8', '\x7B8', '\v', '\xB8', '\x3', '\xB9', 
		'\x3', '\xB9', '\x3', '\xB9', '\x3', '\xB9', '\x3', '\xB9', '\x3', '\xB9', 
		'\x3', '\xB9', '\x5', '\xB9', '\x7C1', '\n', '\xB9', '\x3', '\xBA', '\x3', 
		'\xBA', '\x3', '\xBA', '\x5', '\xBA', '\x7C6', '\n', '\xBA', '\x3', '\xBB', 
		'\x3', '\xBB', '\x3', '\xBB', '\a', '\xBB', '\x7CB', '\n', '\xBB', '\f', 
		'\xBB', '\xE', '\xBB', '\x7CE', '\v', '\xBB', '\x3', '\xBB', '\x3', '\xBB', 
		'\x5', '\xBB', '\x7D2', '\n', '\xBB', '\x3', '\xBC', '\x3', '\xBC', '\x3', 
		'\xBC', '\x3', '\xBC', '\x3', '\xBD', '\x3', '\xBD', '\x5', '\xBD', '\x7DA', 
		'\n', '\xBD', '\x3', '\xBE', '\x3', '\xBE', '\x3', '\xBE', '\x3', '\xBE', 
		'\x5', '\xBE', '\x7E0', '\n', '\xBE', '\x3', '\xBF', '\x3', '\xBF', '\x3', 
		'\xBF', '\x3', '\xC0', '\x3', '\xC0', '\x6', '\xC0', '\x7E7', '\n', '\xC0', 
		'\r', '\xC0', '\xE', '\xC0', '\x7E8', '\x3', '\xC0', '\x3', '\xC0', '\x3', 
		'\xC0', '\x5', '\xC0', '\x7EE', '\n', '\xC0', '\x3', '\xC1', '\x3', '\xC1', 
		'\x6', '\xC1', '\x7F2', '\n', '\xC1', '\r', '\xC1', '\xE', '\xC1', '\x7F3', 
		'\x3', '\xC1', '\x3', '\xC1', '\x3', '\xC1', '\x5', '\xC1', '\x7F9', '\n', 
		'\xC1', '\x3', '\xC2', '\x3', '\xC2', '\x3', '\xC2', '\x3', '\xC2', '\x5', 
		'\xC2', '\x7FF', '\n', '\xC2', '\x3', '\xC3', '\x3', '\xC3', '\x3', '\xC4', 
		'\x5', '\xC4', '\x804', '\n', '\xC4', '\x3', '\xC4', '\x3', '\xC4', '\x3', 
		'\xC4', '\x3', '\xC4', '\x5', '\xC4', '\x80A', '\n', '\xC4', '\x3', '\xC4', 
		'\x3', '\xC4', '\x3', '\xC5', '\x5', '\xC5', '\x80F', '\n', '\xC5', '\x3', 
		'\xC5', '\x3', '\xC5', '\x5', '\xC5', '\x813', '\n', '\xC5', '\x3', '\xC5', 
		'\x3', '\xC5', '\x3', '\xC6', '\x3', '\xC6', '\x3', '\xC6', '\x3', '\xC6', 
		'\x3', '\xC6', '\x3', '\xC6', '\x3', '\xC6', '\x3', '\xC7', '\x3', '\xC7', 
		'\x3', '\xC7', '\x5', '\xC7', '\x821', '\n', '\xC7', '\x3', '\xC8', '\x3', 
		'\xC8', '\x5', '\xC8', '\x825', '\n', '\xC8', '\x3', '\xC9', '\x3', '\xC9', 
		'\x3', '\xC9', '\x3', '\xC9', '\x3', '\xC9', '\x3', '\xCA', '\x3', '\xCA', 
		'\x3', '\xCA', '\x3', '\xCA', '\x3', '\xCA', '\x3', '\xCA', '\x3', '\xCA', 
		'\x3', '\xCA', '\x3', '\xCA', '\x3', '\xCB', '\x3', '\xCB', '\x3', '\xCB', 
		'\x3', '\xCB', '\x3', '\xCB', '\x3', '\xCB', '\x3', '\xCB', '\x3', '\xCB', 
		'\a', '\xCB', '\x83D', '\n', '\xCB', '\f', '\xCB', '\xE', '\xCB', '\x840', 
		'\v', '\xCB', '\x3', '\xCC', '\x3', '\xCC', '\x3', '\xCC', '\x3', '\xCD', 
		'\x3', '\xCD', '\x3', '\xCD', '\a', '\xCD', '\x848', '\n', '\xCD', '\f', 
		'\xCD', '\xE', '\xCD', '\x84B', '\v', '\xCD', '\x3', '\xCE', '\a', '\xCE', 
		'\x84E', '\n', '\xCE', '\f', '\xCE', '\xE', '\xCE', '\x851', '\v', '\xCE', 
		'\x3', '\xCF', '\x3', '\xCF', '\x3', '\xCF', '\x3', '\xCF', '\x3', '\xCF', 
		'\x3', '\xCF', '\x3', '\xCF', '\x3', '\xCF', '\x3', '\xCF', '\x3', '\xCF', 
		'\x3', '\xCF', '\x3', '\xCF', '\x5', '\xCF', '\x85F', '\n', '\xCF', '\x3', 
		'\xCF', '\x3', '\xCF', '\x3', '\xCF', '\x3', '\xCF', '\x5', '\xCF', '\x865', 
		'\n', '\xCF', '\x3', '\xD0', '\x3', '\xD0', '\x3', '\xD0', '\x3', '\xD0', 
		'\x5', '\xD0', '\x86B', '\n', '\xD0', '\x3', '\xD1', '\x3', '\xD1', '\x3', 
		'\xD2', '\x5', '\xD2', '\x870', '\n', '\xD2', '\x3', '\xD2', '\x3', '\xD2', 
		'\x3', '\xD2', '\x5', '\xD2', '\x875', '\n', '\xD2', '\x3', '\xD2', '\x3', 
		'\xD2', '\x3', '\xD2', '\x3', '\xD3', '\x3', '\xD3', '\x3', '\xD3', '\x3', 
		'\xD3', '\x3', '\xD3', '\x5', '\xD3', '\x87F', '\n', '\xD3', '\x3', '\xD3', 
		'\x3', '\xD3', '\x5', '\xD3', '\x883', '\n', '\xD3', '\x3', '\xD3', '\x3', 
		'\xD3', '\x3', '\xD4', '\x3', '\xD4', '\x3', '\xD5', '\x3', '\xD5', '\x3', 
		'\xD5', '\a', '\xD5', '\x88C', '\n', '\xD5', '\f', '\xD5', '\xE', '\xD5', 
		'\x88F', '\v', '\xD5', '\x3', '\xD5', '\x3', '\xD5', '\x5', '\xD5', '\x893', 
		'\n', '\xD5', '\x3', '\xD6', '\x3', '\xD6', '\x3', '\xD6', '\x3', '\xD6', 
		'\a', '\xD6', '\x899', '\n', '\xD6', '\f', '\xD6', '\xE', '\xD6', '\x89C', 
		'\v', '\xD6', '\x5', '\xD6', '\x89E', '\n', '\xD6', '\x3', '\xD6', '\x3', 
		'\xD6', '\x5', '\xD6', '\x8A2', '\n', '\xD6', '\x3', '\xD6', '\x3', '\xD6', 
		'\x3', '\xD7', '\x5', '\xD7', '\x8A7', '\n', '\xD7', '\x3', '\xD7', '\x3', 
		'\xD7', '\x3', '\xD7', '\x3', '\xD7', '\a', '\xD7', '\x8AD', '\n', '\xD7', 
		'\f', '\xD7', '\xE', '\xD7', '\x8B0', '\v', '\xD7', '\x3', '\xD8', '\x5', 
		'\xD8', '\x8B3', '\n', '\xD8', '\x3', '\xD8', '\x3', '\xD8', '\x3', '\xD8', 
		'\x3', '\xD8', '\x5', '\xD8', '\x8B9', '\n', '\xD8', '\x3', '\xD8', '\x3', 
		'\xD8', '\x3', '\xD9', '\x3', '\xD9', '\x3', '\xD9', '\x3', '\xD9', '\x3', 
		'\xD9', '\x3', '\xDA', '\x5', '\xDA', '\x8C3', '\n', '\xDA', '\x3', '\xDA', 
		'\x3', '\xDA', '\x3', '\xDA', '\x3', '\xDA', '\x6', '\xDA', '\x8C9', '\n', 
		'\xDA', '\r', '\xDA', '\xE', '\xDA', '\x8CA', '\x3', '\xDA', '\x3', '\xDA', 
		'\x3', '\xDA', '\x5', '\xDA', '\x8D0', '\n', '\xDA', '\x3', '\xDA', '\x3', 
		'\xDA', '\x3', '\xDB', '\x5', '\xDB', '\x8D5', '\n', '\xDB', '\x3', '\xDB', 
		'\x3', '\xDB', '\x3', '\xDB', '\x3', '\xDB', '\x3', '\xDB', '\x3', '\xDB', 
		'\x3', '\xDB', '\x3', '\xDB', '\x3', '\xDB', '\a', '\xDB', '\x8E0', '\n', 
		'\xDB', '\f', '\xDB', '\xE', '\xDB', '\x8E3', '\v', '\xDB', '\x3', '\xDB', 
		'\x3', '\xDB', '\x5', '\xDB', '\x8E7', '\n', '\xDB', '\x3', '\xDB', '\x3', 
		'\xDB', '\x3', '\xDB', '\x5', '\xDB', '\x8EC', '\n', '\xDB', '\x3', '\xDB', 
		'\x3', '\xDB', '\x3', '\xDC', '\x5', '\xDC', '\x8F1', '\n', '\xDC', '\x3', 
		'\xDC', '\x3', '\xDC', '\x5', '\xDC', '\x8F5', '\n', '\xDC', '\x3', '\xDC', 
		'\x3', '\xDC', '\x3', '\xDC', '\x3', '\xDC', '\x3', '\xDC', '\x3', '\xDC', 
		'\x5', '\xDC', '\x8FD', '\n', '\xDC', '\x3', '\xDC', '\x3', '\xDC', '\x3', 
		'\xDD', '\x3', '\xDD', '\x3', '\xDD', '\x3', '\xDD', '\x3', '\xDD', '\x5', 
		'\xDD', '\x906', '\n', '\xDD', '\x3', '\xDD', '\x3', '\xDD', '\x5', '\xDD', 
		'\x90A', '\n', '\xDD', '\x3', '\xDE', '\a', '\xDE', '\x90D', '\n', '\xDE', 
		'\f', '\xDE', '\xE', '\xDE', '\x910', '\v', '\xDE', '\x3', '\xDF', '\x3', 
		'\xDF', '\x3', '\xDF', '\x3', '\xDF', '\x3', '\xDF', '\x3', '\xDF', '\x3', 
		'\xDF', '\x5', '\xDF', '\x919', '\n', '\xDF', '\x3', '\xE0', '\x3', '\xE0', 
		'\x3', '\xE0', '\x3', '\xE0', '\x3', '\xE0', '\x3', '\xE0', '\x3', '\xE0', 
		'\x3', '\xE1', '\x3', '\xE1', '\x3', '\xE1', '\x3', '\xE1', '\x3', '\xE1', 
		'\x3', '\xE1', '\x3', '\xE2', '\x3', '\xE2', '\x3', '\xE2', '\x3', '\xE2', 
		'\x3', '\xE2', '\x3', '\xE2', '\x3', '\xE3', '\x3', '\xE3', '\x5', '\xE3', 
		'\x930', '\n', '\xE3', '\x3', '\xE3', '\x3', '\xE3', '\x3', '\xE3', '\x3', 
		'\xE3', '\x3', '\xE3', '\x3', '\xE3', '\x5', '\xE3', '\x938', '\n', '\xE3', 
		'\x3', '\xE4', '\x3', '\xE4', '\x3', '\xE4', '\x3', '\xE4', '\x3', '\xE4', 
		'\x3', '\xE4', '\x3', '\xE4', '\x5', '\xE4', '\x941', '\n', '\xE4', '\x3', 
		'\xE4', '\x5', '\xE4', '\x944', '\n', '\xE4', '\x3', '\xE4', '\x3', '\xE4', 
		'\x3', '\xE5', '\x3', '\xE5', '\x3', '\xE5', '\x3', '\xE6', '\x3', '\xE6', 
		'\x3', '\xE6', '\x3', '\xE6', '\x3', '\xE6', '\x3', '\xE6', '\x3', '\xE6', 
		'\x3', '\xE6', '\x3', '\xE6', '\x3', '\xE6', '\x3', '\xE6', '\x3', '\xE6', 
		'\x3', '\xE6', '\x5', '\xE6', '\x958', '\n', '\xE6', '\x3', '\xE7', '\a', 
		'\xE7', '\x95B', '\n', '\xE7', '\f', '\xE7', '\xE', '\xE7', '\x95E', '\v', 
		'\xE7', '\x3', '\xE8', '\x3', '\xE8', '\x3', '\xE9', '\x3', '\xE9', '\x5', 
		'\xE9', '\x964', '\n', '\xE9', '\x3', '\xEA', '\x3', '\xEA', '\x3', '\xEA', 
		'\x3', '\xEA', '\x3', '\xEA', '\x3', '\xEA', '\x5', '\xEA', '\x96C', '\n', 
		'\xEA', '\x3', '\xEB', '\x5', '\xEB', '\x96F', '\n', '\xEB', '\x3', '\xEB', 
		'\x3', '\xEB', '\x3', '\xEB', '\x3', '\xEB', '\x3', '\xEB', '\x3', '\xEB', 
		'\x5', '\xEB', '\x977', '\n', '\xEB', '\x3', '\xEB', '\x3', '\xEB', '\x3', 
		'\xEB', '\x3', '\xEC', '\a', '\xEC', '\x97D', '\n', '\xEC', '\f', '\xEC', 
		'\xE', '\xEC', '\x980', '\v', '\xEC', '\x3', '\xED', '\x3', '\xED', '\x3', 
		'\xED', '\x3', '\xED', '\x3', '\xED', '\x3', '\xED', '\x3', '\xEE', '\x3', 
		'\xEE', '\x5', '\xEE', '\x98A', '\n', '\xEE', '\x3', '\xEE', '\x5', '\xEE', 
		'\x98D', '\n', '\xEE', '\x3', '\xEE', '\x5', '\xEE', '\x990', '\n', '\xEE', 
		'\x3', '\xEF', '\x3', '\xEF', '\x3', '\xEF', '\x3', '\xEF', '\x5', '\xEF', 
		'\x996', '\n', '\xEF', '\x3', '\xF0', '\x3', '\xF0', '\x5', '\xF0', '\x99A', 
		'\n', '\xF0', '\x3', '\xF1', '\x3', '\xF1', '\x3', '\xF1', '\x3', '\xF1', 
		'\a', '\xF1', '\x9A0', '\n', '\xF1', '\f', '\xF1', '\xE', '\xF1', '\x9A3', 
		'\v', '\xF1', '\x3', '\xF2', '\x3', '\xF2', '\x3', '\xF2', '\x5', '\xF2', 
		'\x9A8', '\n', '\xF2', '\x3', '\xF3', '\x3', '\xF3', '\x3', '\xF3', '\x3', 
		'\xF3', '\x3', '\xF3', '\x3', '\xF3', '\x3', '\xF4', '\x3', '\xF4', '\x5', 
		'\xF4', '\x9B2', '\n', '\xF4', '\x3', '\xF4', '\x3', '\xF4', '\x5', '\xF4', 
		'\x9B6', '\n', '\xF4', '\x3', '\xF4', '\x3', '\xF4', '\x3', '\xF5', '\x3', 
		'\xF5', '\x3', '\xF5', '\x3', '\xF6', '\x3', '\xF6', '\x3', '\xF6', '\x3', 
		'\xF7', '\x3', '\xF7', '\x3', '\xF7', '\x3', '\xF7', '\x5', '\xF7', '\x9C4', 
		'\n', '\xF7', '\x3', '\xF7', '\x3', '\xF7', '\x3', '\xF8', '\x3', '\xF8', 
		'\x3', '\xF8', '\x3', '\xF8', '\x5', '\xF8', '\x9CC', '\n', '\xF8', '\x3', 
		'\xF9', '\x3', '\xF9', '\x3', '\xF9', '\x3', '\xF9', '\x3', '\xF9', '\a', 
		'\xF9', '\x9D3', '\n', '\xF9', '\f', '\xF9', '\xE', '\xF9', '\x9D6', '\v', 
		'\xF9', '\x3', '\xF9', '\x3', '\xF9', '\x3', '\xF9', '\x3', '\xF9', '\x3', 
		'\xFA', '\x3', '\xFA', '\x3', '\xFA', '\x3', '\xFA', '\x3', '\xFA', '\a', 
		'\xFA', '\x9E1', '\n', '\xFA', '\f', '\xFA', '\xE', '\xFA', '\x9E4', '\v', 
		'\xFA', '\x3', '\xFA', '\x3', '\xFA', '\x3', '\xFA', '\x3', '\xFA', '\x3', 
		'\xFB', '\x3', '\xFB', '\x3', '\xFB', '\x3', '\xFB', '\a', '\xFB', '\x9EE', 
		'\n', '\xFB', '\f', '\xFB', '\xE', '\xFB', '\x9F1', '\v', '\xFB', '\x3', 
		'\xFB', '\x3', '\xFB', '\x3', '\xFC', '\x5', '\xFC', '\x9F6', '\n', '\xFC', 
		'\x3', '\xFC', '\x3', '\xFC', '\x3', '\xFC', '\x3', '\xFC', '\x3', '\xFC', 
		'\x3', '\xFD', '\x5', '\xFD', '\x9FE', '\n', '\xFD', '\x3', '\xFD', '\x3', 
		'\xFD', '\x3', '\xFD', '\x3', '\xFD', '\x3', '\xFD', '\x3', '\xFD', '\x5', 
		'\xFD', '\xA06', '\n', '\xFD', '\x3', '\xFD', '\x3', '\xFD', '\x3', '\xFE', 
		'\x5', '\xFE', '\xA0B', '\n', '\xFE', '\x3', '\xFE', '\x3', '\xFE', '\x5', 
		'\xFE', '\xA0F', '\n', '\xFE', '\x3', '\xFE', '\x5', '\xFE', '\xA12', 
		'\n', '\xFE', '\x3', '\xFE', '\x5', '\xFE', '\xA15', '\n', '\xFE', '\x3', 
		'\xFE', '\x3', '\xFE', '\x3', '\xFF', '\x3', '\xFF', '\x3', '\xFF', '\a', 
		'\xFF', '\xA1C', '\n', '\xFF', '\f', '\xFF', '\xE', '\xFF', '\xA1F', '\v', 
		'\xFF', '\x3', '\xFF', '\x5', '\xFF', '\xA22', '\n', '\xFF', '\x3', '\x100', 
		'\x3', '\x100', '\x3', '\x100', '\x5', '\x100', '\xA27', '\n', '\x100', 
		'\x3', '\x100', '\x2', '\x2', '\x101', '\x2', '\x4', '\x6', '\b', '\n', 
		'\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', 
		' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', '\x32', '\x34', '\x36', 
		'\x38', ':', '<', '>', '@', '\x42', '\x44', '\x46', 'H', 'J', 'L', 'N', 
		'P', 'R', 'T', 'V', 'X', 'Z', '\\', '^', '`', '\x62', '\x64', '\x66', 
		'h', 'j', 'l', 'n', 'p', 'r', 't', 'v', 'x', 'z', '|', '~', '\x80', '\x82', 
		'\x84', '\x86', '\x88', '\x8A', '\x8C', '\x8E', '\x90', '\x92', '\x94', 
		'\x96', '\x98', '\x9A', '\x9C', '\x9E', '\xA0', '\xA2', '\xA4', '\xA6', 
		'\xA8', '\xAA', '\xAC', '\xAE', '\xB0', '\xB2', '\xB4', '\xB6', '\xB8', 
		'\xBA', '\xBC', '\xBE', '\xC0', '\xC2', '\xC4', '\xC6', '\xC8', '\xCA', 
		'\xCC', '\xCE', '\xD0', '\xD2', '\xD4', '\xD6', '\xD8', '\xDA', '\xDC', 
		'\xDE', '\xE0', '\xE2', '\xE4', '\xE6', '\xE8', '\xEA', '\xEC', '\xEE', 
		'\xF0', '\xF2', '\xF4', '\xF6', '\xF8', '\xFA', '\xFC', '\xFE', '\x100', 
		'\x102', '\x104', '\x106', '\x108', '\x10A', '\x10C', '\x10E', '\x110', 
		'\x112', '\x114', '\x116', '\x118', '\x11A', '\x11C', '\x11E', '\x120', 
		'\x122', '\x124', '\x126', '\x128', '\x12A', '\x12C', '\x12E', '\x130', 
		'\x132', '\x134', '\x136', '\x138', '\x13A', '\x13C', '\x13E', '\x140', 
		'\x142', '\x144', '\x146', '\x148', '\x14A', '\x14C', '\x14E', '\x150', 
		'\x152', '\x154', '\x156', '\x158', '\x15A', '\x15C', '\x15E', '\x160', 
		'\x162', '\x164', '\x166', '\x168', '\x16A', '\x16C', '\x16E', '\x170', 
		'\x172', '\x174', '\x176', '\x178', '\x17A', '\x17C', '\x17E', '\x180', 
		'\x182', '\x184', '\x186', '\x188', '\x18A', '\x18C', '\x18E', '\x190', 
		'\x192', '\x194', '\x196', '\x198', '\x19A', '\x19C', '\x19E', '\x1A0', 
		'\x1A2', '\x1A4', '\x1A6', '\x1A8', '\x1AA', '\x1AC', '\x1AE', '\x1B0', 
		'\x1B2', '\x1B4', '\x1B6', '\x1B8', '\x1BA', '\x1BC', '\x1BE', '\x1C0', 
		'\x1C2', '\x1C4', '\x1C6', '\x1C8', '\x1CA', '\x1CC', '\x1CE', '\x1D0', 
		'\x1D2', '\x1D4', '\x1D6', '\x1D8', '\x1DA', '\x1DC', '\x1DE', '\x1E0', 
		'\x1E2', '\x1E4', '\x1E6', '\x1E8', '\x1EA', '\x1EC', '\x1EE', '\x1F0', 
		'\x1F2', '\x1F4', '\x1F6', '\x1F8', '\x1FA', '\x1FC', '\x1FE', '\x2', 
		'\x11', '\x5', '\x2', 'r', 'r', 'w', 'w', '\xA0', '\xA0', '\x4', '\x2', 
		'\x8E', '\x8E', '\x96', '\x97', '\x4', '\x2', '\x19', '\x19', '\x63', 
		'\x63', '\x13', '\x2', '\n', '\n', '\x15', '\x17', '\x1B', '\x1B', '\x1F', 
		'\x1F', '!', '!', '$', '$', ',', ',', '\x30', '\x30', '\x35', '\x35', 
		'\x42', '\x42', '\x46', '\x46', 'I', 'I', 'X', 'X', '^', '`', '\x66', 
		'\x66', 'h', 'h', 'k', 'k', '\x3', '\x2', 'x', 'y', '\x4', '\x2', '(', 
		'(', '\x41', '\x41', '\a', '\x2', '\t', '\t', '\x34', '\x34', '\x39', 
		'\x39', '?', '?', 'p', 'q', '\a', '\x2', '\x12', '\x12', '(', '(', '*', 
		'*', '/', '/', '\x41', '\x41', '\x5', '\x2', '\x33', '\x33', 'M', 'M', 
		'\x94', '\x95', '\x5', '\x2', '\x85', '\x86', '\x88', '\x88', '\x98', 
		'\x9A', '\x5', '\x2', 'S', 'T', 'Y', 'Z', '\\', ']', '\x4', '\x2', '\x13', 
		'\x13', 'P', 'P', '\x3', '\x2', '\x96', '\x97', '\x4', '\x2', '!', '!', 
		'\x46', '\x46', '\x4', '\x2', '\'', '\'', 'H', 'H', '\x2', '\xAEF', '\x2', 
		'\x200', '\x3', '\x2', '\x2', '\x2', '\x4', '\x202', '\x3', '\x2', '\x2', 
		'\x2', '\x6', '\x205', '\x3', '\x2', '\x2', '\x2', '\b', '\x211', '\x3', 
		'\x2', '\x2', '\x2', '\n', '\x213', '\x3', '\x2', '\x2', '\x2', '\f', 
		'\x21B', '\x3', '\x2', '\x2', '\x2', '\xE', '\x21D', '\x3', '\x2', '\x2', 
		'\x2', '\x10', '\x21F', '\x3', '\x2', '\x2', '\x2', '\x12', '\x22A', '\x3', 
		'\x2', '\x2', '\x2', '\x14', '\x23A', '\x3', '\x2', '\x2', '\x2', '\x16', 
		'\x23E', '\x3', '\x2', '\x2', '\x2', '\x18', '\x240', '\x3', '\x2', '\x2', 
		'\x2', '\x1A', '\x245', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x259', '\x3', 
		'\x2', '\x2', '\x2', '\x1E', '\x271', '\x3', '\x2', '\x2', '\x2', ' ', 
		'\x276', '\x3', '\x2', '\x2', '\x2', '\"', '\x27B', '\x3', '\x2', '\x2', 
		'\x2', '$', '\x27F', '\x3', '\x2', '\x2', '\x2', '&', '\x281', '\x3', 
		'\x2', '\x2', '\x2', '(', '\x28C', '\x3', '\x2', '\x2', '\x2', '*', '\x294', 
		'\x3', '\x2', '\x2', '\x2', ',', '\x298', '\x3', '\x2', '\x2', '\x2', 
		'.', '\x2A0', '\x3', '\x2', '\x2', '\x2', '\x30', '\x2AC', '\x3', '\x2', 
		'\x2', '\x2', '\x32', '\x2AE', '\x3', '\x2', '\x2', '\x2', '\x34', '\x2B6', 
		'\x3', '\x2', '\x2', '\x2', '\x36', '\x2BB', '\x3', '\x2', '\x2', '\x2', 
		'\x38', '\x2C3', '\x3', '\x2', '\x2', '\x2', ':', '\x2EB', '\x3', '\x2', 
		'\x2', '\x2', '<', '\x2F0', '\x3', '\x2', '\x2', '\x2', '>', '\x2F9', 
		'\x3', '\x2', '\x2', '\x2', '@', '\x30B', '\x3', '\x2', '\x2', '\x2', 
		'\x42', '\x30D', '\x3', '\x2', '\x2', '\x2', '\x44', '\x326', '\x3', '\x2', 
		'\x2', '\x2', '\x46', '\x329', '\x3', '\x2', '\x2', '\x2', 'H', '\x334', 
		'\x3', '\x2', '\x2', '\x2', 'J', '\x33A', '\x3', '\x2', '\x2', '\x2', 
		'L', '\x342', '\x3', '\x2', '\x2', '\x2', 'N', '\x347', '\x3', '\x2', 
		'\x2', '\x2', 'P', '\x354', '\x3', '\x2', '\x2', '\x2', 'R', '\x365', 
		'\x3', '\x2', '\x2', '\x2', 'T', '\x36E', '\x3', '\x2', '\x2', '\x2', 
		'V', '\x370', '\x3', '\x2', '\x2', '\x2', 'X', '\x378', '\x3', '\x2', 
		'\x2', '\x2', 'Z', '\x386', '\x3', '\x2', '\x2', '\x2', '\\', '\x398', 
		'\x3', '\x2', '\x2', '\x2', '^', '\x3A2', '\x3', '\x2', '\x2', '\x2', 
		'`', '\x3A8', '\x3', '\x2', '\x2', '\x2', '\x62', '\x3AC', '\x3', '\x2', 
		'\x2', '\x2', '\x64', '\x3AF', '\x3', '\x2', '\x2', '\x2', '\x66', '\x3B8', 
		'\x3', '\x2', '\x2', '\x2', 'h', '\x3C8', '\x3', '\x2', '\x2', '\x2', 
		'j', '\x3D1', '\x3', '\x2', '\x2', '\x2', 'l', '\x3DA', '\x3', '\x2', 
		'\x2', '\x2', 'n', '\x3DC', '\x3', '\x2', '\x2', '\x2', 'p', '\x3DF', 
		'\x3', '\x2', '\x2', '\x2', 'r', '\x3E5', '\x3', '\x2', '\x2', '\x2', 
		't', '\x3EE', '\x3', '\x2', '\x2', '\x2', 'v', '\x401', '\x3', '\x2', 
		'\x2', '\x2', 'x', '\x406', '\x3', '\x2', '\x2', '\x2', 'z', '\x40B', 
		'\x3', '\x2', '\x2', '\x2', '|', '\x40D', '\x3', '\x2', '\x2', '\x2', 
		'~', '\x412', '\x3', '\x2', '\x2', '\x2', '\x80', '\x41C', '\x3', '\x2', 
		'\x2', '\x2', '\x82', '\x421', '\x3', '\x2', '\x2', '\x2', '\x84', '\x428', 
		'\x3', '\x2', '\x2', '\x2', '\x86', '\x42D', '\x3', '\x2', '\x2', '\x2', 
		'\x88', '\x432', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x43A', '\x3', '\x2', 
		'\x2', '\x2', '\x8C', '\x43F', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x444', 
		'\x3', '\x2', '\x2', '\x2', '\x90', '\x449', '\x3', '\x2', '\x2', '\x2', 
		'\x92', '\x44B', '\x3', '\x2', '\x2', '\x2', '\x94', '\x44D', '\x3', '\x2', 
		'\x2', '\x2', '\x96', '\x455', '\x3', '\x2', '\x2', '\x2', '\x98', '\x45A', 
		'\x3', '\x2', '\x2', '\x2', '\x9A', '\x45E', '\x3', '\x2', '\x2', '\x2', 
		'\x9C', '\x463', '\x3', '\x2', '\x2', '\x2', '\x9E', '\x465', '\x3', '\x2', 
		'\x2', '\x2', '\xA0', '\x472', '\x3', '\x2', '\x2', '\x2', '\xA2', '\x474', 
		'\x3', '\x2', '\x2', '\x2', '\xA4', '\x476', '\x3', '\x2', '\x2', '\x2', 
		'\xA6', '\x47A', '\x3', '\x2', '\x2', '\x2', '\xA8', '\x482', '\x3', '\x2', 
		'\x2', '\x2', '\xAA', '\x4A8', '\x3', '\x2', '\x2', '\x2', '\xAC', '\x4AD', 
		'\x3', '\x2', '\x2', '\x2', '\xAE', '\x4B0', '\x3', '\x2', '\x2', '\x2', 
		'\xB0', '\x4B5', '\x3', '\x2', '\x2', '\x2', '\xB2', '\x4C4', '\x3', '\x2', 
		'\x2', '\x2', '\xB4', '\x4C6', '\x3', '\x2', '\x2', '\x2', '\xB6', '\x4CD', 
		'\x3', '\x2', '\x2', '\x2', '\xB8', '\x4D2', '\x3', '\x2', '\x2', '\x2', 
		'\xBA', '\x4D8', '\x3', '\x2', '\x2', '\x2', '\xBC', '\x4DC', '\x3', '\x2', 
		'\x2', '\x2', '\xBE', '\x4DE', '\x3', '\x2', '\x2', '\x2', '\xC0', '\x4EA', 
		'\x3', '\x2', '\x2', '\x2', '\xC2', '\x4F6', '\x3', '\x2', '\x2', '\x2', 
		'\xC4', '\x508', '\x3', '\x2', '\x2', '\x2', '\xC6', '\x50A', '\x3', '\x2', 
		'\x2', '\x2', '\xC8', '\x513', '\x3', '\x2', '\x2', '\x2', '\xCA', '\x517', 
		'\x3', '\x2', '\x2', '\x2', '\xCC', '\x51C', '\x3', '\x2', '\x2', '\x2', 
		'\xCE', '\x520', '\x3', '\x2', '\x2', '\x2', '\xD0', '\x528', '\x3', '\x2', 
		'\x2', '\x2', '\xD2', '\x52A', '\x3', '\x2', '\x2', '\x2', '\xD4', '\x534', 
		'\x3', '\x2', '\x2', '\x2', '\xD6', '\x551', '\x3', '\x2', '\x2', '\x2', 
		'\xD8', '\x553', '\x3', '\x2', '\x2', '\x2', '\xDA', '\x559', '\x3', '\x2', 
		'\x2', '\x2', '\xDC', '\x561', '\x3', '\x2', '\x2', '\x2', '\xDE', '\x569', 
		'\x3', '\x2', '\x2', '\x2', '\xE0', '\x56B', '\x3', '\x2', '\x2', '\x2', 
		'\xE2', '\x573', '\x3', '\x2', '\x2', '\x2', '\xE4', '\x57B', '\x3', '\x2', 
		'\x2', '\x2', '\xE6', '\x583', '\x3', '\x2', '\x2', '\x2', '\xE8', '\x587', 
		'\x3', '\x2', '\x2', '\x2', '\xEA', '\x589', '\x3', '\x2', '\x2', '\x2', 
		'\xEC', '\x592', '\x3', '\x2', '\x2', '\x2', '\xEE', '\x5AD', '\x3', '\x2', 
		'\x2', '\x2', '\xF0', '\x5BA', '\x3', '\x2', '\x2', '\x2', '\xF2', '\x5BC', 
		'\x3', '\x2', '\x2', '\x2', '\xF4', '\x5CE', '\x3', '\x2', '\x2', '\x2', 
		'\xF6', '\x5DA', '\x3', '\x2', '\x2', '\x2', '\xF8', '\x5DD', '\x3', '\x2', 
		'\x2', '\x2', '\xFA', '\x5EF', '\x3', '\x2', '\x2', '\x2', '\xFC', '\x5F1', 
		'\x3', '\x2', '\x2', '\x2', '\xFE', '\x5F3', '\x3', '\x2', '\x2', '\x2', 
		'\x100', '\x5F8', '\x3', '\x2', '\x2', '\x2', '\x102', '\x600', '\x3', 
		'\x2', '\x2', '\x2', '\x104', '\x608', '\x3', '\x2', '\x2', '\x2', '\x106', 
		'\x610', '\x3', '\x2', '\x2', '\x2', '\x108', '\x61B', '\x3', '\x2', '\x2', 
		'\x2', '\x10A', '\x628', '\x3', '\x2', '\x2', '\x2', '\x10C', '\x636', 
		'\x3', '\x2', '\x2', '\x2', '\x10E', '\x63C', '\x3', '\x2', '\x2', '\x2', 
		'\x110', '\x64C', '\x3', '\x2', '\x2', '\x2', '\x112', '\x64E', '\x3', 
		'\x2', '\x2', '\x2', '\x114', '\x651', '\x3', '\x2', '\x2', '\x2', '\x116', 
		'\x657', '\x3', '\x2', '\x2', '\x2', '\x118', '\x65E', '\x3', '\x2', '\x2', 
		'\x2', '\x11A', '\x660', '\x3', '\x2', '\x2', '\x2', '\x11C', '\x662', 
		'\x3', '\x2', '\x2', '\x2', '\x11E', '\x66A', '\x3', '\x2', '\x2', '\x2', 
		'\x120', '\x66D', '\x3', '\x2', '\x2', '\x2', '\x122', '\x67B', '\x3', 
		'\x2', '\x2', '\x2', '\x124', '\x67D', '\x3', '\x2', '\x2', '\x2', '\x126', 
		'\x681', '\x3', '\x2', '\x2', '\x2', '\x128', '\x68D', '\x3', '\x2', '\x2', 
		'\x2', '\x12A', '\x68F', '\x3', '\x2', '\x2', '\x2', '\x12C', '\x699', 
		'\x3', '\x2', '\x2', '\x2', '\x12E', '\x69D', '\x3', '\x2', '\x2', '\x2', 
		'\x130', '\x6A1', '\x3', '\x2', '\x2', '\x2', '\x132', '\x6A6', '\x3', 
		'\x2', '\x2', '\x2', '\x134', '\x6B0', '\x3', '\x2', '\x2', '\x2', '\x136', 
		'\x6B8', '\x3', '\x2', '\x2', '\x2', '\x138', '\x6BA', '\x3', '\x2', '\x2', 
		'\x2', '\x13A', '\x6BF', '\x3', '\x2', '\x2', '\x2', '\x13C', '\x6CD', 
		'\x3', '\x2', '\x2', '\x2', '\x13E', '\x6D5', '\x3', '\x2', '\x2', '\x2', 
		'\x140', '\x6D8', '\x3', '\x2', '\x2', '\x2', '\x142', '\x6DD', '\x3', 
		'\x2', '\x2', '\x2', '\x144', '\x6F7', '\x3', '\x2', '\x2', '\x2', '\x146', 
		'\x6FC', '\x3', '\x2', '\x2', '\x2', '\x148', '\x6FF', '\x3', '\x2', '\x2', 
		'\x2', '\x14A', '\x71F', '\x3', '\x2', '\x2', '\x2', '\x14C', '\x724', 
		'\x3', '\x2', '\x2', '\x2', '\x14E', '\x727', '\x3', '\x2', '\x2', '\x2', 
		'\x150', '\x72B', '\x3', '\x2', '\x2', '\x2', '\x152', '\x72E', '\x3', 
		'\x2', '\x2', '\x2', '\x154', '\x73C', '\x3', '\x2', '\x2', '\x2', '\x156', 
		'\x742', '\x3', '\x2', '\x2', '\x2', '\x158', '\x744', '\x3', '\x2', '\x2', 
		'\x2', '\x15A', '\x753', '\x3', '\x2', '\x2', '\x2', '\x15C', '\x758', 
		'\x3', '\x2', '\x2', '\x2', '\x15E', '\x766', '\x3', '\x2', '\x2', '\x2', 
		'\x160', '\x76B', '\x3', '\x2', '\x2', '\x2', '\x162', '\x771', '\x3', 
		'\x2', '\x2', '\x2', '\x164', '\x774', '\x3', '\x2', '\x2', '\x2', '\x166', 
		'\x77C', '\x3', '\x2', '\x2', '\x2', '\x168', '\x78E', '\x3', '\x2', '\x2', 
		'\x2', '\x16A', '\x793', '\x3', '\x2', '\x2', '\x2', '\x16C', '\x797', 
		'\x3', '\x2', '\x2', '\x2', '\x16E', '\x7B6', '\x3', '\x2', '\x2', '\x2', 
		'\x170', '\x7B9', '\x3', '\x2', '\x2', '\x2', '\x172', '\x7C5', '\x3', 
		'\x2', '\x2', '\x2', '\x174', '\x7D1', '\x3', '\x2', '\x2', '\x2', '\x176', 
		'\x7D3', '\x3', '\x2', '\x2', '\x2', '\x178', '\x7D9', '\x3', '\x2', '\x2', 
		'\x2', '\x17A', '\x7DB', '\x3', '\x2', '\x2', '\x2', '\x17C', '\x7E1', 
		'\x3', '\x2', '\x2', '\x2', '\x17E', '\x7E4', '\x3', '\x2', '\x2', '\x2', 
		'\x180', '\x7EF', '\x3', '\x2', '\x2', '\x2', '\x182', '\x7FA', '\x3', 
		'\x2', '\x2', '\x2', '\x184', '\x800', '\x3', '\x2', '\x2', '\x2', '\x186', 
		'\x803', '\x3', '\x2', '\x2', '\x2', '\x188', '\x80E', '\x3', '\x2', '\x2', 
		'\x2', '\x18A', '\x816', '\x3', '\x2', '\x2', '\x2', '\x18C', '\x820', 
		'\x3', '\x2', '\x2', '\x2', '\x18E', '\x824', '\x3', '\x2', '\x2', '\x2', 
		'\x190', '\x826', '\x3', '\x2', '\x2', '\x2', '\x192', '\x82B', '\x3', 
		'\x2', '\x2', '\x2', '\x194', '\x834', '\x3', '\x2', '\x2', '\x2', '\x196', 
		'\x841', '\x3', '\x2', '\x2', '\x2', '\x198', '\x844', '\x3', '\x2', '\x2', 
		'\x2', '\x19A', '\x84F', '\x3', '\x2', '\x2', '\x2', '\x19C', '\x864', 
		'\x3', '\x2', '\x2', '\x2', '\x19E', '\x866', '\x3', '\x2', '\x2', '\x2', 
		'\x1A0', '\x86C', '\x3', '\x2', '\x2', '\x2', '\x1A2', '\x86F', '\x3', 
		'\x2', '\x2', '\x2', '\x1A4', '\x879', '\x3', '\x2', '\x2', '\x2', '\x1A6', 
		'\x886', '\x3', '\x2', '\x2', '\x2', '\x1A8', '\x892', '\x3', '\x2', '\x2', 
		'\x2', '\x1AA', '\x894', '\x3', '\x2', '\x2', '\x2', '\x1AC', '\x8A6', 
		'\x3', '\x2', '\x2', '\x2', '\x1AE', '\x8B2', '\x3', '\x2', '\x2', '\x2', 
		'\x1B0', '\x8BC', '\x3', '\x2', '\x2', '\x2', '\x1B2', '\x8C2', '\x3', 
		'\x2', '\x2', '\x2', '\x1B4', '\x8D4', '\x3', '\x2', '\x2', '\x2', '\x1B6', 
		'\x8F0', '\x3', '\x2', '\x2', '\x2', '\x1B8', '\x909', '\x3', '\x2', '\x2', 
		'\x2', '\x1BA', '\x90E', '\x3', '\x2', '\x2', '\x2', '\x1BC', '\x918', 
		'\x3', '\x2', '\x2', '\x2', '\x1BE', '\x91A', '\x3', '\x2', '\x2', '\x2', 
		'\x1C0', '\x921', '\x3', '\x2', '\x2', '\x2', '\x1C2', '\x927', '\x3', 
		'\x2', '\x2', '\x2', '\x1C4', '\x92D', '\x3', '\x2', '\x2', '\x2', '\x1C6', 
		'\x939', '\x3', '\x2', '\x2', '\x2', '\x1C8', '\x947', '\x3', '\x2', '\x2', 
		'\x2', '\x1CA', '\x957', '\x3', '\x2', '\x2', '\x2', '\x1CC', '\x95C', 
		'\x3', '\x2', '\x2', '\x2', '\x1CE', '\x95F', '\x3', '\x2', '\x2', '\x2', 
		'\x1D0', '\x963', '\x3', '\x2', '\x2', '\x2', '\x1D2', '\x965', '\x3', 
		'\x2', '\x2', '\x2', '\x1D4', '\x96E', '\x3', '\x2', '\x2', '\x2', '\x1D6', 
		'\x97E', '\x3', '\x2', '\x2', '\x2', '\x1D8', '\x981', '\x3', '\x2', '\x2', 
		'\x2', '\x1DA', '\x987', '\x3', '\x2', '\x2', '\x2', '\x1DC', '\x995', 
		'\x3', '\x2', '\x2', '\x2', '\x1DE', '\x999', '\x3', '\x2', '\x2', '\x2', 
		'\x1E0', '\x99B', '\x3', '\x2', '\x2', '\x2', '\x1E2', '\x9A4', '\x3', 
		'\x2', '\x2', '\x2', '\x1E4', '\x9A9', '\x3', '\x2', '\x2', '\x2', '\x1E6', 
		'\x9AF', '\x3', '\x2', '\x2', '\x2', '\x1E8', '\x9B9', '\x3', '\x2', '\x2', 
		'\x2', '\x1EA', '\x9BC', '\x3', '\x2', '\x2', '\x2', '\x1EC', '\x9BF', 
		'\x3', '\x2', '\x2', '\x2', '\x1EE', '\x9CB', '\x3', '\x2', '\x2', '\x2', 
		'\x1F0', '\x9CD', '\x3', '\x2', '\x2', '\x2', '\x1F2', '\x9DB', '\x3', 
		'\x2', '\x2', '\x2', '\x1F4', '\x9E9', '\x3', '\x2', '\x2', '\x2', '\x1F6', 
		'\x9F5', '\x3', '\x2', '\x2', '\x2', '\x1F8', '\x9FD', '\x3', '\x2', '\x2', 
		'\x2', '\x1FA', '\xA0A', '\x3', '\x2', '\x2', '\x2', '\x1FC', '\xA21', 
		'\x3', '\x2', '\x2', '\x2', '\x1FE', '\xA23', '\x3', '\x2', '\x2', '\x2', 
		'\x200', '\x201', '\t', '\x2', '\x2', '\x2', '\x201', '\x3', '\x3', '\x2', 
		'\x2', '\x2', '\x202', '\x203', '\a', '\x4', '\x2', '\x2', '\x203', '\x204', 
		'\x5', '\x1DA', '\xEE', '\x2', '\x204', '\x5', '\x3', '\x2', '\x2', '\x2', 
		'\x205', '\x207', '\x5', '\xEA', 'v', '\x2', '\x206', '\x208', '\x5', 
		'\x1EA', '\xF6', '\x2', '\x207', '\x206', '\x3', '\x2', '\x2', '\x2', 
		'\x207', '\x208', '\x3', '\x2', '\x2', '\x2', '\x208', '\x20B', '\x3', 
		'\x2', '\x2', '\x2', '\x209', '\x20A', '\a', '\x89', '\x2', '\x2', '\x20A', 
		'\x20C', '\x5', '\xC2', '\x62', '\x2', '\x20B', '\x209', '\x3', '\x2', 
		'\x2', '\x2', '\x20B', '\x20C', '\x3', '\x2', '\x2', '\x2', '\x20C', '\x20D', 
		'\x3', '\x2', '\x2', '\x2', '\x20D', '\x20E', '\a', '\x5', '\x2', '\x2', 
		'\x20E', '\a', '\x3', '\x2', '\x2', '\x2', '\x20F', '\x212', '\x5', '\xC2', 
		'\x62', '\x2', '\x210', '\x212', '\a', '>', '\x2', '\x2', '\x211', '\x20F', 
		'\x3', '\x2', '\x2', '\x2', '\x211', '\x210', '\x3', '\x2', '\x2', '\x2', 
		'\x212', '\t', '\x3', '\x2', '\x2', '\x2', '\x213', '\x214', '\x5', ',', 
		'\x17', '\x2', '\x214', '\v', '\x3', '\x2', '\x2', '\x2', '\x215', '\x216', 
		'\x5', '\x126', '\x94', '\x2', '\x216', '\x217', '\a', '\x8F', '\x2', 
		'\x2', '\x217', '\x218', '\x5', '\b', '\x5', '\x2', '\x218', '\x219', 
		'\a', '\x90', '\x2', '\x2', '\x219', '\x21C', '\x3', '\x2', '\x2', '\x2', 
		'\x21A', '\x21C', '\x5', '\b', '\x5', '\x2', '\x21B', '\x215', '\x3', 
		'\x2', '\x2', '\x2', '\x21B', '\x21A', '\x3', '\x2', '\x2', '\x2', '\x21C', 
		'\r', '\x3', '\x2', '\x2', '\x2', '\x21D', '\x21E', '\t', '\x3', '\x2', 
		'\x2', '\x21E', '\xF', '\x3', '\x2', '\x2', '\x2', '\x21F', '\x220', '\a', 
		'\x8F', '\x2', '\x2', '\x220', '\x225', '\x5', '\x98', 'M', '\x2', '\x221', 
		'\x222', '\a', '\x8D', '\x2', '\x2', '\x222', '\x224', '\x5', '\x98', 
		'M', '\x2', '\x223', '\x221', '\x3', '\x2', '\x2', '\x2', '\x224', '\x227', 
		'\x3', '\x2', '\x2', '\x2', '\x225', '\x223', '\x3', '\x2', '\x2', '\x2', 
		'\x225', '\x226', '\x3', '\x2', '\x2', '\x2', '\x226', '\x228', '\x3', 
		'\x2', '\x2', '\x2', '\x227', '\x225', '\x3', '\x2', '\x2', '\x2', '\x228', 
		'\x229', '\a', '\x90', '\x2', '\x2', '\x229', '\x11', '\x3', '\x2', '\x2', 
		'\x2', '\x22A', '\x22B', '\a', '\a', '\x2', '\x2', '\x22B', '\x22E', '\x5', 
		'\x14', '\v', '\x2', '\x22C', '\x22D', '\a', '\x93', '\x2', '\x2', '\x22D', 
		'\x22F', '\x5', '\x16', '\f', '\x2', '\x22E', '\x22C', '\x3', '\x2', '\x2', 
		'\x2', '\x22E', '\x22F', '\x3', '\x2', '\x2', '\x2', '\x22F', '\x230', 
		'\x3', '\x2', '\x2', '\x2', '\x230', '\x231', '\a', '+', '\x2', '\x2', 
		'\x231', '\x233', '\x5', '\x126', '\x94', '\x2', '\x232', '\x234', '\x5', 
		'\x1AA', '\xD6', '\x2', '\x233', '\x232', '\x3', '\x2', '\x2', '\x2', 
		'\x233', '\x234', '\x3', '\x2', '\x2', '\x2', '\x234', '\x235', '\x3', 
		'\x2', '\x2', '\x2', '\x235', '\x236', '\a', '\x8C', '\x2', '\x2', '\x236', 
		'\x13', '\x3', '\x2', '\x2', '\x2', '\x237', '\x23B', '\x5', '\xE8', 'u', 
		'\x2', '\x238', '\x23B', '\a', '\x80', '\x2', '\x2', '\x239', '\x23B', 
		'\a', '\x81', '\x2', '\x2', '\x23A', '\x237', '\x3', '\x2', '\x2', '\x2', 
		'\x23A', '\x238', '\x3', '\x2', '\x2', '\x2', '\x23A', '\x239', '\x3', 
		'\x2', '\x2', '\x2', '\x23B', '\x15', '\x3', '\x2', '\x2', '\x2', '\x23C', 
		'\x23F', '\x5', '\x1DA', '\xEE', '\x2', '\x23D', '\x23F', '\x5', '\x1C4', 
		'\xE3', '\x2', '\x23E', '\x23C', '\x3', '\x2', '\x2', '\x2', '\x23E', 
		'\x23D', '\x3', '\x2', '\x2', '\x2', '\x23F', '\x17', '\x3', '\x2', '\x2', 
		'\x2', '\x240', '\x243', '\a', '\x36', '\x2', '\x2', '\x241', '\x244', 
		'\x5', '\x170', '\xB9', '\x2', '\x242', '\x244', '\x5', '\x1DA', '\xEE', 
		'\x2', '\x243', '\x241', '\x3', '\x2', '\x2', '\x2', '\x243', '\x242', 
		'\x3', '\x2', '\x2', '\x2', '\x244', '\x19', '\x3', '\x2', '\x2', '\x2', 
		'\x245', '\x246', '\a', '\n', '\x2', '\x2', '\x246', '\x247', '\x5', '\xE8', 
		'u', '\x2', '\x247', '\x248', '\a', '<', '\x2', '\x2', '\x248', '\x249', 
		'\x5', '\xE8', 'u', '\x2', '\x249', '\x24A', '\a', '+', '\x2', '\x2', 
		'\x24A', '\x24B', '\x5', '\x1C', '\xF', '\x2', '\x24B', '\x24C', '\a', 
		'\xE', '\x2', '\x2', '\x24C', '\x24D', '\x5', ' ', '\x11', '\x2', '\x24D', 
		'\x24F', '\a', '\x1A', '\x2', '\x2', '\x24E', '\x250', '\a', '\n', '\x2', 
		'\x2', '\x24F', '\x24E', '\x3', '\x2', '\x2', '\x2', '\x24F', '\x250', 
		'\x3', '\x2', '\x2', '\x2', '\x250', '\x252', '\x3', '\x2', '\x2', '\x2', 
		'\x251', '\x253', '\x5', '\xE8', 'u', '\x2', '\x252', '\x251', '\x3', 
		'\x2', '\x2', '\x2', '\x252', '\x253', '\x3', '\x2', '\x2', '\x2', '\x253', 
		'\x254', '\x3', '\x2', '\x2', '\x2', '\x254', '\x255', '\a', '\x8C', '\x2', 
		'\x2', '\x255', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x256', '\x258', 
		'\x5', ':', '\x1E', '\x2', '\x257', '\x256', '\x3', '\x2', '\x2', '\x2', 
		'\x258', '\x25B', '\x3', '\x2', '\x2', '\x2', '\x259', '\x257', '\x3', 
		'\x2', '\x2', '\x2', '\x259', '\x25A', '\x3', '\x2', '\x2', '\x2', '\x25A', 
		'\x1D', '\x3', '\x2', '\x2', '\x2', '\x25B', '\x259', '\x3', '\x2', '\x2', 
		'\x2', '\x25C', '\x272', '\x5', '\x42', '\"', '\x2', '\x25D', '\x272', 
		'\x5', '\x16C', '\xB7', '\x2', '\x25E', '\x260', '\x5', '\x112', '\x8A', 
		'\x2', '\x25F', '\x25E', '\x3', '\x2', '\x2', '\x2', '\x25F', '\x260', 
		'\x3', '\x2', '\x2', '\x2', '\x260', '\x261', '\x3', '\x2', '\x2', '\x2', 
		'\x261', '\x272', '\x5', 'h', '\x35', '\x2', '\x262', '\x264', '\x5', 
		'\x112', '\x8A', '\x2', '\x263', '\x262', '\x3', '\x2', '\x2', '\x2', 
		'\x263', '\x264', '\x3', '\x2', '\x2', '\x2', '\x264', '\x265', '\x3', 
		'\x2', '\x2', '\x2', '\x265', '\x272', '\x5', '\x64', '\x33', '\x2', '\x266', 
		'\x268', '\x5', '\x112', '\x8A', '\x2', '\x267', '\x266', '\x3', '\x2', 
		'\x2', '\x2', '\x267', '\x268', '\x3', '\x2', '\x2', '\x2', '\x268', '\x26A', 
		'\x3', '\x2', '\x2', '\x2', '\x269', '\x26B', '\a', '\x44', '\x2', '\x2', 
		'\x26A', '\x269', '\x3', '\x2', '\x2', '\x2', '\x26A', '\x26B', '\x3', 
		'\x2', '\x2', '\x2', '\x26B', '\x26C', '\x3', '\x2', '\x2', '\x2', '\x26C', 
		'\x272', '\x5', 'j', '\x36', '\x2', '\x26D', '\x272', '\x5', '\\', '/', 
		'\x2', '\x26E', '\x272', '\x5', '\xD4', 'k', '\x2', '\x26F', '\x272', 
		'\x5', '\x66', '\x34', '\x2', '\x270', '\x272', '\x5', '\x1B8', '\xDD', 
		'\x2', '\x271', '\x25C', '\x3', '\x2', '\x2', '\x2', '\x271', '\x25D', 
		'\x3', '\x2', '\x2', '\x2', '\x271', '\x25F', '\x3', '\x2', '\x2', '\x2', 
		'\x271', '\x263', '\x3', '\x2', '\x2', '\x2', '\x271', '\x267', '\x3', 
		'\x2', '\x2', '\x2', '\x271', '\x26D', '\x3', '\x2', '\x2', '\x2', '\x271', 
		'\x26E', '\x3', '\x2', '\x2', '\x2', '\x271', '\x26F', '\x3', '\x2', '\x2', 
		'\x2', '\x271', '\x270', '\x3', '\x2', '\x2', '\x2', '\x272', '\x1F', 
		'\x3', '\x2', '\x2', '\x2', '\x273', '\x275', '\x5', '\x1E', '\x10', '\x2', 
		'\x274', '\x273', '\x3', '\x2', '\x2', '\x2', '\x275', '\x278', '\x3', 
		'\x2', '\x2', '\x2', '\x276', '\x274', '\x3', '\x2', '\x2', '\x2', '\x276', 
		'\x277', '\x3', '\x2', '\x2', '\x2', '\x277', '!', '\x3', '\x2', '\x2', 
		'\x2', '\x278', '\x276', '\x3', '\x2', '\x2', '\x2', '\x279', '\x27C', 
		'\x5', '\x1F2', '\xFA', '\x2', '\x27A', '\x27C', '\x5', '\x82', '\x42', 
		'\x2', '\x27B', '\x279', '\x3', '\x2', '\x2', '\x2', '\x27B', '\x27A', 
		'\x3', '\x2', '\x2', '\x2', '\x27C', '#', '\x3', '\x2', '\x2', '\x2', 
		'\x27D', '\x280', '\x5', '\x1F0', '\xF9', '\x2', '\x27E', '\x280', '\x5', 
		'\x80', '\x41', '\x2', '\x27F', '\x27D', '\x3', '\x2', '\x2', '\x2', '\x27F', 
		'\x27E', '\x3', '\x2', '\x2', '\x2', '\x280', '%', '\x3', '\x2', '\x2', 
		'\x2', '\x281', '\x282', '\a', '\f', '\x2', '\x2', '\x282', '\x285', '\x5', 
		'l', '\x37', '\x2', '\x283', '\x284', '\a', 'Q', '\x2', '\x2', '\x284', 
		'\x286', '\x5', '\xC2', '\x62', '\x2', '\x285', '\x283', '\x3', '\x2', 
		'\x2', '\x2', '\x285', '\x286', '\x3', '\x2', '\x2', '\x2', '\x286', '\x289', 
		'\x3', '\x2', '\x2', '\x2', '\x287', '\x288', '\a', 'V', '\x2', '\x2', 
		'\x288', '\x28A', '\x5', '\xC2', '\x62', '\x2', '\x289', '\x287', '\x3', 
		'\x2', '\x2', '\x2', '\x289', '\x28A', '\x3', '\x2', '\x2', '\x2', '\x28A', 
		'\'', '\x3', '\x2', '\x2', '\x2', '\x28B', '\x28D', '\x5', '\x112', '\x8A', 
		'\x2', '\x28C', '\x28B', '\x3', '\x2', '\x2', '\x2', '\x28C', '\x28D', 
		'\x3', '\x2', '\x2', '\x2', '\x28D', '\x28E', '\x3', '\x2', '\x2', '\x2', 
		'\x28E', '\x28F', '\x5', '&', '\x14', '\x2', '\x28F', '\x290', '\a', '\x8C', 
		'\x2', '\x2', '\x290', ')', '\x3', '\x2', '\x2', '\x2', '\x291', '\x292', 
		'\x5', '\xD0', 'i', '\x2', '\x292', '\x293', '\a', '\x87', '\x2', '\x2', 
		'\x293', '\x295', '\x3', '\x2', '\x2', '\x2', '\x294', '\x291', '\x3', 
		'\x2', '\x2', '\x2', '\x294', '\x295', '\x3', '\x2', '\x2', '\x2', '\x295', 
		'\x296', '\x3', '\x2', '\x2', '\x2', '\x296', '\x297', '\x5', '\f', '\a', 
		'\x2', '\x297', '+', '\x3', '\x2', '\x2', '\x2', '\x298', '\x29D', '\x5', 
		'*', '\x16', '\x2', '\x299', '\x29A', '\a', '\x8D', '\x2', '\x2', '\x29A', 
		'\x29C', '\x5', '*', '\x16', '\x2', '\x29B', '\x299', '\x3', '\x2', '\x2', 
		'\x2', '\x29C', '\x29F', '\x3', '\x2', '\x2', '\x2', '\x29D', '\x29B', 
		'\x3', '\x2', '\x2', '\x2', '\x29D', '\x29E', '\x3', '\x2', '\x2', '\x2', 
		'\x29E', '-', '\x3', '\x2', '\x2', '\x2', '\x29F', '\x29D', '\x3', '\x2', 
		'\x2', '\x2', '\x2A0', '\x2A1', '\a', '\r', '\x2', '\x2', '\x2A1', '\x2A2', 
		'\x5', '\x112', '\x8A', '\x2', '\x2A2', '\x2A3', '\x5', '\x126', '\x94', 
		'\x2', '\x2A3', '\x2A4', '\a', '\x8C', '\x2', '\x2', '\x2A4', '/', '\x3', 
		'\x2', '\x2', '\x2', '\x2A5', '\x2AD', '\x5', '\xE8', 'u', '\x2', '\x2A6', 
		'\x2AD', '\a', 'J', '\x2', '\x2', '\x2A7', '\x2AD', '\a', 'K', '\x2', 
		'\x2', '\x2A8', '\x2AD', '\a', '\x5', '\x2', '\x2', '\x2A9', '\x2AD', 
		'\a', '\x62', '\x2', '\x2', '\x2AA', '\x2AD', '\a', 'O', '\x2', '\x2', 
		'\x2AB', '\x2AD', '\a', '\x64', '\x2', '\x2', '\x2AC', '\x2A5', '\x3', 
		'\x2', '\x2', '\x2', '\x2AC', '\x2A6', '\x3', '\x2', '\x2', '\x2', '\x2AC', 
		'\x2A7', '\x3', '\x2', '\x2', '\x2', '\x2AC', '\x2A8', '\x3', '\x2', '\x2', 
		'\x2', '\x2AC', '\x2A9', '\x3', '\x2', '\x2', '\x2', '\x2AC', '\x2AA', 
		'\x3', '\x2', '\x2', '\x2', '\x2AC', '\x2AB', '\x3', '\x2', '\x2', '\x2', 
		'\x2AD', '\x31', '\x3', '\x2', '\x2', '\x2', '\x2AE', '\x2AF', '\a', '\r', 
		'\x2', '\x2', '\x2AF', '\x2B0', '\x5', '\x30', '\x19', '\x2', '\x2B0', 
		'\x2B1', '\a', '<', '\x2', '\x2', '\x2B1', '\x2B2', '\x5', '\xB4', '[', 
		'\x2', '\x2B2', '\x2B3', '\a', '+', '\x2', '\x2', '\x2B3', '\x2B4', '\x5', 
		'\xC2', '\x62', '\x2', '\x2B4', '\x2B5', '\a', '\x8C', '\x2', '\x2', '\x2B5', 
		'\x33', '\x3', '\x2', '\x2', '\x2', '\x2B6', '\x2B7', '\x5', '\xE8', 'u', 
		'\x2', '\x2B7', '\x2B8', '\a', '\x8C', '\x2', '\x2', '\x2B8', '\x35', 
		'\x3', '\x2', '\x2', '\x2', '\x2B9', '\x2BA', '\a', 'j', '\x2', '\x2', 
		'\x2BA', '\x2BC', '\x5', '\xA0', 'Q', '\x2', '\x2BB', '\x2B9', '\x3', 
		'\x2', '\x2', '\x2', '\x2BB', '\x2BC', '\x3', '\x2', '\x2', '\x2', '\x2BC', 
		'\x2BE', '\x3', '\x2', '\x2', '\x2', '\x2BD', '\x2BF', '\x5', '\xDC', 
		'o', '\x2', '\x2BE', '\x2BD', '\x3', '\x2', '\x2', '\x2', '\x2BE', '\x2BF', 
		'\x3', '\x2', '\x2', '\x2', '\x2BF', '\x2C1', '\x3', '\x2', '\x2', '\x2', 
		'\x2C0', '\x2C2', '\x5', '\x158', '\xAD', '\x2', '\x2C1', '\x2C0', '\x3', 
		'\x2', '\x2', '\x2', '\x2C1', '\x2C2', '\x3', '\x2', '\x2', '\x2', '\x2C2', 
		'\x37', '\x3', '\x2', '\x2', '\x2', '\x2C3', '\x2C4', '\a', ' ', '\x2', 
		'\x2', '\x2C4', '\x2C8', '\x5', '@', '!', '\x2', '\x2C5', '\x2C7', '\x5', 
		'\x1F4', '\xFB', '\x2', '\x2C6', '\x2C5', '\x3', '\x2', '\x2', '\x2', 
		'\x2C7', '\x2CA', '\x3', '\x2', '\x2', '\x2', '\x2C8', '\x2C6', '\x3', 
		'\x2', '\x2', '\x2', '\x2C8', '\x2C9', '\x3', '\x2', '\x2', '\x2', '\x2C9', 
		'\x2CE', '\x3', '\x2', '\x2', '\x2', '\x2CA', '\x2C8', '\x3', '\x2', '\x2', 
		'\x2', '\x2CB', '\x2CD', '\x5', 'z', '>', '\x2', '\x2CC', '\x2CB', '\x3', 
		'\x2', '\x2', '\x2', '\x2CD', '\x2D0', '\x3', '\x2', '\x2', '\x2', '\x2CE', 
		'\x2CC', '\x3', '\x2', '\x2', '\x2', '\x2CE', '\x2CF', '\x3', '\x2', '\x2', 
		'\x2', '\x2CF', '\x2D1', '\x3', '\x2', '\x2', '\x2', '\x2D0', '\x2CE', 
		'\x3', '\x2', '\x2', '\x2', '\x2D1', '\x2D2', '\a', '\x1A', '\x2', '\x2', 
		'\x2D2', '\x2D3', '\a', ' ', '\x2', '\x2', '\x2D3', '\x2D4', '\a', '\x8C', 
		'\x2', '\x2', '\x2D4', '\x39', '\x3', '\x2', '\x2', '\x2', '\x2D5', '\x2EC', 
		'\x5', '\x1C8', '\xE5', '\x2', '\x2D6', '\x2EC', '\x5', '\x1C6', '\xE4', 
		'\x2', '\x2D7', '\x2EC', '\x5', '\x1EC', '\xF7', '\x2', '\x2D8', '\x2EC', 
		'\x5', '\x1D8', '\xED', '\x2', '\x2D9', '\x2EC', '\x5', '~', '@', '\x2', 
		'\x2DA', '\x2EC', '\x5', '\x1A4', '\xD3', '\x2', '\x2DB', '\x2EC', '\x5', 
		'\x1F8', '\xFD', '\x2', '\x2DC', '\x2EC', '\x5', '\xC6', '\x64', '\x2', 
		'\x2DD', '\x2EC', '\x5', '\x12', '\n', '\x2', '\x2DE', '\x2EC', '\x5', 
		'Z', '.', '\x2', '\x2DF', '\x2EC', '\x5', '.', '\x18', '\x2', '\x2E0', 
		'\x2EC', '\x5', '\x32', '\x1A', '\x2', '\x2E1', '\x2EC', '\x5', '|', '?', 
		'\x2', '\x2E2', '\x2EC', '\x5', '\x94', 'K', '\x2', '\x2E3', '\x2EC', 
		'\x5', '\x1C0', '\xE1', '\x2', '\x2E4', '\x2EC', '\x5', '\x1F4', '\xFB', 
		'\x2', '\x2E5', '\x2EC', '\x5', '\xE4', 's', '\x2', '\x2E6', '\x2EC', 
		'\x5', '\xE2', 'r', '\x2', '\x2E7', '\x2EC', '\x5', '\x134', '\x9B', '\x2', 
		'\x2E8', '\x2EC', '\x5', '\x1C2', '\xE2', '\x2', '\x2E9', '\x2EC', '\x5', 
		'\x172', '\xBA', '\x2', '\x2EA', '\x2EC', '\x5', '\x1E4', '\xF3', '\x2', 
		'\x2EB', '\x2D5', '\x3', '\x2', '\x2', '\x2', '\x2EB', '\x2D6', '\x3', 
		'\x2', '\x2', '\x2', '\x2EB', '\x2D7', '\x3', '\x2', '\x2', '\x2', '\x2EB', 
		'\x2D8', '\x3', '\x2', '\x2', '\x2', '\x2EB', '\x2D9', '\x3', '\x2', '\x2', 
		'\x2', '\x2EB', '\x2DA', '\x3', '\x2', '\x2', '\x2', '\x2EB', '\x2DB', 
		'\x3', '\x2', '\x2', '\x2', '\x2EB', '\x2DC', '\x3', '\x2', '\x2', '\x2', 
		'\x2EB', '\x2DD', '\x3', '\x2', '\x2', '\x2', '\x2EB', '\x2DE', '\x3', 
		'\x2', '\x2', '\x2', '\x2EB', '\x2DF', '\x3', '\x2', '\x2', '\x2', '\x2EB', 
		'\x2E0', '\x3', '\x2', '\x2', '\x2', '\x2EB', '\x2E1', '\x3', '\x2', '\x2', 
		'\x2', '\x2EB', '\x2E2', '\x3', '\x2', '\x2', '\x2', '\x2EB', '\x2E3', 
		'\x3', '\x2', '\x2', '\x2', '\x2EB', '\x2E4', '\x3', '\x2', '\x2', '\x2', 
		'\x2EB', '\x2E5', '\x3', '\x2', '\x2', '\x2', '\x2EB', '\x2E6', '\x3', 
		'\x2', '\x2', '\x2', '\x2EB', '\x2E7', '\x3', '\x2', '\x2', '\x2', '\x2EB', 
		'\x2E8', '\x3', '\x2', '\x2', '\x2', '\x2EB', '\x2E9', '\x3', '\x2', '\x2', 
		'\x2', '\x2EB', '\x2EA', '\x3', '\x2', '\x2', '\x2', '\x2EC', ';', '\x3', 
		'\x2', '\x2', '\x2', '\x2ED', '\x2EF', '\x5', ':', '\x1E', '\x2', '\x2EE', 
		'\x2ED', '\x3', '\x2', '\x2', '\x2', '\x2EF', '\x2F2', '\x3', '\x2', '\x2', 
		'\x2', '\x2F0', '\x2EE', '\x3', '\x2', '\x2', '\x2', '\x2F0', '\x2F1', 
		'\x3', '\x2', '\x2', '\x2', '\x2F1', '=', '\x3', '\x2', '\x2', '\x2', 
		'\x2F2', '\x2F0', '\x3', '\x2', '\x2', '\x2', '\x2F3', '\x2F7', '\x5', 
		'\xD8', 'm', '\x2', '\x2F4', '\x2F5', '\x5', '\xDC', 'o', '\x2', '\x2F5', 
		'\x2F6', '\a', '\x8C', '\x2', '\x2', '\x2F6', '\x2F8', '\x3', '\x2', '\x2', 
		'\x2', '\x2F7', '\x2F4', '\x3', '\x2', '\x2', '\x2', '\x2F7', '\x2F8', 
		'\x3', '\x2', '\x2', '\x2', '\x2F8', '\x2FA', '\x3', '\x2', '\x2', '\x2', 
		'\x2F9', '\x2F3', '\x3', '\x2', '\x2', '\x2', '\x2F9', '\x2FA', '\x3', 
		'\x2', '\x2', '\x2', '\x2FA', '\x301', '\x3', '\x2', '\x2', '\x2', '\x2FB', 
		'\x2FF', '\x5', '\x154', '\xAB', '\x2', '\x2FC', '\x2FD', '\x5', '\x158', 
		'\xAD', '\x2', '\x2FD', '\x2FE', '\a', '\x8C', '\x2', '\x2', '\x2FE', 
		'\x300', '\x3', '\x2', '\x2', '\x2', '\x2FF', '\x2FC', '\x3', '\x2', '\x2', 
		'\x2', '\x2FF', '\x300', '\x3', '\x2', '\x2', '\x2', '\x300', '\x302', 
		'\x3', '\x2', '\x2', '\x2', '\x301', '\x2FB', '\x3', '\x2', '\x2', '\x2', 
		'\x301', '\x302', '\x3', '\x2', '\x2', '\x2', '\x302', '?', '\x3', '\x2', 
		'\x2', '\x2', '\x303', '\x308', '\x5', '\xE8', 'u', '\x2', '\x304', '\x305', 
		'\a', '\x8F', '\x2', '\x2', '\x305', '\x306', '\x5', '\xF0', 'y', '\x2', 
		'\x306', '\x307', '\a', '\x90', '\x2', '\x2', '\x307', '\x309', '\x3', 
		'\x2', '\x2', '\x2', '\x308', '\x304', '\x3', '\x2', '\x2', '\x2', '\x308', 
		'\x309', '\x3', '\x2', '\x2', '\x2', '\x309', '\x30C', '\x3', '\x2', '\x2', 
		'\x2', '\x30A', '\x30C', '\x5', '\x126', '\x94', '\x2', '\x30B', '\x303', 
		'\x3', '\x2', '\x2', '\x2', '\x30B', '\x30A', '\x3', '\x2', '\x2', '\x2', 
		'\x30C', '\x41', '\x3', '\x2', '\x2', '\x2', '\x30D', '\x30E', '\x5', 
		'\x112', '\x8A', '\x2', '\x30E', '\x313', '\a', '\xF', '\x2', '\x2', '\x30F', 
		'\x310', '\a', '\x8F', '\x2', '\x2', '\x310', '\x311', '\x5', '\xC2', 
		'\x62', '\x2', '\x311', '\x312', '\a', '\x90', '\x2', '\x2', '\x312', 
		'\x314', '\x3', '\x2', '\x2', '\x2', '\x313', '\x30F', '\x3', '\x2', '\x2', 
		'\x2', '\x313', '\x314', '\x3', '\x2', '\x2', '\x2', '\x314', '\x316', 
		'\x3', '\x2', '\x2', '\x2', '\x315', '\x317', '\a', '+', '\x2', '\x2', 
		'\x316', '\x315', '\x3', '\x2', '\x2', '\x2', '\x316', '\x317', '\x3', 
		'\x2', '\x2', '\x2', '\x317', '\x318', '\x3', '\x2', '\x2', '\x2', '\x318', 
		'\x319', '\x5', '>', ' ', '\x2', '\x319', '\x31A', '\x5', '<', '\x1F', 
		'\x2', '\x31A', '\x31B', '\a', '\xE', '\x2', '\x2', '\x31B', '\x31C', 
		'\x5', '\x44', '#', '\x2', '\x31C', '\x31D', '\a', '\x1A', '\x2', '\x2', 
		'\x31D', '\x31F', '\a', '\xF', '\x2', '\x2', '\x31E', '\x320', '\x5', 
		'\xE8', 'u', '\x2', '\x31F', '\x31E', '\x3', '\x2', '\x2', '\x2', '\x31F', 
		'\x320', '\x3', '\x2', '\x2', '\x2', '\x320', '\x321', '\x3', '\x2', '\x2', 
		'\x2', '\x321', '\x322', '\a', '\x8C', '\x2', '\x2', '\x322', '\x43', 
		'\x3', '\x2', '\x2', '\x2', '\x323', '\x325', '\x5', '\x1E', '\x10', '\x2', 
		'\x324', '\x323', '\x3', '\x2', '\x2', '\x2', '\x325', '\x328', '\x3', 
		'\x2', '\x2', '\x2', '\x326', '\x324', '\x3', '\x2', '\x2', '\x2', '\x326', 
		'\x327', '\x3', '\x2', '\x2', '\x2', '\x327', '\x45', '\x3', '\x2', '\x2', 
		'\x2', '\x328', '\x326', '\x3', '\x2', '\x2', '\x2', '\x329', '\x32B', 
		'\a', 'I', '\x2', '\x2', '\x32A', '\x32C', '\x5', '\x6', '\x4', '\x2', 
		'\x32B', '\x32A', '\x3', '\x2', '\x2', '\x2', '\x32B', '\x32C', '\x3', 
		'\x2', '\x2', '\x2', '\x32C', '\x32E', '\x3', '\x2', '\x2', '\x2', '\x32D', 
		'\x32F', '\x5', '\x1E6', '\xF4', '\x2', '\x32E', '\x32D', '\x3', '\x2', 
		'\x2', '\x2', '\x32E', '\x32F', '\x3', '\x2', '\x2', '\x2', '\x32F', '\x330', 
		'\x3', '\x2', '\x2', '\x2', '\x330', '\x331', '\x5', '\x1E2', '\xF2', 
		'\x2', '\x331', '\x332', '\a', '\x8C', '\x2', '\x2', '\x332', 'G', '\x3', 
		'\x2', '\x2', '\x2', '\x333', '\x335', '\x5', 'L', '\'', '\x2', '\x334', 
		'\x333', '\x3', '\x2', '\x2', '\x2', '\x334', '\x335', '\x3', '\x2', '\x2', 
		'\x2', '\x335', '\x336', '\x3', '\x2', '\x2', '\x2', '\x336', '\x337', 
		'\x5', '\x126', '\x94', '\x2', '\x337', '\x338', '\a', '\x87', '\x2', 
		'\x2', '\x338', '\x339', '\x5', '\xC2', '\x62', '\x2', '\x339', 'I', '\x3', 
		'\x2', '\x2', '\x2', '\x33A', '\x33F', '\x5', 'H', '%', '\x2', '\x33B', 
		'\x33C', '\a', '\x8D', '\x2', '\x2', '\x33C', '\x33E', '\x5', 'H', '%', 
		'\x2', '\x33D', '\x33B', '\x3', '\x2', '\x2', '\x2', '\x33E', '\x341', 
		'\x3', '\x2', '\x2', '\x2', '\x33F', '\x33D', '\x3', '\x2', '\x2', '\x2', 
		'\x33F', '\x340', '\x3', '\x2', '\x2', '\x2', '\x340', 'K', '\x3', '\x2', 
		'\x2', '\x2', '\x341', '\x33F', '\x3', '\x2', '\x2', '\x2', '\x342', '\x343', 
		'\a', ' ', '\x2', '\x2', '\x343', '\x344', '\x5', '\x126', '\x94', '\x2', 
		'\x344', '\x345', '\a', 'j', '\x2', '\x2', '\x345', 'M', '\x3', '\x2', 
		'\x2', '\x2', '\x346', '\x348', '\x5', '\x112', '\x8A', '\x2', '\x347', 
		'\x346', '\x3', '\x2', '\x2', '\x2', '\x347', '\x348', '\x3', '\x2', '\x2', 
		'\x2', '\x348', '\x349', '\x3', '\x2', '\x2', '\x2', '\x349', '\x34B', 
		'\a', '\x11', '\x2', '\x2', '\x34A', '\x34C', '\x5', 'J', '&', '\x2', 
		'\x34B', '\x34A', '\x3', '\x2', '\x2', '\x2', '\x34B', '\x34C', '\x3', 
		'\x2', '\x2', '\x2', '\x34C', '\x34F', '\x3', '\x2', '\x2', '\x2', '\x34D', 
		'\x34E', '\a', 'n', '\x2', '\x2', '\x34E', '\x350', '\x5', 'l', '\x37', 
		'\x2', '\x34F', '\x34D', '\x3', '\x2', '\x2', '\x2', '\x34F', '\x350', 
		'\x3', '\x2', '\x2', '\x2', '\x350', '\x351', '\x3', '\x2', '\x2', '\x2', 
		'\x351', '\x352', '\a', '\x8C', '\x2', '\x2', '\x352', 'O', '\x3', '\x2', 
		'\x2', '\x2', '\x353', '\x355', '\x5', '\x112', '\x8A', '\x2', '\x354', 
		'\x353', '\x3', '\x2', '\x2', '\x2', '\x354', '\x355', '\x3', '\x2', '\x2', 
		'\x2', '\x355', '\x356', '\x3', '\x2', '\x2', '\x2', '\x356', '\x357', 
		'\a', '\x14', '\x2', '\x2', '\x357', '\x358', '\x5', '\xC2', '\x62', '\x2', 
		'\x358', '\x35A', '\a', '+', '\x2', '\x2', '\x359', '\x35B', '\x5', 'R', 
		'*', '\x2', '\x35A', '\x359', '\x3', '\x2', '\x2', '\x2', '\x35B', '\x35C', 
		'\x3', '\x2', '\x2', '\x2', '\x35C', '\x35A', '\x3', '\x2', '\x2', '\x2', 
		'\x35C', '\x35D', '\x3', '\x2', '\x2', '\x2', '\x35D', '\x35E', '\x3', 
		'\x2', '\x2', '\x2', '\x35E', '\x35F', '\a', '\x1A', '\x2', '\x2', '\x35F', 
		'\x361', '\a', '\x14', '\x2', '\x2', '\x360', '\x362', '\x5', '\xE8', 
		'u', '\x2', '\x361', '\x360', '\x3', '\x2', '\x2', '\x2', '\x361', '\x362', 
		'\x3', '\x2', '\x2', '\x2', '\x362', '\x363', '\x3', '\x2', '\x2', '\x2', 
		'\x363', '\x364', '\a', '\x8C', '\x2', '\x2', '\x364', 'Q', '\x3', '\x2', 
		'\x2', '\x2', '\x365', '\x366', '\a', 'n', '\x2', '\x2', '\x366', '\x367', 
		'\x5', 'V', ',', '\x2', '\x367', '\x368', '\a', '\x87', '\x2', '\x2', 
		'\x368', '\x369', '\x5', '\x19A', '\xCE', '\x2', '\x369', 'S', '\x3', 
		'\x2', '\x2', '\x2', '\x36A', '\x36F', '\x5', '\xE8', 'u', '\x2', '\x36B', 
		'\x36F', '\x5', '\x1AC', '\xD7', '\x2', '\x36C', '\x36F', '\x5', '\x96', 
		'L', '\x2', '\x36D', '\x36F', '\a', '@', '\x2', '\x2', '\x36E', '\x36A', 
		'\x3', '\x2', '\x2', '\x2', '\x36E', '\x36B', '\x3', '\x2', '\x2', '\x2', 
		'\x36E', '\x36C', '\x3', '\x2', '\x2', '\x2', '\x36E', '\x36D', '\x3', 
		'\x2', '\x2', '\x2', '\x36F', 'U', '\x3', '\x2', '\x2', '\x2', '\x370', 
		'\x375', '\x5', 'T', '+', '\x2', '\x371', '\x372', '\a', '\x9B', '\x2', 
		'\x2', '\x372', '\x374', '\x5', 'T', '+', '\x2', '\x373', '\x371', '\x3', 
		'\x2', '\x2', '\x2', '\x374', '\x377', '\x3', '\x2', '\x2', '\x2', '\x375', 
		'\x373', '\x3', '\x2', '\x2', '\x2', '\x375', '\x376', '\x3', '\x2', '\x2', 
		'\x2', '\x376', 'W', '\x3', '\x2', '\x2', '\x2', '\x377', '\x375', '\x3', 
		'\x2', '\x2', '\x2', '\x378', '\x379', '\a', ' ', '\x2', '\x2', '\x379', 
		'\x37D', '\x5', '^', '\x30', '\x2', '\x37A', '\x37B', '\x5', '\x36', '\x1C', 
		'\x2', '\x37B', '\x37C', '\a', '\x8C', '\x2', '\x2', '\x37C', '\x37E', 
		'\x3', '\x2', '\x2', '\x2', '\x37D', '\x37A', '\x3', '\x2', '\x2', '\x2', 
		'\x37D', '\x37E', '\x3', '\x2', '\x2', '\x2', '\x37E', '\x380', '\x3', 
		'\x2', '\x2', '\x2', '\x37F', '\x381', '\x5', '\x38', '\x1D', '\x2', '\x380', 
		'\x37F', '\x3', '\x2', '\x2', '\x2', '\x380', '\x381', '\x3', '\x2', '\x2', 
		'\x2', '\x381', '\x382', '\x3', '\x2', '\x2', '\x2', '\x382', '\x383', 
		'\a', '\x1A', '\x2', '\x2', '\x383', '\x384', '\a', ' ', '\x2', '\x2', 
		'\x384', '\x385', '\a', '\x8C', '\x2', '\x2', '\x385', 'Y', '\x3', '\x2', 
		'\x2', '\x2', '\x386', '\x387', '\a', '\x15', '\x2', '\x2', '\x387', '\x389', 
		'\x5', '\xE8', 'u', '\x2', '\x388', '\x38A', '\a', '+', '\x2', '\x2', 
		'\x389', '\x388', '\x3', '\x2', '\x2', '\x2', '\x389', '\x38A', '\x3', 
		'\x2', '\x2', '\x2', '\x38A', '\x38C', '\x3', '\x2', '\x2', '\x2', '\x38B', 
		'\x38D', '\x5', '\xD8', 'm', '\x2', '\x38C', '\x38B', '\x3', '\x2', '\x2', 
		'\x2', '\x38C', '\x38D', '\x3', '\x2', '\x2', '\x2', '\x38D', '\x38F', 
		'\x3', '\x2', '\x2', '\x2', '\x38E', '\x390', '\x5', '\x154', '\xAB', 
		'\x2', '\x38F', '\x38E', '\x3', '\x2', '\x2', '\x2', '\x38F', '\x390', 
		'\x3', '\x2', '\x2', '\x2', '\x390', '\x391', '\x3', '\x2', '\x2', '\x2', 
		'\x391', '\x392', '\a', '\x1A', '\x2', '\x2', '\x392', '\x394', '\a', 
		'\x15', '\x2', '\x2', '\x393', '\x395', '\x5', '\xE8', 'u', '\x2', '\x394', 
		'\x393', '\x3', '\x2', '\x2', '\x2', '\x394', '\x395', '\x3', '\x2', '\x2', 
		'\x2', '\x395', '\x396', '\x3', '\x2', '\x2', '\x2', '\x396', '\x397', 
		'\a', '\x8C', '\x2', '\x2', '\x397', '[', '\x3', '\x2', '\x2', '\x2', 
		'\x398', '\x399', '\x5', '\x112', '\x8A', '\x2', '\x399', '\x39B', '\x5', 
		'\xF4', '{', '\x2', '\x39A', '\x39C', '\x5', '\xDC', 'o', '\x2', '\x39B', 
		'\x39A', '\x3', '\x2', '\x2', '\x2', '\x39B', '\x39C', '\x3', '\x2', '\x2', 
		'\x2', '\x39C', '\x39E', '\x3', '\x2', '\x2', '\x2', '\x39D', '\x39F', 
		'\x5', '\x158', '\xAD', '\x2', '\x39E', '\x39D', '\x3', '\x2', '\x2', 
		'\x2', '\x39E', '\x39F', '\x3', '\x2', '\x2', '\x2', '\x39F', '\x3A0', 
		'\x3', '\x2', '\x2', '\x2', '\x3A0', '\x3A1', '\a', '\x8C', '\x2', '\x2', 
		'\x3A1', ']', '\x3', '\x2', '\x2', '\x2', '\x3A2', '\x3A3', '\x5', '\xF6', 
		'|', '\x2', '\x3A3', '\x3A4', '\a', '\x93', '\x2', '\x2', '\x3A4', '\x3A5', 
		'\x5', '\x126', '\x94', '\x2', '\x3A5', '_', '\x3', '\x2', '\x2', '\x2', 
		'\x3A6', '\x3A9', '\x5', '\"', '\x12', '\x2', '\x3A7', '\x3A9', '\x5', 
		'\x17E', '\xC0', '\x2', '\x3A8', '\x3A6', '\x3', '\x2', '\x2', '\x2', 
		'\x3A8', '\x3A7', '\x3', '\x2', '\x2', '\x2', '\x3A9', '\x61', '\x3', 
		'\x2', '\x2', '\x2', '\x3AA', '\x3AD', '\x5', '$', '\x13', '\x2', '\x3AB', 
		'\x3AD', '\x5', '\x180', '\xC1', '\x2', '\x3AC', '\x3AA', '\x3', '\x2', 
		'\x2', '\x2', '\x3AC', '\x3AB', '\x3', '\x2', '\x2', '\x2', '\x3AD', '\x63', 
		'\x3', '\x2', '\x2', '\x2', '\x3AE', '\x3B0', '\x5', '\x112', '\x8A', 
		'\x2', '\x3AF', '\x3AE', '\x3', '\x2', '\x2', '\x2', '\x3AF', '\x3B0', 
		'\x3', '\x2', '\x2', '\x2', '\x3B0', '\x3B2', '\x3', '\x2', '\x2', '\x2', 
		'\x3B1', '\x3B3', '\a', '\x44', '\x2', '\x2', '\x3B2', '\x3B1', '\x3', 
		'\x2', '\x2', '\x2', '\x3B2', '\x3B3', '\x3', '\x2', '\x2', '\x2', '\x3B3', 
		'\x3B4', '\x3', '\x2', '\x2', '\x2', '\x3B4', '\x3B5', '\x5', '&', '\x14', 
		'\x2', '\x3B5', '\x3B6', '\a', '\x8C', '\x2', '\x2', '\x3B6', '\x65', 
		'\x3', '\x2', '\x2', '\x2', '\x3B7', '\x3B9', '\x5', '\x112', '\x8A', 
		'\x2', '\x3B8', '\x3B7', '\x3', '\x2', '\x2', '\x2', '\x3B8', '\x3B9', 
		'\x3', '\x2', '\x2', '\x2', '\x3B9', '\x3BA', '\x3', '\x2', '\x2', '\x2', 
		'\x3BA', '\x3BC', '\a', '\x11', '\x2', '\x2', '\x3BB', '\x3BD', '\x5', 
		'J', '&', '\x2', '\x3BC', '\x3BB', '\x3', '\x2', '\x2', '\x2', '\x3BC', 
		'\x3BD', '\x3', '\x2', '\x2', '\x2', '\x3BD', '\x3BF', '\x3', '\x2', '\x2', 
		'\x2', '\x3BE', '\x3C0', '\x5', '\x196', '\xCC', '\x2', '\x3BF', '\x3BE', 
		'\x3', '\x2', '\x2', '\x2', '\x3BF', '\x3C0', '\x3', '\x2', '\x2', '\x2', 
		'\x3C0', '\x3C3', '\x3', '\x2', '\x2', '\x2', '\x3C1', '\x3C2', '\a', 
		'n', '\x2', '\x2', '\x3C2', '\x3C4', '\x5', 'l', '\x37', '\x2', '\x3C3', 
		'\x3C1', '\x3', '\x2', '\x2', '\x2', '\x3C3', '\x3C4', '\x3', '\x2', '\x2', 
		'\x2', '\x3C4', '\x3C5', '\x3', '\x2', '\x2', '\x2', '\x3C5', '\x3C6', 
		'\a', '\x8C', '\x2', '\x2', '\x3C6', 'g', '\x3', '\x2', '\x2', '\x2', 
		'\x3C7', '\x3C9', '\x5', '\x112', '\x8A', '\x2', '\x3C8', '\x3C7', '\x3', 
		'\x2', '\x2', '\x2', '\x3C8', '\x3C9', '\x3', '\x2', '\x2', '\x2', '\x3C9', 
		'\x3CB', '\x3', '\x2', '\x2', '\x2', '\x3CA', '\x3CC', '\a', '\x44', '\x2', 
		'\x2', '\x3CB', '\x3CA', '\x3', '\x2', '\x2', '\x2', '\x3CB', '\x3CC', 
		'\x3', '\x2', '\x2', '\x2', '\x3CC', '\x3CD', '\x3', '\x2', '\x2', '\x2', 
		'\x3CD', '\x3CE', '\x5', '\x164', '\xB3', '\x2', '\x3CE', '\x3CF', '\a', 
		'\x8C', '\x2', '\x2', '\x3CF', 'i', '\x3', '\x2', '\x2', '\x2', '\x3D0', 
		'\x3D2', '\x5', '\x112', '\x8A', '\x2', '\x3D1', '\x3D0', '\x3', '\x2', 
		'\x2', '\x2', '\x3D1', '\x3D2', '\x3', '\x2', '\x2', '\x2', '\x3D2', '\x3D4', 
		'\x3', '\x2', '\x2', '\x2', '\x3D3', '\x3D5', '\a', '\x44', '\x2', '\x2', 
		'\x3D4', '\x3D3', '\x3', '\x2', '\x2', '\x2', '\x3D4', '\x3D5', '\x3', 
		'\x2', '\x2', '\x2', '\x3D5', '\x3D8', '\x3', '\x2', '\x2', '\x2', '\x3D6', 
		'\x3D9', '\x5', 'p', '\x39', '\x2', '\x3D7', '\x3D9', '\x5', '\x192', 
		'\xCA', '\x2', '\x3D8', '\x3D6', '\x3', '\x2', '\x2', '\x2', '\x3D8', 
		'\x3D7', '\x3', '\x2', '\x2', '\x2', '\x3D9', 'k', '\x3', '\x2', '\x2', 
		'\x2', '\x3DA', '\x3DB', '\x5', '\xC2', '\x62', '\x2', '\x3DB', 'm', '\x3', 
		'\x2', '\x2', '\x2', '\x3DC', '\x3DD', '\a', 'i', '\x2', '\x2', '\x3DD', 
		'\x3DE', '\x5', 'l', '\x37', '\x2', '\x3DE', 'o', '\x3', '\x2', '\x2', 
		'\x2', '\x3DF', '\x3E0', '\x5', '\x1DE', '\xF0', '\x2', '\x3E0', '\x3E1', 
		'\a', '\x85', '\x2', '\x2', '\x3E1', '\x3E2', '\x5', '\x140', '\xA1', 
		'\x2', '\x3E2', '\x3E3', '\x5', 'r', ':', '\x2', '\x3E3', '\x3E4', '\a', 
		'\x8C', '\x2', '\x2', '\x3E4', 'q', '\x3', '\x2', '\x2', '\x2', '\x3E5', 
		'\x3EC', '\x5', '\x1FC', '\xFF', '\x2', '\x3E6', '\x3E7', '\a', 'n', '\x2', 
		'\x2', '\x3E7', '\x3EA', '\x5', 'l', '\x37', '\x2', '\x3E8', '\x3E9', 
		'\a', '\x1C', '\x2', '\x2', '\x3E9', '\x3EB', '\x5', 'r', ':', '\x2', 
		'\x3EA', '\x3E8', '\x3', '\x2', '\x2', '\x2', '\x3EA', '\x3EB', '\x3', 
		'\x2', '\x2', '\x2', '\x3EB', '\x3ED', '\x3', '\x2', '\x2', '\x2', '\x3EC', 
		'\x3E6', '\x3', '\x2', '\x2', '\x2', '\x3EC', '\x3ED', '\x3', '\x2', '\x2', 
		'\x2', '\x3ED', 's', '\x3', '\x2', '\x2', '\x2', '\x3EE', '\x3EF', '\a', 
		'\x16', '\x2', '\x2', '\x3EF', '\x3F0', '\x5', '\xE8', 'u', '\x2', '\x3F0', 
		'\x3F1', '\a', '<', '\x2', '\x2', '\x3F1', '\x3F2', '\x5', '\x126', '\x94', 
		'\x2', '\x3F2', '\x3F3', '\a', '+', '\x2', '\x2', '\x3F3', '\x3F4', '\x5', 
		'x', '=', '\x2', '\x3F4', '\x3F5', '\x5', '\x38', '\x1D', '\x2', '\x3F5', 
		'\x3F7', '\a', '\x1A', '\x2', '\x2', '\x3F6', '\x3F8', '\a', '\x16', '\x2', 
		'\x2', '\x3F7', '\x3F6', '\x3', '\x2', '\x2', '\x2', '\x3F7', '\x3F8', 
		'\x3', '\x2', '\x2', '\x2', '\x3F8', '\x3FA', '\x3', '\x2', '\x2', '\x2', 
		'\x3F9', '\x3FB', '\x5', '\xE8', 'u', '\x2', '\x3FA', '\x3F9', '\x3', 
		'\x2', '\x2', '\x2', '\x3FA', '\x3FB', '\x3', '\x2', '\x2', '\x2', '\x3FB', 
		'\x3FC', '\x3', '\x2', '\x2', '\x2', '\x3FC', '\x3FD', '\a', '\x8C', '\x2', 
		'\x2', '\x3FD', 'u', '\x3', '\x2', '\x2', '\x2', '\x3FE', '\x402', '\x5', 
		'\x1F4', '\xFB', '\x2', '\x3FF', '\x402', '\x5', '\x32', '\x1A', '\x2', 
		'\x400', '\x402', '\x5', '\xE2', 'r', '\x2', '\x401', '\x3FE', '\x3', 
		'\x2', '\x2', '\x2', '\x401', '\x3FF', '\x3', '\x2', '\x2', '\x2', '\x401', 
		'\x400', '\x3', '\x2', '\x2', '\x2', '\x402', 'w', '\x3', '\x2', '\x2', 
		'\x2', '\x403', '\x405', '\x5', 'v', '<', '\x2', '\x404', '\x403', '\x3', 
		'\x2', '\x2', '\x2', '\x405', '\x408', '\x3', '\x2', '\x2', '\x2', '\x406', 
		'\x404', '\x3', '\x2', '\x2', '\x2', '\x406', '\x407', '\x3', '\x2', '\x2', 
		'\x2', '\x407', 'y', '\x3', '\x2', '\x2', '\x2', '\x408', '\x406', '\x3', 
		'\x2', '\x2', '\x2', '\x409', '\x40C', '\x5', '\x38', '\x1D', '\x2', '\x40A', 
		'\x40C', '\x5', 'X', '-', '\x2', '\x40B', '\x409', '\x3', '\x2', '\x2', 
		'\x2', '\x40B', '\x40A', '\x3', '\x2', '\x2', '\x2', '\x40C', '{', '\x3', 
		'\x2', '\x2', '\x2', '\x40D', '\x40E', '\a', ' ', '\x2', '\x2', '\x40E', 
		'\x40F', '\x5', '^', '\x30', '\x2', '\x40F', '\x410', '\x5', '\x36', '\x1C', 
		'\x2', '\x410', '\x411', '\a', '\x8C', '\x2', '\x2', '\x411', '}', '\x3', 
		'\x2', '\x2', '\x2', '\x412', '\x413', '\a', '\x17', '\x2', '\x2', '\x413', 
		'\x414', '\x5', '\xEA', 'v', '\x2', '\x414', '\x415', '\a', '\x93', '\x2', 
		'\x2', '\x415', '\x418', '\x5', '\x1DA', '\xEE', '\x2', '\x416', '\x417', 
		'\a', '\x89', '\x2', '\x2', '\x417', '\x419', '\x5', '\xC2', '\x62', '\x2', 
		'\x418', '\x416', '\x3', '\x2', '\x2', '\x2', '\x418', '\x419', '\x3', 
		'\x2', '\x2', '\x2', '\x419', '\x41A', '\x3', '\x2', '\x2', '\x2', '\x41A', 
		'\x41B', '\a', '\x8C', '\x2', '\x2', '\x41B', '\x7F', '\x3', '\x2', '\x2', 
		'\x2', '\x41C', '\x41D', '\a', '\v', '\x2', '\x2', '\x41D', '\x41E', '\x5', 
		'\xEE', 'x', '\x2', '\x41E', '\x41F', '\a', '<', '\x2', '\x2', '\x41F', 
		'\x420', '\x5', '\x1DA', '\xEE', '\x2', '\x420', '\x81', '\x3', '\x2', 
		'\x2', '\x2', '\x421', '\x422', '\a', '\v', '\x2', '\x2', '\x422', '\x423', 
		'\x5', '\xEE', 'x', '\x2', '\x423', '\x424', '\a', '<', '\x2', '\x2', 
		'\x424', '\x425', '\x5', '\x1C4', '\xE3', '\x2', '\x425', '\x83', '\x3', 
		'\x2', '\x2', '\x2', '\x426', '\x429', '\x5', '\x17C', '\xBF', '\x2', 
		'\x427', '\x429', '\x5', '\xEE', 'x', '\x2', '\x428', '\x426', '\x3', 
		'\x2', '\x2', '\x2', '\x428', '\x427', '\x3', '\x2', '\x2', '\x2', '\x429', 
		'\x85', '\x3', '\x2', '\x2', '\x2', '\x42A', '\x42C', '\x5', '\x88', '\x45', 
		'\x2', '\x42B', '\x42A', '\x3', '\x2', '\x2', '\x2', '\x42C', '\x42F', 
		'\x3', '\x2', '\x2', '\x2', '\x42D', '\x42B', '\x3', '\x2', '\x2', '\x2', 
		'\x42D', '\x42E', '\x3', '\x2', '\x2', '\x2', '\x42E', '\x87', '\x3', 
		'\x2', '\x2', '\x2', '\x42F', '\x42D', '\x3', '\x2', '\x2', '\x2', '\x430', 
		'\x433', '\x5', '\x114', '\x8B', '\x2', '\x431', '\x433', '\x5', '\x1F4', 
		'\xFB', '\x2', '\x432', '\x430', '\x3', '\x2', '\x2', '\x2', '\x432', 
		'\x431', '\x3', '\x2', '\x2', '\x2', '\x433', '\x89', '\x3', '\x2', '\x2', 
		'\x2', '\x434', '\x43B', '\a', '\x65', '\x2', '\x2', '\x435', '\x436', 
		'\a', 'L', '\x2', '\x2', '\x436', '\x438', '\x5', '\xC2', '\x62', '\x2', 
		'\x437', '\x435', '\x3', '\x2', '\x2', '\x2', '\x437', '\x438', '\x3', 
		'\x2', '\x2', '\x2', '\x438', '\x439', '\x3', '\x2', '\x2', '\x2', '\x439', 
		'\x43B', '\a', ')', '\x2', '\x2', '\x43A', '\x434', '\x3', '\x2', '\x2', 
		'\x2', '\x43A', '\x437', '\x3', '\x2', '\x2', '\x2', '\x43B', '\x8B', 
		'\x3', '\x2', '\x2', '\x2', '\x43C', '\x43E', '\x5', '\x8E', 'H', '\x2', 
		'\x43D', '\x43C', '\x3', '\x2', '\x2', '\x2', '\x43E', '\x441', '\x3', 
		'\x2', '\x2', '\x2', '\x43F', '\x43D', '\x3', '\x2', '\x2', '\x2', '\x43F', 
		'\x440', '\x3', '\x2', '\x2', '\x2', '\x440', '\x442', '\x3', '\x2', '\x2', 
		'\x2', '\x441', '\x43F', '\x3', '\x2', '\x2', '\x2', '\x442', '\x443', 
		'\a', '\x2', '\x2', '\x3', '\x443', '\x8D', '\x3', '\x2', '\x2', '\x2', 
		'\x444', '\x445', '\x5', '\x86', '\x44', '\x2', '\x445', '\x446', '\x5', 
		'\x116', '\x8C', '\x2', '\x446', '\x8F', '\x3', '\x2', '\x2', '\x2', '\x447', 
		'\x44A', '\x5', '\xE8', 'u', '\x2', '\x448', '\x44A', '\a', '\x81', '\x2', 
		'\x2', '\x449', '\x447', '\x3', '\x2', '\x2', '\x2', '\x449', '\x448', 
		'\x3', '\x2', '\x2', '\x2', '\x44A', '\x91', '\x3', '\x2', '\x2', '\x2', 
		'\x44B', '\x44C', '\t', '\x4', '\x2', '\x2', '\x44C', '\x93', '\x3', '\x2', 
		'\x2', '\x2', '\x44D', '\x44E', '\a', '\x18', '\x2', '\x2', '\x44E', '\x44F', 
		'\x5', '\xE6', 't', '\x2', '\x44F', '\x450', '\a', '\x6', '\x2', '\x2', 
		'\x450', '\x451', '\x5', '\xC2', '\x62', '\x2', '\x451', '\x452', '\a', 
		'\x8C', '\x2', '\x2', '\x452', '\x95', '\x3', '\x2', '\x2', '\x2', '\x453', 
		'\x456', '\x5', '\x1DA', '\xEE', '\x2', '\x454', '\x456', '\x5', '\x178', 
		'\xBD', '\x2', '\x455', '\x453', '\x3', '\x2', '\x2', '\x2', '\x455', 
		'\x454', '\x3', '\x2', '\x2', '\x2', '\x456', '\x97', '\x3', '\x2', '\x2', 
		'\x2', '\x457', '\x458', '\x5', 'V', ',', '\x2', '\x458', '\x459', '\a', 
		'\x87', '\x2', '\x2', '\x459', '\x45B', '\x3', '\x2', '\x2', '\x2', '\x45A', 
		'\x457', '\x3', '\x2', '\x2', '\x2', '\x45A', '\x45B', '\x3', '\x2', '\x2', 
		'\x2', '\x45B', '\x45C', '\x3', '\x2', '\x2', '\x2', '\x45C', '\x45D', 
		'\x5', '\xC2', '\x62', '\x2', '\x45D', '\x99', '\x3', '\x2', '\x2', '\x2', 
		'\x45E', '\x45F', '\x5', '\xEA', 'v', '\x2', '\x45F', '\x460', '\a', '\x93', 
		'\x2', '\x2', '\x460', '\x461', '\x5', '\x9E', 'P', '\x2', '\x461', '\x462', 
		'\a', '\x8C', '\x2', '\x2', '\x462', '\x9B', '\x3', '\x2', '\x2', '\x2', 
		'\x463', '\x464', '\x5', '\x1C4', '\xE3', '\x2', '\x464', '\x9D', '\x3', 
		'\x2', '\x2', '\x2', '\x465', '\x466', '\x5', '\x1DA', '\xEE', '\x2', 
		'\x466', '\x9F', '\x3', '\x2', '\x2', '\x2', '\x467', '\x468', '\a', '\x1B', 
		'\x2', '\x2', '\x468', '\x46D', '\x5', '\x126', '\x94', '\x2', '\x469', 
		'\x46A', '\a', '\x8F', '\x2', '\x2', '\x46A', '\x46B', '\x5', '\xE8', 
		'u', '\x2', '\x46B', '\x46C', '\a', '\x90', '\x2', '\x2', '\x46C', '\x46E', 
		'\x3', '\x2', '\x2', '\x2', '\x46D', '\x469', '\x3', '\x2', '\x2', '\x2', 
		'\x46D', '\x46E', '\x3', '\x2', '\x2', '\x2', '\x46E', '\x473', '\x3', 
		'\x2', '\x2', '\x2', '\x46F', '\x470', '\a', '\x16', '\x2', '\x2', '\x470', 
		'\x473', '\x5', '\x126', '\x94', '\x2', '\x471', '\x473', '\a', '>', '\x2', 
		'\x2', '\x472', '\x467', '\x3', '\x2', '\x2', '\x2', '\x472', '\x46F', 
		'\x3', '\x2', '\x2', '\x2', '\x472', '\x471', '\x3', '\x2', '\x2', '\x2', 
		'\x473', '\xA1', '\x3', '\x2', '\x2', '\x2', '\x474', '\x475', '\t', '\x5', 
		'\x2', '\x2', '\x475', '\xA3', '\x3', '\x2', '\x2', '\x2', '\x476', '\x478', 
		'\x5', '\xA2', 'R', '\x2', '\x477', '\x479', '\a', '\x8A', '\x2', '\x2', 
		'\x478', '\x477', '\x3', '\x2', '\x2', '\x2', '\x478', '\x479', '\x3', 
		'\x2', '\x2', '\x2', '\x479', '\xA5', '\x3', '\x2', '\x2', '\x2', '\x47A', 
		'\x47F', '\x5', '\xA4', 'S', '\x2', '\x47B', '\x47C', '\a', '\x8D', '\x2', 
		'\x2', '\x47C', '\x47E', '\x5', '\xA4', 'S', '\x2', '\x47D', '\x47B', 
		'\x3', '\x2', '\x2', '\x2', '\x47E', '\x481', '\x3', '\x2', '\x2', '\x2', 
		'\x47F', '\x47D', '\x3', '\x2', '\x2', '\x2', '\x47F', '\x480', '\x3', 
		'\x2', '\x2', '\x2', '\x480', '\xA7', '\x3', '\x2', '\x2', '\x2', '\x481', 
		'\x47F', '\x3', '\x2', '\x2', '\x2', '\x482', '\x483', '\a', '\x1B', '\x2', 
		'\x2', '\x483', '\x484', '\x5', '\xE8', 'u', '\x2', '\x484', '\x485', 
		'\a', '+', '\x2', '\x2', '\x485', '\x486', '\x5', '\xB0', 'Y', '\x2', 
		'\x486', '\x489', '\x5', '\xAC', 'W', '\x2', '\x487', '\x488', '\a', '\xE', 
		'\x2', '\x2', '\x488', '\x48A', '\x5', '\xB8', ']', '\x2', '\x489', '\x487', 
		'\x3', '\x2', '\x2', '\x2', '\x489', '\x48A', '\x3', '\x2', '\x2', '\x2', 
		'\x48A', '\x48B', '\x3', '\x2', '\x2', '\x2', '\x48B', '\x48D', '\a', 
		'\x1A', '\x2', '\x2', '\x48C', '\x48E', '\a', '\x1B', '\x2', '\x2', '\x48D', 
		'\x48C', '\x3', '\x2', '\x2', '\x2', '\x48D', '\x48E', '\x3', '\x2', '\x2', 
		'\x2', '\x48E', '\x490', '\x3', '\x2', '\x2', '\x2', '\x48F', '\x491', 
		'\x5', '\xE8', 'u', '\x2', '\x490', '\x48F', '\x3', '\x2', '\x2', '\x2', 
		'\x490', '\x491', '\x3', '\x2', '\x2', '\x2', '\x491', '\x492', '\x3', 
		'\x2', '\x2', '\x2', '\x492', '\x493', '\a', '\x8C', '\x2', '\x2', '\x493', 
		'\xA9', '\x3', '\x2', '\x2', '\x2', '\x494', '\x4A9', '\x5', '\x1C8', 
		'\xE5', '\x2', '\x495', '\x4A9', '\x5', '\x1C6', '\xE4', '\x2', '\x496', 
		'\x4A9', '\x5', '\x1EC', '\xF7', '\x2', '\x497', '\x4A9', '\x5', '\x1D8', 
		'\xED', '\x2', '\x498', '\x4A9', '\x5', '~', '@', '\x2', '\x499', '\x4A9', 
		'\x5', '\x1A4', '\xD3', '\x2', '\x49A', '\x4A9', '\x5', '\x1F8', '\xFD', 
		'\x2', '\x49B', '\x4A9', '\x5', '\xC6', '\x64', '\x2', '\x49C', '\x4A9', 
		'\x5', '\x12', '\n', '\x2', '\x49D', '\x4A9', '\x5', '.', '\x18', '\x2', 
		'\x49E', '\x4A9', '\x5', '\x32', '\x1A', '\x2', '\x49F', '\x4A9', '\x5', 
		'\x94', 'K', '\x2', '\x4A0', '\x4A9', '\x5', '\x1C0', '\xE1', '\x2', '\x4A1', 
		'\x4A9', '\x5', '\x1F4', '\xFB', '\x2', '\x4A2', '\x4A9', '\x5', '\xE4', 
		's', '\x2', '\x4A3', '\x4A9', '\x5', '\xE2', 'r', '\x2', '\x4A4', '\x4A9', 
		'\x5', '\x134', '\x9B', '\x2', '\x4A5', '\x4A9', '\x5', '\x1C2', '\xE2', 
		'\x2', '\x4A6', '\x4A9', '\x5', '\x172', '\xBA', '\x2', '\x4A7', '\x4A9', 
		'\x5', '\x1E4', '\xF3', '\x2', '\x4A8', '\x494', '\x3', '\x2', '\x2', 
		'\x2', '\x4A8', '\x495', '\x3', '\x2', '\x2', '\x2', '\x4A8', '\x496', 
		'\x3', '\x2', '\x2', '\x2', '\x4A8', '\x497', '\x3', '\x2', '\x2', '\x2', 
		'\x4A8', '\x498', '\x3', '\x2', '\x2', '\x2', '\x4A8', '\x499', '\x3', 
		'\x2', '\x2', '\x2', '\x4A8', '\x49A', '\x3', '\x2', '\x2', '\x2', '\x4A8', 
		'\x49B', '\x3', '\x2', '\x2', '\x2', '\x4A8', '\x49C', '\x3', '\x2', '\x2', 
		'\x2', '\x4A8', '\x49D', '\x3', '\x2', '\x2', '\x2', '\x4A8', '\x49E', 
		'\x3', '\x2', '\x2', '\x2', '\x4A8', '\x49F', '\x3', '\x2', '\x2', '\x2', 
		'\x4A8', '\x4A0', '\x3', '\x2', '\x2', '\x2', '\x4A8', '\x4A1', '\x3', 
		'\x2', '\x2', '\x2', '\x4A8', '\x4A2', '\x3', '\x2', '\x2', '\x2', '\x4A8', 
		'\x4A3', '\x3', '\x2', '\x2', '\x2', '\x4A8', '\x4A4', '\x3', '\x2', '\x2', 
		'\x2', '\x4A8', '\x4A5', '\x3', '\x2', '\x2', '\x2', '\x4A8', '\x4A6', 
		'\x3', '\x2', '\x2', '\x2', '\x4A8', '\x4A7', '\x3', '\x2', '\x2', '\x2', 
		'\x4A9', '\xAB', '\x3', '\x2', '\x2', '\x2', '\x4AA', '\x4AC', '\x5', 
		'\xAA', 'V', '\x2', '\x4AB', '\x4AA', '\x3', '\x2', '\x2', '\x2', '\x4AC', 
		'\x4AF', '\x3', '\x2', '\x2', '\x2', '\x4AD', '\x4AB', '\x3', '\x2', '\x2', 
		'\x2', '\x4AD', '\x4AE', '\x3', '\x2', '\x2', '\x2', '\x4AE', '\xAD', 
		'\x3', '\x2', '\x2', '\x2', '\x4AF', '\x4AD', '\x3', '\x2', '\x2', '\x2', 
		'\x4B0', '\x4B2', '\x5', '\xBA', '^', '\x2', '\x4B1', '\x4B3', '\x5', 
		'\x1AA', '\xD6', '\x2', '\x4B2', '\x4B1', '\x3', '\x2', '\x2', '\x2', 
		'\x4B2', '\x4B3', '\x3', '\x2', '\x2', '\x2', '\x4B3', '\xAF', '\x3', 
		'\x2', '\x2', '\x2', '\x4B4', '\x4B6', '\x5', '\xD8', 'm', '\x2', '\x4B5', 
		'\x4B4', '\x3', '\x2', '\x2', '\x2', '\x4B5', '\x4B6', '\x3', '\x2', '\x2', 
		'\x2', '\x4B6', '\x4B8', '\x3', '\x2', '\x2', '\x2', '\x4B7', '\x4B9', 
		'\x5', '\x154', '\xAB', '\x2', '\x4B8', '\x4B7', '\x3', '\x2', '\x2', 
		'\x2', '\x4B8', '\x4B9', '\x3', '\x2', '\x2', '\x2', '\x4B9', '\xB1', 
		'\x3', '\x2', '\x2', '\x2', '\x4BA', '\x4BF', '\x5', '\xAE', 'X', '\x2', 
		'\x4BB', '\x4BC', '\a', '\x8D', '\x2', '\x2', '\x4BC', '\x4BE', '\x5', 
		'\xAE', 'X', '\x2', '\x4BD', '\x4BB', '\x3', '\x2', '\x2', '\x2', '\x4BE', 
		'\x4C1', '\x3', '\x2', '\x2', '\x2', '\x4BF', '\x4BD', '\x3', '\x2', '\x2', 
		'\x2', '\x4BF', '\x4C0', '\x3', '\x2', '\x2', '\x2', '\x4C0', '\x4C5', 
		'\x3', '\x2', '\x2', '\x2', '\x4C1', '\x4BF', '\x3', '\x2', '\x2', '\x2', 
		'\x4C2', '\x4C5', '\a', '@', '\x2', '\x2', '\x4C3', '\x4C5', '\a', '\b', 
		'\x2', '\x2', '\x4C4', '\x4BA', '\x3', '\x2', '\x2', '\x2', '\x4C4', '\x4C2', 
		'\x3', '\x2', '\x2', '\x2', '\x4C4', '\x4C3', '\x3', '\x2', '\x2', '\x2', 
		'\x4C5', '\xB3', '\x3', '\x2', '\x2', '\x2', '\x4C6', '\x4C7', '\x5', 
		'\xB2', 'Z', '\x2', '\x4C7', '\x4C8', '\a', '\x93', '\x2', '\x2', '\x4C8', 
		'\x4C9', '\x5', '\xA2', 'R', '\x2', '\x4C9', '\xB5', '\x3', '\x2', '\x2', 
		'\x2', '\x4CA', '\x4CE', '\x5', '\x64', '\x33', '\x2', '\x4CB', '\x4CE', 
		'\x5', '\x16C', '\xB7', '\x2', '\x4CC', '\x4CE', '\x5', 'h', '\x35', '\x2', 
		'\x4CD', '\x4CA', '\x3', '\x2', '\x2', '\x2', '\x4CD', '\x4CB', '\x3', 
		'\x2', '\x2', '\x2', '\x4CD', '\x4CC', '\x3', '\x2', '\x2', '\x2', '\x4CE', 
		'\xB7', '\x3', '\x2', '\x2', '\x2', '\x4CF', '\x4D1', '\x5', '\xB6', '\\', 
		'\x2', '\x4D0', '\x4CF', '\x3', '\x2', '\x2', '\x2', '\x4D1', '\x4D4', 
		'\x3', '\x2', '\x2', '\x2', '\x4D2', '\x4D0', '\x3', '\x2', '\x2', '\x2', 
		'\x4D2', '\x4D3', '\x3', '\x2', '\x2', '\x2', '\x4D3', '\xB9', '\x3', 
		'\x2', '\x2', '\x2', '\x4D4', '\x4D2', '\x3', '\x2', '\x2', '\x2', '\x4D5', 
		'\x4D9', '\x5', '\xE8', 'u', '\x2', '\x4D6', '\x4D9', '\a', '\x80', '\x2', 
		'\x2', '\x4D7', '\x4D9', '\a', '\x81', '\x2', '\x2', '\x4D8', '\x4D5', 
		'\x3', '\x2', '\x2', '\x2', '\x4D8', '\x4D6', '\x3', '\x2', '\x2', '\x2', 
		'\x4D8', '\x4D7', '\x3', '\x2', '\x2', '\x2', '\x4D9', '\xBB', '\x3', 
		'\x2', '\x2', '\x2', '\x4DA', '\x4DD', '\x5', '\xE8', 'u', '\x2', '\x4DB', 
		'\x4DD', '\a', '\x80', '\x2', '\x2', '\x4DC', '\x4DA', '\x3', '\x2', '\x2', 
		'\x2', '\x4DC', '\x4DB', '\x3', '\x2', '\x2', '\x2', '\x4DD', '\xBD', 
		'\x3', '\x2', '\x2', '\x2', '\x4DE', '\x4DF', '\a', '\x8F', '\x2', '\x2', 
		'\x4DF', '\x4E4', '\x5', '\xBC', '_', '\x2', '\x4E0', '\x4E1', '\a', '\x8D', 
		'\x2', '\x2', '\x4E1', '\x4E3', '\x5', '\xBC', '_', '\x2', '\x4E2', '\x4E0', 
		'\x3', '\x2', '\x2', '\x2', '\x4E3', '\x4E6', '\x3', '\x2', '\x2', '\x2', 
		'\x4E4', '\x4E2', '\x3', '\x2', '\x2', '\x2', '\x4E4', '\x4E5', '\x3', 
		'\x2', '\x2', '\x2', '\x4E5', '\x4E7', '\x3', '\x2', '\x2', '\x2', '\x4E6', 
		'\x4E4', '\x3', '\x2', '\x2', '\x2', '\x4E7', '\x4E8', '\a', '\x90', '\x2', 
		'\x2', '\x4E8', '\xBF', '\x3', '\x2', '\x2', '\x2', '\x4E9', '\x4EB', 
		'\x5', '\x112', '\x8A', '\x2', '\x4EA', '\x4E9', '\x3', '\x2', '\x2', 
		'\x2', '\x4EA', '\x4EB', '\x3', '\x2', '\x2', '\x2', '\x4EB', '\x4EC', 
		'\x3', '\x2', '\x2', '\x2', '\x4EC', '\x4EE', '\a', '\x1E', '\x2', '\x2', 
		'\x4ED', '\x4EF', '\x5', '\xE8', 'u', '\x2', '\x4EE', '\x4ED', '\x3', 
		'\x2', '\x2', '\x2', '\x4EE', '\x4EF', '\x3', '\x2', '\x2', '\x2', '\x4EF', 
		'\x4F2', '\x3', '\x2', '\x2', '\x2', '\x4F0', '\x4F1', '\a', 'n', '\x2', 
		'\x2', '\x4F1', '\x4F3', '\x5', 'l', '\x37', '\x2', '\x4F2', '\x4F0', 
		'\x3', '\x2', '\x2', '\x2', '\x4F2', '\x4F3', '\x3', '\x2', '\x2', '\x2', 
		'\x4F3', '\x4F4', '\x3', '\x2', '\x2', '\x2', '\x4F4', '\x4F5', '\a', 
		'\x8C', '\x2', '\x2', '\x4F5', '\xC1', '\x3', '\x2', '\x2', '\x2', '\x4F6', 
		'\x4FC', '\x5', '\x182', '\xC2', '\x2', '\x4F7', '\x4F8', '\x5', '\x11E', 
		'\x90', '\x2', '\x4F8', '\x4F9', '\x5', '\x182', '\xC2', '\x2', '\x4F9', 
		'\x4FB', '\x3', '\x2', '\x2', '\x2', '\x4FA', '\x4F7', '\x3', '\x2', '\x2', 
		'\x2', '\x4FB', '\x4FE', '\x3', '\x2', '\x2', '\x2', '\x4FC', '\x4FA', 
		'\x3', '\x2', '\x2', '\x2', '\x4FC', '\x4FD', '\x3', '\x2', '\x2', '\x2', 
		'\x4FD', '\xC3', '\x3', '\x2', '\x2', '\x2', '\x4FE', '\x4FC', '\x3', 
		'\x2', '\x2', '\x2', '\x4FF', '\x502', '\x5', '\x15A', '\xAE', '\x2', 
		'\x500', '\x501', '\a', '\x83', '\x2', '\x2', '\x501', '\x503', '\x5', 
		'\x15A', '\xAE', '\x2', '\x502', '\x500', '\x3', '\x2', '\x2', '\x2', 
		'\x502', '\x503', '\x3', '\x2', '\x2', '\x2', '\x503', '\x509', '\x3', 
		'\x2', '\x2', '\x2', '\x504', '\x505', '\a', '\x3', '\x2', '\x2', '\x505', 
		'\x509', '\x5', '\x15A', '\xAE', '\x2', '\x506', '\x507', '\a', ':', '\x2', 
		'\x2', '\x507', '\x509', '\x5', '\x15A', '\xAE', '\x2', '\x508', '\x4FF', 
		'\x3', '\x2', '\x2', '\x2', '\x508', '\x504', '\x3', '\x2', '\x2', '\x2', 
		'\x508', '\x506', '\x3', '\x2', '\x2', '\x2', '\x509', '\xC5', '\x3', 
		'\x2', '\x2', '\x2', '\x50A', '\x50B', '\a', '\x1F', '\x2', '\x2', '\x50B', 
		'\x50C', '\x5', '\xEA', 'v', '\x2', '\x50C', '\x50D', '\a', '\x93', '\x2', 
		'\x2', '\x50D', '\x50F', '\x5', '\x1DA', '\xEE', '\x2', '\x50E', '\x510', 
		'\x5', '\xCA', '\x66', '\x2', '\x50F', '\x50E', '\x3', '\x2', '\x2', '\x2', 
		'\x50F', '\x510', '\x3', '\x2', '\x2', '\x2', '\x510', '\x511', '\x3', 
		'\x2', '\x2', '\x2', '\x511', '\x512', '\a', '\x8C', '\x2', '\x2', '\x512', 
		'\xC7', '\x3', '\x2', '\x2', '\x2', '\x513', '\x514', '\x5', '\xC2', '\x62', 
		'\x2', '\x514', '\xC9', '\x3', '\x2', '\x2', '\x2', '\x515', '\x516', 
		'\a', '>', '\x2', '\x2', '\x516', '\x518', '\x5', '\xC2', '\x62', '\x2', 
		'\x517', '\x515', '\x3', '\x2', '\x2', '\x2', '\x517', '\x518', '\x3', 
		'\x2', '\x2', '\x2', '\x518', '\x519', '\x3', '\x2', '\x2', '\x2', '\x519', 
		'\x51A', '\a', '+', '\x2', '\x2', '\x51A', '\x51B', '\x5', '\xC8', '\x65', 
		'\x2', '\x51B', '\xCB', '\x3', '\x2', '\x2', '\x2', '\x51C', '\x51D', 
		'\a', '\x1F', '\x2', '\x2', '\x51D', '\x51E', '\a', '<', '\x2', '\x2', 
		'\x51E', '\x51F', '\x5', '\x1DA', '\xEE', '\x2', '\x51F', '\xCD', '\x3', 
		'\x2', '\x2', '\x2', '\x520', '\x521', '\x5', '\x104', '\x83', '\x2', 
		'\x521', '\xCF', '\x3', '\x2', '\x2', '\x2', '\x522', '\x529', '\x5', 
		'\xE8', 'u', '\x2', '\x523', '\x524', '\x5', '\xE8', 'u', '\x2', '\x524', 
		'\x525', '\a', '\x8F', '\x2', '\x2', '\x525', '\x526', '\x5', '\x17A', 
		'\xBE', '\x2', '\x526', '\x527', '\a', '\x90', '\x2', '\x2', '\x527', 
		'\x529', '\x3', '\x2', '\x2', '\x2', '\x528', '\x522', '\x3', '\x2', '\x2', 
		'\x2', '\x528', '\x523', '\x3', '\x2', '\x2', '\x2', '\x529', '\xD1', 
		'\x3', '\x2', '\x2', '\x2', '\x52A', '\x52B', '\a', 'I', '\x2', '\x2', 
		'\x52B', '\x52C', '\x5', '\xEA', 'v', '\x2', '\x52C', '\x52D', '\a', '\x93', 
		'\x2', '\x2', '\x52D', '\x530', '\x5', '\x1DA', '\xEE', '\x2', '\x52E', 
		'\x52F', '\a', '\x89', '\x2', '\x2', '\x52F', '\x531', '\x5', '\xC2', 
		'\x62', '\x2', '\x530', '\x52E', '\x3', '\x2', '\x2', '\x2', '\x530', 
		'\x531', '\x3', '\x2', '\x2', '\x2', '\x531', '\x532', '\x3', '\x2', '\x2', 
		'\x2', '\x532', '\x533', '\a', '\x8C', '\x2', '\x2', '\x533', '\xD3', 
		'\x3', '\x2', '\x2', '\x2', '\x534', '\x535', '\x5', '\x112', '\x8A', 
		'\x2', '\x535', '\x536', '\x5', '\xD6', 'l', '\x2', '\x536', '\x53E', 
		'\a', '\"', '\x2', '\x2', '\x537', '\x539', '\x5', ':', '\x1E', '\x2', 
		'\x538', '\x537', '\x3', '\x2', '\x2', '\x2', '\x539', '\x53C', '\x3', 
		'\x2', '\x2', '\x2', '\x53A', '\x538', '\x3', '\x2', '\x2', '\x2', '\x53A', 
		'\x53B', '\x3', '\x2', '\x2', '\x2', '\x53B', '\x53D', '\x3', '\x2', '\x2', 
		'\x2', '\x53C', '\x53A', '\x3', '\x2', '\x2', '\x2', '\x53D', '\x53F', 
		'\a', '\xE', '\x2', '\x2', '\x53E', '\x53A', '\x3', '\x2', '\x2', '\x2', 
		'\x53E', '\x53F', '\x3', '\x2', '\x2', '\x2', '\x53F', '\x543', '\x3', 
		'\x2', '\x2', '\x2', '\x540', '\x542', '\x5', '\x1E', '\x10', '\x2', '\x541', 
		'\x540', '\x3', '\x2', '\x2', '\x2', '\x542', '\x545', '\x3', '\x2', '\x2', 
		'\x2', '\x543', '\x541', '\x3', '\x2', '\x2', '\x2', '\x543', '\x544', 
		'\x3', '\x2', '\x2', '\x2', '\x544', '\x546', '\x3', '\x2', '\x2', '\x2', 
		'\x545', '\x543', '\x3', '\x2', '\x2', '\x2', '\x546', '\x547', '\a', 
		'\x1A', '\x2', '\x2', '\x547', '\x549', '\a', '\"', '\x2', '\x2', '\x548', 
		'\x54A', '\x5', '\xE8', 'u', '\x2', '\x549', '\x548', '\x3', '\x2', '\x2', 
		'\x2', '\x549', '\x54A', '\x3', '\x2', '\x2', '\x2', '\x54A', '\x54B', 
		'\x3', '\x2', '\x2', '\x2', '\x54B', '\x54C', '\a', '\x8C', '\x2', '\x2', 
		'\x54C', '\xD5', '\x3', '\x2', '\x2', '\x2', '\x54D', '\x54E', '\a', ' ', 
		'\x2', '\x2', '\x54E', '\x552', '\x5', '\x14E', '\xA8', '\x2', '\x54F', 
		'\x550', '\a', '&', '\x2', '\x2', '\x550', '\x552', '\x5', 'l', '\x37', 
		'\x2', '\x551', '\x54D', '\x3', '\x2', '\x2', '\x2', '\x551', '\x54F', 
		'\x3', '\x2', '\x2', '\x2', '\x552', '\xD7', '\x3', '\x2', '\x2', '\x2', 
		'\x553', '\x554', '\a', '#', '\x2', '\x2', '\x554', '\x555', '\a', '\x8F', 
		'\x2', '\x2', '\x555', '\x556', '\x5', '\xDA', 'n', '\x2', '\x556', '\x557', 
		'\a', '\x90', '\x2', '\x2', '\x557', '\x558', '\a', '\x8C', '\x2', '\x2', 
		'\x558', '\xD9', '\x3', '\x2', '\x2', '\x2', '\x559', '\x55E', '\x5', 
		'\xF8', '}', '\x2', '\x55A', '\x55B', '\a', '\x8C', '\x2', '\x2', '\x55B', 
		'\x55D', '\x5', '\xF8', '}', '\x2', '\x55C', '\x55A', '\x3', '\x2', '\x2', 
		'\x2', '\x55D', '\x560', '\x3', '\x2', '\x2', '\x2', '\x55E', '\x55C', 
		'\x3', '\x2', '\x2', '\x2', '\x55E', '\x55F', '\x3', '\x2', '\x2', '\x2', 
		'\x55F', '\xDB', '\x3', '\x2', '\x2', '\x2', '\x560', '\x55E', '\x3', 
		'\x2', '\x2', '\x2', '\x561', '\x562', '\a', '#', '\x2', '\x2', '\x562', 
		'\x563', '\a', '\x32', '\x2', '\x2', '\x563', '\x564', '\a', '\x8F', '\x2', 
		'\x2', '\x564', '\x565', '\x5', ',', '\x17', '\x2', '\x565', '\x566', 
		'\a', '\x90', '\x2', '\x2', '\x566', '\xDD', '\x3', '\x2', '\x2', '\x2', 
		'\x567', '\x56A', '\x5', '\x126', '\x94', '\x2', '\x568', '\x56A', '\a', 
		'\x80', '\x2', '\x2', '\x569', '\x567', '\x3', '\x2', '\x2', '\x2', '\x569', 
		'\x568', '\x3', '\x2', '\x2', '\x2', '\x56A', '\xDF', '\x3', '\x2', '\x2', 
		'\x2', '\x56B', '\x570', '\x5', '\xDE', 'p', '\x2', '\x56C', '\x56D', 
		'\a', '\x8D', '\x2', '\x2', '\x56D', '\x56F', '\x5', '\xDE', 'p', '\x2', 
		'\x56E', '\x56C', '\x3', '\x2', '\x2', '\x2', '\x56F', '\x572', '\x3', 
		'\x2', '\x2', '\x2', '\x570', '\x56E', '\x3', '\x2', '\x2', '\x2', '\x570', 
		'\x571', '\x3', '\x2', '\x2', '\x2', '\x571', '\xE1', '\x3', '\x2', '\x2', 
		'\x2', '\x572', '\x570', '\x3', '\x2', '\x2', '\x2', '\x573', '\x574', 
		'\a', '$', '\x2', '\x2', '\x574', '\x575', '\x5', '\x112', '\x8A', '\x2', 
		'\x575', '\x576', '\x5', '\x126', '\x94', '\x2', '\x576', '\x577', '\a', 
		'\x8F', '\x2', '\x2', '\x577', '\x578', '\x5', '\xE0', 'q', '\x2', '\x578', 
		'\x579', '\a', '\x90', '\x2', '\x2', '\x579', '\x57A', '\a', '\x8C', '\x2', 
		'\x2', '\x57A', '\xE3', '\x3', '\x2', '\x2', '\x2', '\x57B', '\x57C', 
		'\a', '$', '\x2', '\x2', '\x57C', '\x57D', '\x5', '\xE8', 'u', '\x2', 
		'\x57D', '\x57E', '\a', '+', '\x2', '\x2', '\x57E', '\x57F', '\a', '\x8F', 
		'\x2', '\x2', '\x57F', '\x580', '\x5', '\xA6', 'T', '\x2', '\x580', '\x581', 
		'\a', '\x90', '\x2', '\x2', '\x581', '\x582', '\a', '\x8C', '\x2', '\x2', 
		'\x582', '\xE5', '\x3', '\x2', '\x2', '\x2', '\x583', '\x584', '\x5', 
		'\x1A8', '\xD5', '\x2', '\x584', '\x585', '\a', '\x93', '\x2', '\x2', 
		'\x585', '\x586', '\x5', '\x126', '\x94', '\x2', '\x586', '\xE7', '\x3', 
		'\x2', '\x2', '\x2', '\x587', '\x588', '\t', '\x6', '\x2', '\x2', '\x588', 
		'\xE9', '\x3', '\x2', '\x2', '\x2', '\x589', '\x58E', '\x5', '\xE8', 'u', 
		'\x2', '\x58A', '\x58B', '\a', '\x8D', '\x2', '\x2', '\x58B', '\x58D', 
		'\x5', '\xE8', 'u', '\x2', '\x58C', '\x58A', '\x3', '\x2', '\x2', '\x2', 
		'\x58D', '\x590', '\x3', '\x2', '\x2', '\x2', '\x58E', '\x58C', '\x3', 
		'\x2', '\x2', '\x2', '\x58E', '\x58F', '\x3', '\x2', '\x2', '\x2', '\x58F', 
		'\xEB', '\x3', '\x2', '\x2', '\x2', '\x590', '\x58E', '\x3', '\x2', '\x2', 
		'\x2', '\x591', '\x593', '\x5', '\x112', '\x8A', '\x2', '\x592', '\x591', 
		'\x3', '\x2', '\x2', '\x2', '\x592', '\x593', '\x3', '\x2', '\x2', '\x2', 
		'\x593', '\x594', '\x3', '\x2', '\x2', '\x2', '\x594', '\x595', '\a', 
		'&', '\x2', '\x2', '\x595', '\x596', '\x5', 'l', '\x37', '\x2', '\x596', 
		'\x597', '\a', '\x61', '\x2', '\x2', '\x597', '\x59F', '\x5', '\x19A', 
		'\xCE', '\x2', '\x598', '\x599', '\a', '\x1D', '\x2', '\x2', '\x599', 
		'\x59A', '\x5', 'l', '\x37', '\x2', '\x59A', '\x59B', '\a', '\x61', '\x2', 
		'\x2', '\x59B', '\x59C', '\x5', '\x19A', '\xCE', '\x2', '\x59C', '\x59E', 
		'\x3', '\x2', '\x2', '\x2', '\x59D', '\x598', '\x3', '\x2', '\x2', '\x2', 
		'\x59E', '\x5A1', '\x3', '\x2', '\x2', '\x2', '\x59F', '\x59D', '\x3', 
		'\x2', '\x2', '\x2', '\x59F', '\x5A0', '\x3', '\x2', '\x2', '\x2', '\x5A0', 
		'\x5A4', '\x3', '\x2', '\x2', '\x2', '\x5A1', '\x59F', '\x3', '\x2', '\x2', 
		'\x2', '\x5A2', '\x5A3', '\a', '\x1C', '\x2', '\x2', '\x5A3', '\x5A5', 
		'\x5', '\x19A', '\xCE', '\x2', '\x5A4', '\x5A2', '\x3', '\x2', '\x2', 
		'\x2', '\x5A4', '\x5A5', '\x3', '\x2', '\x2', '\x2', '\x5A5', '\x5A6', 
		'\x3', '\x2', '\x2', '\x2', '\x5A6', '\x5A7', '\a', '\x1A', '\x2', '\x2', 
		'\x5A7', '\x5A9', '\a', '&', '\x2', '\x2', '\x5A8', '\x5AA', '\x5', '\xE8', 
		'u', '\x2', '\x5A9', '\x5A8', '\x3', '\x2', '\x2', '\x2', '\x5A9', '\x5AA', 
		'\x3', '\x2', '\x2', '\x2', '\x5AA', '\x5AB', '\x3', '\x2', '\x2', '\x2', 
		'\x5AB', '\x5AC', '\a', '\x8C', '\x2', '\x2', '\x5AC', '\xED', '\x3', 
		'\x2', '\x2', '\x2', '\x5AD', '\x5AE', '\a', '\x8F', '\x2', '\x2', '\x5AE', 
		'\x5B3', '\x5', '\x96', 'L', '\x2', '\x5AF', '\x5B0', '\a', '\x8D', '\x2', 
		'\x2', '\x5B0', '\x5B2', '\x5', '\x96', 'L', '\x2', '\x5B1', '\x5AF', 
		'\x3', '\x2', '\x2', '\x2', '\x5B2', '\x5B5', '\x3', '\x2', '\x2', '\x2', 
		'\x5B3', '\x5B1', '\x3', '\x2', '\x2', '\x2', '\x5B3', '\x5B4', '\x3', 
		'\x2', '\x2', '\x2', '\x5B4', '\x5B6', '\x3', '\x2', '\x2', '\x2', '\x5B5', 
		'\x5B3', '\x3', '\x2', '\x2', '\x2', '\x5B6', '\x5B7', '\a', '\x90', '\x2', 
		'\x2', '\x5B7', '\xEF', '\x3', '\x2', '\x2', '\x2', '\x5B8', '\x5BB', 
		'\x5', '\x96', 'L', '\x2', '\x5B9', '\x5BB', '\x5', '\xC2', '\x62', '\x2', 
		'\x5BA', '\x5B8', '\x3', '\x2', '\x2', '\x2', '\x5BA', '\x5B9', '\x3', 
		'\x2', '\x2', '\x2', '\x5BB', '\xF1', '\x3', '\x2', '\x2', '\x2', '\x5BC', 
		'\x5BD', '\x5', '\x126', '\x94', '\x2', '\x5BD', '\x5BE', '\a', 'J', '\x2', 
		'\x2', '\x5BE', '\x5BF', '\a', '\x8A', '\x2', '\x2', '\x5BF', '\xF3', 
		'\x3', '\x2', '\x2', '\x2', '\x5C0', '\x5C2', '\a', '\x15', '\x2', '\x2', 
		'\x5C1', '\x5C0', '\x3', '\x2', '\x2', '\x2', '\x5C1', '\x5C2', '\x3', 
		'\x2', '\x2', '\x2', '\x5C2', '\x5C3', '\x3', '\x2', '\x2', '\x2', '\x5C3', 
		'\x5CF', '\x5', '\x126', '\x94', '\x2', '\x5C4', '\x5C5', '\a', '\x1B', 
		'\x2', '\x2', '\x5C5', '\x5CA', '\x5', '\x126', '\x94', '\x2', '\x5C6', 
		'\x5C7', '\a', '\x8F', '\x2', '\x2', '\x5C7', '\x5C8', '\x5', '\xE8', 
		'u', '\x2', '\x5C8', '\x5C9', '\a', '\x90', '\x2', '\x2', '\x5C9', '\x5CB', 
		'\x3', '\x2', '\x2', '\x2', '\x5CA', '\x5C6', '\x3', '\x2', '\x2', '\x2', 
		'\x5CA', '\x5CB', '\x3', '\x2', '\x2', '\x2', '\x5CB', '\x5CF', '\x3', 
		'\x2', '\x2', '\x2', '\x5CC', '\x5CD', '\a', '\x16', '\x2', '\x2', '\x5CD', 
		'\x5CF', '\x5', '\x126', '\x94', '\x2', '\x5CE', '\x5C1', '\x3', '\x2', 
		'\x2', '\x2', '\x5CE', '\x5C4', '\x3', '\x2', '\x2', '\x2', '\x5CE', '\x5CC', 
		'\x3', '\x2', '\x2', '\x2', '\x5CF', '\xF5', '\x3', '\x2', '\x2', '\x2', 
		'\x5D0', '\x5D5', '\x5', '\xE8', 'u', '\x2', '\x5D1', '\x5D2', '\a', '\x8D', 
		'\x2', '\x2', '\x5D2', '\x5D4', '\x5', '\xE8', 'u', '\x2', '\x5D3', '\x5D1', 
		'\x3', '\x2', '\x2', '\x2', '\x5D4', '\x5D7', '\x3', '\x2', '\x2', '\x2', 
		'\x5D5', '\x5D3', '\x3', '\x2', '\x2', '\x2', '\x5D5', '\x5D6', '\x3', 
		'\x2', '\x2', '\x2', '\x5D6', '\x5DB', '\x3', '\x2', '\x2', '\x2', '\x5D7', 
		'\x5D5', '\x3', '\x2', '\x2', '\x2', '\x5D8', '\x5DB', '\a', '@', '\x2', 
		'\x2', '\x5D9', '\x5DB', '\a', '\b', '\x2', '\x2', '\x5DA', '\x5D0', '\x3', 
		'\x2', '\x2', '\x2', '\x5DA', '\x5D8', '\x3', '\x2', '\x2', '\x2', '\x5DA', 
		'\x5D9', '\x3', '\x2', '\x2', '\x2', '\x5DB', '\xF7', '\x3', '\x2', '\x2', 
		'\x2', '\x5DC', '\x5DE', '\a', '\x17', '\x2', '\x2', '\x5DD', '\x5DC', 
		'\x3', '\x2', '\x2', '\x2', '\x5DD', '\x5DE', '\x3', '\x2', '\x2', '\x2', 
		'\x5DE', '\x5DF', '\x3', '\x2', '\x2', '\x2', '\x5DF', '\x5E0', '\x5', 
		'\xEA', 'v', '\x2', '\x5E0', '\x5E2', '\a', '\x93', '\x2', '\x2', '\x5E1', 
		'\x5E3', '\a', '(', '\x2', '\x2', '\x5E2', '\x5E1', '\x3', '\x2', '\x2', 
		'\x2', '\x5E2', '\x5E3', '\x3', '\x2', '\x2', '\x2', '\x5E3', '\x5E4', 
		'\x3', '\x2', '\x2', '\x2', '\x5E4', '\x5E7', '\x5', '\x1DA', '\xEE', 
		'\x2', '\x5E5', '\x5E6', '\a', '\x89', '\x2', '\x2', '\x5E6', '\x5E8', 
		'\x5', '\xC2', '\x62', '\x2', '\x5E7', '\x5E5', '\x3', '\x2', '\x2', '\x2', 
		'\x5E7', '\x5E8', '\x3', '\x2', '\x2', '\x2', '\x5E8', '\xF9', '\x3', 
		'\x2', '\x2', '\x2', '\x5E9', '\x5F0', '\x5', '\xF8', '}', '\x2', '\x5EA', 
		'\x5F0', '\x5', '\x10A', '\x86', '\x2', '\x5EB', '\x5F0', '\x5', '\x10E', 
		'\x88', '\x2', '\x5EC', '\x5F0', '\x5', '\xFE', '\x80', '\x2', '\x5ED', 
		'\x5F0', '\x5', '\x10C', '\x87', '\x2', '\x5EE', '\x5F0', '\x5', '\x106', 
		'\x84', '\x2', '\x5EF', '\x5E9', '\x3', '\x2', '\x2', '\x2', '\x5EF', 
		'\x5EA', '\x3', '\x2', '\x2', '\x2', '\x5EF', '\x5EB', '\x3', '\x2', '\x2', 
		'\x2', '\x5EF', '\x5EC', '\x3', '\x2', '\x2', '\x2', '\x5EF', '\x5ED', 
		'\x3', '\x2', '\x2', '\x2', '\x5EF', '\x5EE', '\x3', '\x2', '\x2', '\x2', 
		'\x5F0', '\xFB', '\x3', '\x2', '\x2', '\x2', '\x5F1', '\x5F2', '\x5', 
		'\xFA', '~', '\x2', '\x5F2', '\xFD', '\x3', '\x2', '\x2', '\x2', '\x5F3', 
		'\x5F4', '\a', '\x1F', '\x2', '\x2', '\x5F4', '\x5F5', '\x5', '\xEA', 
		'v', '\x2', '\x5F5', '\x5F6', '\a', '\x93', '\x2', '\x2', '\x5F6', '\x5F7', 
		'\x5', '\x1DA', '\xEE', '\x2', '\x5F7', '\xFF', '\x3', '\x2', '\x2', '\x2', 
		'\x5F8', '\x5FD', '\x5', '\x10A', '\x86', '\x2', '\x5F9', '\x5FA', '\a', 
		'\x8C', '\x2', '\x2', '\x5FA', '\x5FC', '\x5', '\x10A', '\x86', '\x2', 
		'\x5FB', '\x5F9', '\x3', '\x2', '\x2', '\x2', '\x5FC', '\x5FF', '\x3', 
		'\x2', '\x2', '\x2', '\x5FD', '\x5FB', '\x3', '\x2', '\x2', '\x2', '\x5FD', 
		'\x5FE', '\x3', '\x2', '\x2', '\x2', '\x5FE', '\x101', '\x3', '\x2', '\x2', 
		'\x2', '\x5FF', '\x5FD', '\x3', '\x2', '\x2', '\x2', '\x600', '\x605', 
		'\x5', '\x108', '\x85', '\x2', '\x601', '\x602', '\a', '\x8C', '\x2', 
		'\x2', '\x602', '\x604', '\x5', '\x108', '\x85', '\x2', '\x603', '\x601', 
		'\x3', '\x2', '\x2', '\x2', '\x604', '\x607', '\x3', '\x2', '\x2', '\x2', 
		'\x605', '\x603', '\x3', '\x2', '\x2', '\x2', '\x605', '\x606', '\x3', 
		'\x2', '\x2', '\x2', '\x606', '\x103', '\x3', '\x2', '\x2', '\x2', '\x607', 
		'\x605', '\x3', '\x2', '\x2', '\x2', '\x608', '\x60D', '\x5', '\xFC', 
		'\x7F', '\x2', '\x609', '\x60A', '\a', '\x8C', '\x2', '\x2', '\x60A', 
		'\x60C', '\x5', '\xFC', '\x7F', '\x2', '\x60B', '\x609', '\x3', '\x2', 
		'\x2', '\x2', '\x60C', '\x60F', '\x3', '\x2', '\x2', '\x2', '\x60D', '\x60B', 
		'\x3', '\x2', '\x2', '\x2', '\x60D', '\x60E', '\x3', '\x2', '\x2', '\x2', 
		'\x60E', '\x105', '\x3', '\x2', '\x2', '\x2', '\x60F', '\x60D', '\x3', 
		'\x2', '\x2', '\x2', '\x610', '\x611', '\a', 'I', '\x2', '\x2', '\x611', 
		'\x612', '\x5', '\xEA', 'v', '\x2', '\x612', '\x614', '\a', '\x93', '\x2', 
		'\x2', '\x613', '\x615', '\t', '\a', '\x2', '\x2', '\x614', '\x613', '\x3', 
		'\x2', '\x2', '\x2', '\x614', '\x615', '\x3', '\x2', '\x2', '\x2', '\x615', 
		'\x616', '\x3', '\x2', '\x2', '\x2', '\x616', '\x619', '\x5', '\x1DA', 
		'\xEE', '\x2', '\x617', '\x618', '\a', '\x89', '\x2', '\x2', '\x618', 
		'\x61A', '\x5', '\xC2', '\x62', '\x2', '\x619', '\x617', '\x3', '\x2', 
		'\x2', '\x2', '\x619', '\x61A', '\x3', '\x2', '\x2', '\x2', '\x61A', '\x107', 
		'\x3', '\x2', '\x2', '\x2', '\x61B', '\x61C', '\x5', '\xEA', 'v', '\x2', 
		'\x61C', '\x61E', '\a', '\x93', '\x2', '\x2', '\x61D', '\x61F', '\x5', 
		'\x122', '\x92', '\x2', '\x61E', '\x61D', '\x3', '\x2', '\x2', '\x2', 
		'\x61E', '\x61F', '\x3', '\x2', '\x2', '\x2', '\x61F', '\x620', '\x3', 
		'\x2', '\x2', '\x2', '\x620', '\x622', '\x5', '\x1DA', '\xEE', '\x2', 
		'\x621', '\x623', '\a', '\x13', '\x2', '\x2', '\x622', '\x621', '\x3', 
		'\x2', '\x2', '\x2', '\x622', '\x623', '\x3', '\x2', '\x2', '\x2', '\x623', 
		'\x626', '\x3', '\x2', '\x2', '\x2', '\x624', '\x625', '\a', '\x89', '\x2', 
		'\x2', '\x625', '\x627', '\x5', '\xC2', '\x62', '\x2', '\x626', '\x624', 
		'\x3', '\x2', '\x2', '\x2', '\x626', '\x627', '\x3', '\x2', '\x2', '\x2', 
		'\x627', '\x109', '\x3', '\x2', '\x2', '\x2', '\x628', '\x629', '\a', 
		'X', '\x2', '\x2', '\x629', '\x62A', '\x5', '\xEA', 'v', '\x2', '\x62A', 
		'\x62C', '\a', '\x93', '\x2', '\x2', '\x62B', '\x62D', '\x5', '\x122', 
		'\x92', '\x2', '\x62C', '\x62B', '\x3', '\x2', '\x2', '\x2', '\x62C', 
		'\x62D', '\x3', '\x2', '\x2', '\x2', '\x62D', '\x62E', '\x3', '\x2', '\x2', 
		'\x2', '\x62E', '\x630', '\x5', '\x1DA', '\xEE', '\x2', '\x62F', '\x631', 
		'\a', '\x13', '\x2', '\x2', '\x630', '\x62F', '\x3', '\x2', '\x2', '\x2', 
		'\x630', '\x631', '\x3', '\x2', '\x2', '\x2', '\x631', '\x634', '\x3', 
		'\x2', '\x2', '\x2', '\x632', '\x633', '\a', '\x89', '\x2', '\x2', '\x633', 
		'\x635', '\x5', '\xC2', '\x62', '\x2', '\x634', '\x632', '\x3', '\x2', 
		'\x2', '\x2', '\x634', '\x635', '\x3', '\x2', '\x2', '\x2', '\x635', '\x10B', 
		'\x3', '\x2', '\x2', '\x2', '\x636', '\x637', '\a', '`', '\x2', '\x2', 
		'\x637', '\x638', '\x5', '\xEA', 'v', '\x2', '\x638', '\x639', '\a', '\x93', 
		'\x2', '\x2', '\x639', '\x63A', '\x5', '\x1C4', '\xE3', '\x2', '\x63A', 
		'\x10D', '\x3', '\x2', '\x2', '\x2', '\x63B', '\x63D', '\a', 'k', '\x2', 
		'\x2', '\x63C', '\x63B', '\x3', '\x2', '\x2', '\x2', '\x63C', '\x63D', 
		'\x3', '\x2', '\x2', '\x2', '\x63D', '\x63E', '\x3', '\x2', '\x2', '\x2', 
		'\x63E', '\x63F', '\x5', '\xEA', 'v', '\x2', '\x63F', '\x641', '\a', '\x93', 
		'\x2', '\x2', '\x640', '\x642', '\x5', '\x122', '\x92', '\x2', '\x641', 
		'\x640', '\x3', '\x2', '\x2', '\x2', '\x641', '\x642', '\x3', '\x2', '\x2', 
		'\x2', '\x642', '\x643', '\x3', '\x2', '\x2', '\x2', '\x643', '\x646', 
		'\x5', '\x1DA', '\xEE', '\x2', '\x644', '\x645', '\a', '\x89', '\x2', 
		'\x2', '\x645', '\x647', '\x5', '\xC2', '\x62', '\x2', '\x646', '\x644', 
		'\x3', '\x2', '\x2', '\x2', '\x646', '\x647', '\x3', '\x2', '\x2', '\x2', 
		'\x647', '\x10F', '\x3', '\x2', '\x2', '\x2', '\x648', '\x649', '\a', 
		'o', '\x2', '\x2', '\x649', '\x64D', '\x5', 'l', '\x37', '\x2', '\x64A', 
		'\x64B', '\a', ' ', '\x2', '\x2', '\x64B', '\x64D', '\x5', '\x14E', '\xA8', 
		'\x2', '\x64C', '\x648', '\x3', '\x2', '\x2', '\x2', '\x64C', '\x64A', 
		'\x3', '\x2', '\x2', '\x2', '\x64D', '\x111', '\x3', '\x2', '\x2', '\x2', 
		'\x64E', '\x64F', '\x5', '\xE8', 'u', '\x2', '\x64F', '\x650', '\a', '\x93', 
		'\x2', '\x2', '\x650', '\x113', '\x3', '\x2', '\x2', '\x2', '\x651', '\x652', 
		'\a', '-', '\x2', '\x2', '\x652', '\x653', '\x5', '\x11C', '\x8F', '\x2', 
		'\x653', '\x654', '\a', '\x8C', '\x2', '\x2', '\x654', '\x115', '\x3', 
		'\x2', '\x2', '\x2', '\x655', '\x658', '\x5', '\x18E', '\xC8', '\x2', 
		'\x656', '\x658', '\x5', '\x15C', '\xAF', '\x2', '\x657', '\x655', '\x3', 
		'\x2', '\x2', '\x2', '\x657', '\x656', '\x3', '\x2', '\x2', '\x2', '\x658', 
		'\x117', '\x3', '\x2', '\x2', '\x2', '\x659', '\x65F', '\a', ';', '\x2', 
		'\x2', '\x65A', '\x65F', '\a', 's', '\x2', '\x2', '\x65B', '\x65F', '\a', 
		'\x81', '\x2', '\x2', '\x65C', '\x65F', '\x5', '\xBC', '_', '\x2', '\x65D', 
		'\x65F', '\x5', '\x13C', '\x9F', '\x2', '\x65E', '\x659', '\x3', '\x2', 
		'\x2', '\x2', '\x65E', '\x65A', '\x3', '\x2', '\x2', '\x2', '\x65E', '\x65B', 
		'\x3', '\x2', '\x2', '\x2', '\x65E', '\x65C', '\x3', '\x2', '\x2', '\x2', 
		'\x65E', '\x65D', '\x3', '\x2', '\x2', '\x2', '\x65F', '\x119', '\x3', 
		'\x2', '\x2', '\x2', '\x660', '\x661', '\x5', '\xE8', 'u', '\x2', '\x661', 
		'\x11B', '\x3', '\x2', '\x2', '\x2', '\x662', '\x667', '\x5', '\x11A', 
		'\x8E', '\x2', '\x663', '\x664', '\a', '\x8D', '\x2', '\x2', '\x664', 
		'\x666', '\x5', '\x11A', '\x8E', '\x2', '\x665', '\x663', '\x3', '\x2', 
		'\x2', '\x2', '\x666', '\x669', '\x3', '\x2', '\x2', '\x2', '\x667', '\x665', 
		'\x3', '\x2', '\x2', '\x2', '\x667', '\x668', '\x3', '\x2', '\x2', '\x2', 
		'\x668', '\x11D', '\x3', '\x2', '\x2', '\x2', '\x669', '\x667', '\x3', 
		'\x2', '\x2', '\x2', '\x66A', '\x66B', '\t', '\b', '\x2', '\x2', '\x66B', 
		'\x11F', '\x3', '\x2', '\x2', '\x2', '\x66C', '\x66E', '\x5', '\x112', 
		'\x8A', '\x2', '\x66D', '\x66C', '\x3', '\x2', '\x2', '\x2', '\x66D', 
		'\x66E', '\x3', '\x2', '\x2', '\x2', '\x66E', '\x670', '\x3', '\x2', '\x2', 
		'\x2', '\x66F', '\x671', '\x5', '\x110', '\x89', '\x2', '\x670', '\x66F', 
		'\x3', '\x2', '\x2', '\x2', '\x670', '\x671', '\x3', '\x2', '\x2', '\x2', 
		'\x671', '\x672', '\x3', '\x2', '\x2', '\x2', '\x672', '\x673', '\a', 
		'\x31', '\x2', '\x2', '\x673', '\x674', '\x5', '\x19A', '\xCE', '\x2', 
		'\x674', '\x675', '\a', '\x1A', '\x2', '\x2', '\x675', '\x677', '\a', 
		'\x31', '\x2', '\x2', '\x676', '\x678', '\x5', '\xE8', 'u', '\x2', '\x677', 
		'\x676', '\x3', '\x2', '\x2', '\x2', '\x677', '\x678', '\x3', '\x2', '\x2', 
		'\x2', '\x678', '\x679', '\x3', '\x2', '\x2', '\x2', '\x679', '\x67A', 
		'\a', '\x8C', '\x2', '\x2', '\x67A', '\x121', '\x3', '\x2', '\x2', '\x2', 
		'\x67B', '\x67C', '\t', '\t', '\x2', '\x2', '\x67C', '\x123', '\x3', '\x2', 
		'\x2', '\x2', '\x67D', '\x67E', '\t', '\n', '\x2', '\x2', '\x67E', '\x125', 
		'\x3', '\x2', '\x2', '\x2', '\x67F', '\x682', '\x5', '\xE8', 'u', '\x2', 
		'\x680', '\x682', '\a', '\x81', '\x2', '\x2', '\x681', '\x67F', '\x3', 
		'\x2', '\x2', '\x2', '\x681', '\x680', '\x3', '\x2', '\x2', '\x2', '\x682', 
		'\x686', '\x3', '\x2', '\x2', '\x2', '\x683', '\x685', '\x5', '\x128', 
		'\x95', '\x2', '\x684', '\x683', '\x3', '\x2', '\x2', '\x2', '\x685', 
		'\x688', '\x3', '\x2', '\x2', '\x2', '\x686', '\x684', '\x3', '\x2', '\x2', 
		'\x2', '\x686', '\x687', '\x3', '\x2', '\x2', '\x2', '\x687', '\x127', 
		'\x3', '\x2', '\x2', '\x2', '\x688', '\x686', '\x3', '\x2', '\x2', '\x2', 
		'\x689', '\x68E', '\x5', '\x12C', '\x97', '\x2', '\x68A', '\x68E', '\x5', 
		'\x12E', '\x98', '\x2', '\x68B', '\x68E', '\x5', '\x130', '\x99', '\x2', 
		'\x68C', '\x68E', '\x5', '\x132', '\x9A', '\x2', '\x68D', '\x689', '\x3', 
		'\x2', '\x2', '\x2', '\x68D', '\x68A', '\x3', '\x2', '\x2', '\x2', '\x68D', 
		'\x68B', '\x3', '\x2', '\x2', '\x2', '\x68D', '\x68C', '\x3', '\x2', '\x2', 
		'\x2', '\x68E', '\x129', '\x3', '\x2', '\x2', '\x2', '\x68F', '\x694', 
		'\x5', '\xE8', 'u', '\x2', '\x690', '\x691', '\a', '\x9C', '\x2', '\x2', 
		'\x691', '\x693', '\x5', '\x1DC', '\xEF', '\x2', '\x692', '\x690', '\x3', 
		'\x2', '\x2', '\x2', '\x693', '\x696', '\x3', '\x2', '\x2', '\x2', '\x694', 
		'\x692', '\x3', '\x2', '\x2', '\x2', '\x694', '\x695', '\x3', '\x2', '\x2', 
		'\x2', '\x695', '\x12B', '\x3', '\x2', '\x2', '\x2', '\x696', '\x694', 
		'\x3', '\x2', '\x2', '\x2', '\x697', '\x698', '\a', '\x9C', '\x2', '\x2', 
		'\x698', '\x69A', '\x5', '\x1DC', '\xEF', '\x2', '\x699', '\x697', '\x3', 
		'\x2', '\x2', '\x2', '\x69A', '\x69B', '\x3', '\x2', '\x2', '\x2', '\x69B', 
		'\x699', '\x3', '\x2', '\x2', '\x2', '\x69B', '\x69C', '\x3', '\x2', '\x2', 
		'\x2', '\x69C', '\x12D', '\x3', '\x2', '\x2', '\x2', '\x69D', '\x69E', 
		'\a', '\x8F', '\x2', '\x2', '\x69E', '\x69F', '\x5', '\n', '\x6', '\x2', 
		'\x69F', '\x6A0', '\a', '\x90', '\x2', '\x2', '\x6A0', '\x12F', '\x3', 
		'\x2', '\x2', '\x2', '\x6A1', '\x6A2', '\a', '\x8F', '\x2', '\x2', '\x6A2', 
		'\x6A3', '\x5', '\x96', 'L', '\x2', '\x6A3', '\x6A4', '\a', '\x90', '\x2', 
		'\x2', '\x6A4', '\x131', '\x3', '\x2', '\x2', '\x2', '\x6A5', '\x6A7', 
		'\x5', '\x1AA', '\xD6', '\x2', '\x6A6', '\x6A5', '\x3', '\x2', '\x2', 
		'\x2', '\x6A6', '\x6A7', '\x3', '\x2', '\x2', '\x2', '\x6A7', '\x6A8', 
		'\x3', '\x2', '\x2', '\x2', '\x6A8', '\x6A9', '\a', '\xA4', '\x2', '\x2', 
		'\x6A9', '\x6AE', '\x5', '\x30', '\x19', '\x2', '\x6AA', '\x6AB', '\a', 
		'\x8F', '\x2', '\x2', '\x6AB', '\x6AC', '\x5', '\xC2', '\x62', '\x2', 
		'\x6AC', '\x6AD', '\a', '\x90', '\x2', '\x2', '\x6AD', '\x6AF', '\x3', 
		'\x2', '\x2', '\x2', '\x6AE', '\x6AA', '\x3', '\x2', '\x2', '\x2', '\x6AE', 
		'\x6AF', '\x3', '\x2', '\x2', '\x2', '\x6AF', '\x133', '\x3', '\x2', '\x2', 
		'\x2', '\x6B0', '\x6B1', '\a', '\x35', '\x2', '\x2', '\x6B1', '\x6B2', 
		'\x5', '\xE8', 'u', '\x2', '\x6B2', '\x6B3', '\a', '+', '\x2', '\x2', 
		'\x6B3', '\x6B4', '\x5', '\x136', '\x9C', '\x2', '\x6B4', '\x6B5', '\a', 
		'\x8C', '\x2', '\x2', '\x6B5', '\x135', '\x3', '\x2', '\x2', '\x2', '\x6B6', 
		'\x6B9', '\x5', '\x18A', '\xC6', '\x2', '\x6B7', '\x6B9', '\x5', '`', 
		'\x31', '\x2', '\x6B8', '\x6B6', '\x3', '\x2', '\x2', '\x2', '\x6B8', 
		'\x6B7', '\x3', '\x2', '\x2', '\x2', '\x6B9', '\x137', '\x3', '\x2', '\x2', 
		'\x2', '\x6BA', '\x6BB', '\x5', '\xEA', 'v', '\x2', '\x6BB', '\x6BC', 
		'\a', '\x93', '\x2', '\x2', '\x6BC', '\x6BD', '\x5', '\x9C', 'O', '\x2', 
		'\x6BD', '\x139', '\x3', '\x2', '\x2', '\x2', '\x6BE', '\x6C0', '\x5', 
		'\x112', '\x8A', '\x2', '\x6BF', '\x6BE', '\x3', '\x2', '\x2', '\x2', 
		'\x6BF', '\x6C0', '\x3', '\x2', '\x2', '\x2', '\x6C0', '\x6C1', '\x3', 
		'\x2', '\x2', '\x2', '\x6C1', '\x6C3', '\a', '\x37', '\x2', '\x2', '\x6C2', 
		'\x6C4', '\x5', '\xE8', 'u', '\x2', '\x6C3', '\x6C2', '\x3', '\x2', '\x2', 
		'\x2', '\x6C3', '\x6C4', '\x3', '\x2', '\x2', '\x2', '\x6C4', '\x6C7', 
		'\x3', '\x2', '\x2', '\x2', '\x6C5', '\x6C6', '\a', 'n', '\x2', '\x2', 
		'\x6C6', '\x6C8', '\x5', 'l', '\x37', '\x2', '\x6C7', '\x6C5', '\x3', 
		'\x2', '\x2', '\x2', '\x6C7', '\x6C8', '\x3', '\x2', '\x2', '\x2', '\x6C8', 
		'\x6C9', '\x3', '\x2', '\x2', '\x2', '\x6C9', '\x6CA', '\a', '\x8C', '\x2', 
		'\x2', '\x6CA', '\x13B', '\x3', '\x2', '\x2', '\x2', '\x6CB', '\x6CE', 
		'\x5', '\x2', '\x2', '\x2', '\x6CC', '\x6CE', '\x5', '\x150', '\xA9', 
		'\x2', '\x6CD', '\x6CB', '\x3', '\x2', '\x2', '\x2', '\x6CD', '\x6CC', 
		'\x3', '\x2', '\x2', '\x2', '\x6CE', '\x13D', '\x3', '\x2', '\x2', '\x2', 
		'\x6CF', '\x6D6', '\x5', '~', '@', '\x2', '\x6D0', '\x6D6', '\x5', '\x1A4', 
		'\xD3', '\x2', '\x6D1', '\x6D6', '\x5', '\x1F8', '\xFD', '\x2', '\x6D2', 
		'\x6D6', '\x5', '\xC6', '\x64', '\x2', '\x6D3', '\x6D6', '\x5', '\x1E4', 
		'\xF3', '\x2', '\x6D4', '\x6D6', '\x5', '\x172', '\xBA', '\x2', '\x6D5', 
		'\x6CF', '\x3', '\x2', '\x2', '\x2', '\x6D5', '\x6D0', '\x3', '\x2', '\x2', 
		'\x2', '\x6D5', '\x6D1', '\x3', '\x2', '\x2', '\x2', '\x6D5', '\x6D2', 
		'\x3', '\x2', '\x2', '\x2', '\x6D5', '\x6D3', '\x3', '\x2', '\x2', '\x2', 
		'\x6D5', '\x6D4', '\x3', '\x2', '\x2', '\x2', '\x6D6', '\x13F', '\x3', 
		'\x2', '\x2', '\x2', '\x6D7', '\x6D9', '\a', '%', '\x2', '\x2', '\x6D8', 
		'\x6D7', '\x3', '\x2', '\x2', '\x2', '\x6D8', '\x6D9', '\x3', '\x2', '\x2', 
		'\x2', '\x6D9', '\x6DB', '\x3', '\x2', '\x2', '\x2', '\x6DA', '\x6DC', 
		'\x5', '\x8A', '\x46', '\x2', '\x6DB', '\x6DA', '\x3', '\x2', '\x2', '\x2', 
		'\x6DB', '\x6DC', '\x3', '\x2', '\x2', '\x2', '\x6DC', '\x141', '\x3', 
		'\x2', '\x2', '\x2', '\x6DD', '\x6DE', '\a', '\x42', '\x2', '\x2', '\x6DE', 
		'\x6DF', '\a', '\x10', '\x2', '\x2', '\x6DF', '\x6E0', '\x5', '\xE8', 
		'u', '\x2', '\x6E0', '\x6E1', '\a', '+', '\x2', '\x2', '\x6E1', '\x6E2', 
		'\x5', '\x146', '\xA4', '\x2', '\x6E2', '\x6E5', '\a', '\x1A', '\x2', 
		'\x2', '\x6E3', '\x6E4', '\a', '\x42', '\x2', '\x2', '\x6E4', '\x6E6', 
		'\a', '\x10', '\x2', '\x2', '\x6E5', '\x6E3', '\x3', '\x2', '\x2', '\x2', 
		'\x6E5', '\x6E6', '\x3', '\x2', '\x2', '\x2', '\x6E6', '\x6E8', '\x3', 
		'\x2', '\x2', '\x2', '\x6E7', '\x6E9', '\x5', '\xE8', 'u', '\x2', '\x6E8', 
		'\x6E7', '\x3', '\x2', '\x2', '\x2', '\x6E8', '\x6E9', '\x3', '\x2', '\x2', 
		'\x2', '\x6E9', '\x6EA', '\x3', '\x2', '\x2', '\x2', '\x6EA', '\x6EB', 
		'\a', '\x8C', '\x2', '\x2', '\x6EB', '\x143', '\x3', '\x2', '\x2', '\x2', 
		'\x6EC', '\x6F8', '\x5', '\x1C8', '\xE5', '\x2', '\x6ED', '\x6F8', '\x5', 
		'\x1C6', '\xE4', '\x2', '\x6EE', '\x6F8', '\x5', '\x1EC', '\xF7', '\x2', 
		'\x6EF', '\x6F8', '\x5', '\x1D8', '\xED', '\x2', '\x6F0', '\x6F8', '\x5', 
		'~', '@', '\x2', '\x6F1', '\x6F8', '\x5', '\x1F8', '\xFD', '\x2', '\x6F2', 
		'\x6F8', '\x5', '\xC6', '\x64', '\x2', '\x6F3', '\x6F8', '\x5', '\x12', 
		'\n', '\x2', '\x6F4', '\x6F8', '\x5', '\x1F4', '\xFB', '\x2', '\x6F5', 
		'\x6F8', '\x5', '\xE4', 's', '\x2', '\x6F6', '\x6F8', '\x5', '\xE2', 'r', 
		'\x2', '\x6F7', '\x6EC', '\x3', '\x2', '\x2', '\x2', '\x6F7', '\x6ED', 
		'\x3', '\x2', '\x2', '\x2', '\x6F7', '\x6EE', '\x3', '\x2', '\x2', '\x2', 
		'\x6F7', '\x6EF', '\x3', '\x2', '\x2', '\x2', '\x6F7', '\x6F0', '\x3', 
		'\x2', '\x2', '\x2', '\x6F7', '\x6F1', '\x3', '\x2', '\x2', '\x2', '\x6F7', 
		'\x6F2', '\x3', '\x2', '\x2', '\x2', '\x6F7', '\x6F3', '\x3', '\x2', '\x2', 
		'\x2', '\x6F7', '\x6F4', '\x3', '\x2', '\x2', '\x2', '\x6F7', '\x6F5', 
		'\x3', '\x2', '\x2', '\x2', '\x6F7', '\x6F6', '\x3', '\x2', '\x2', '\x2', 
		'\x6F8', '\x145', '\x3', '\x2', '\x2', '\x2', '\x6F9', '\x6FB', '\x5', 
		'\x144', '\xA3', '\x2', '\x6FA', '\x6F9', '\x3', '\x2', '\x2', '\x2', 
		'\x6FB', '\x6FE', '\x3', '\x2', '\x2', '\x2', '\x6FC', '\x6FA', '\x3', 
		'\x2', '\x2', '\x2', '\x6FC', '\x6FD', '\x3', '\x2', '\x2', '\x2', '\x6FD', 
		'\x147', '\x3', '\x2', '\x2', '\x2', '\x6FE', '\x6FC', '\x3', '\x2', '\x2', 
		'\x2', '\x6FF', '\x700', '\a', '\x42', '\x2', '\x2', '\x700', '\x701', 
		'\x5', '\xE8', 'u', '\x2', '\x701', '\x702', '\a', '+', '\x2', '\x2', 
		'\x702', '\x703', '\x5', '\x14C', '\xA7', '\x2', '\x703', '\x705', '\a', 
		'\x1A', '\x2', '\x2', '\x704', '\x706', '\a', '\x42', '\x2', '\x2', '\x705', 
		'\x704', '\x3', '\x2', '\x2', '\x2', '\x705', '\x706', '\x3', '\x2', '\x2', 
		'\x2', '\x706', '\x708', '\x3', '\x2', '\x2', '\x2', '\x707', '\x709', 
		'\x5', '\xE8', 'u', '\x2', '\x708', '\x707', '\x3', '\x2', '\x2', '\x2', 
		'\x708', '\x709', '\x3', '\x2', '\x2', '\x2', '\x709', '\x70A', '\x3', 
		'\x2', '\x2', '\x2', '\x70A', '\x70B', '\a', '\x8C', '\x2', '\x2', '\x70B', 
		'\x149', '\x3', '\x2', '\x2', '\x2', '\x70C', '\x720', '\x5', '\x1C8', 
		'\xE5', '\x2', '\x70D', '\x720', '\x5', '\x1C6', '\xE4', '\x2', '\x70E', 
		'\x720', '\x5', '\x1EC', '\xF7', '\x2', '\x70F', '\x720', '\x5', '\x1D8', 
		'\xED', '\x2', '\x710', '\x720', '\x5', '~', '@', '\x2', '\x711', '\x720', 
		'\x5', '\x1A4', '\xD3', '\x2', '\x712', '\x720', '\x5', '\x1F8', '\xFD', 
		'\x2', '\x713', '\x720', '\x5', '\xC6', '\x64', '\x2', '\x714', '\x720', 
		'\x5', '\x12', '\n', '\x2', '\x715', '\x720', '\x5', 'Z', '.', '\x2', 
		'\x716', '\x720', '\x5', '.', '\x18', '\x2', '\x717', '\x720', '\x5', 
		'\x32', '\x1A', '\x2', '\x718', '\x720', '\x5', '\x94', 'K', '\x2', '\x719', 
		'\x720', '\x5', '\x1F4', '\xFB', '\x2', '\x71A', '\x720', '\x5', '\xE4', 
		's', '\x2', '\x71B', '\x720', '\x5', '\xE2', 'r', '\x2', '\x71C', '\x720', 
		'\x5', '\x134', '\x9B', '\x2', '\x71D', '\x720', '\x5', '\x1C2', '\xE2', 
		'\x2', '\x71E', '\x720', '\x5', '\x1E4', '\xF3', '\x2', '\x71F', '\x70C', 
		'\x3', '\x2', '\x2', '\x2', '\x71F', '\x70D', '\x3', '\x2', '\x2', '\x2', 
		'\x71F', '\x70E', '\x3', '\x2', '\x2', '\x2', '\x71F', '\x70F', '\x3', 
		'\x2', '\x2', '\x2', '\x71F', '\x710', '\x3', '\x2', '\x2', '\x2', '\x71F', 
		'\x711', '\x3', '\x2', '\x2', '\x2', '\x71F', '\x712', '\x3', '\x2', '\x2', 
		'\x2', '\x71F', '\x713', '\x3', '\x2', '\x2', '\x2', '\x71F', '\x714', 
		'\x3', '\x2', '\x2', '\x2', '\x71F', '\x715', '\x3', '\x2', '\x2', '\x2', 
		'\x71F', '\x716', '\x3', '\x2', '\x2', '\x2', '\x71F', '\x717', '\x3', 
		'\x2', '\x2', '\x2', '\x71F', '\x718', '\x3', '\x2', '\x2', '\x2', '\x71F', 
		'\x719', '\x3', '\x2', '\x2', '\x2', '\x71F', '\x71A', '\x3', '\x2', '\x2', 
		'\x2', '\x71F', '\x71B', '\x3', '\x2', '\x2', '\x2', '\x71F', '\x71C', 
		'\x3', '\x2', '\x2', '\x2', '\x71F', '\x71D', '\x3', '\x2', '\x2', '\x2', 
		'\x71F', '\x71E', '\x3', '\x2', '\x2', '\x2', '\x720', '\x14B', '\x3', 
		'\x2', '\x2', '\x2', '\x721', '\x723', '\x5', '\x14A', '\xA6', '\x2', 
		'\x722', '\x721', '\x3', '\x2', '\x2', '\x2', '\x723', '\x726', '\x3', 
		'\x2', '\x2', '\x2', '\x724', '\x722', '\x3', '\x2', '\x2', '\x2', '\x724', 
		'\x725', '\x3', '\x2', '\x2', '\x2', '\x725', '\x14D', '\x3', '\x2', '\x2', 
		'\x2', '\x726', '\x724', '\x3', '\x2', '\x2', '\x2', '\x727', '\x728', 
		'\x5', '\xE8', 'u', '\x2', '\x728', '\x729', '\a', '(', '\x2', '\x2', 
		'\x729', '\x72A', '\x5', '\x96', 'L', '\x2', '\x72A', '\x14F', '\x3', 
		'\x2', '\x2', '\x2', '\x72B', '\x72C', '\x5', '\x2', '\x2', '\x2', '\x72C', 
		'\x72D', '\x5', '\xE8', 'u', '\x2', '\x72D', '\x151', '\x3', '\x2', '\x2', 
		'\x2', '\x72E', '\x72F', '\x5', '\x17C', '\xBF', '\x2', '\x72F', '\x730', 
		'\a', 'h', '\x2', '\x2', '\x730', '\x734', '\x5', '\x34', '\x1B', '\x2', 
		'\x731', '\x733', '\x5', '\x190', '\xC9', '\x2', '\x732', '\x731', '\x3', 
		'\x2', '\x2', '\x2', '\x733', '\x736', '\x3', '\x2', '\x2', '\x2', '\x734', 
		'\x732', '\x3', '\x2', '\x2', '\x2', '\x734', '\x735', '\x3', '\x2', '\x2', 
		'\x2', '\x735', '\x737', '\x3', '\x2', '\x2', '\x2', '\x736', '\x734', 
		'\x3', '\x2', '\x2', '\x2', '\x737', '\x738', '\a', '\x1A', '\x2', '\x2', 
		'\x738', '\x73A', '\a', 'h', '\x2', '\x2', '\x739', '\x73B', '\x5', '\xE8', 
		'u', '\x2', '\x73A', '\x739', '\x3', '\x2', '\x2', '\x2', '\x73A', '\x73B', 
		'\x3', '\x2', '\x2', '\x2', '\x73B', '\x153', '\x3', '\x2', '\x2', '\x2', 
		'\x73C', '\x73D', '\a', '\x43', '\x2', '\x2', '\x73D', '\x73E', '\a', 
		'\x8F', '\x2', '\x2', '\x73E', '\x73F', '\x5', '\x156', '\xAC', '\x2', 
		'\x73F', '\x740', '\a', '\x90', '\x2', '\x2', '\x740', '\x741', '\a', 
		'\x8C', '\x2', '\x2', '\x741', '\x155', '\x3', '\x2', '\x2', '\x2', '\x742', 
		'\x743', '\x5', '\x102', '\x82', '\x2', '\x743', '\x157', '\x3', '\x2', 
		'\x2', '\x2', '\x744', '\x745', '\a', '\x43', '\x2', '\x2', '\x745', '\x746', 
		'\a', '\x32', '\x2', '\x2', '\x746', '\x747', '\a', '\x8F', '\x2', '\x2', 
		'\x747', '\x748', '\x5', ',', '\x17', '\x2', '\x748', '\x749', '\a', '\x90', 
		'\x2', '\x2', '\x749', '\x159', '\x3', '\x2', '\x2', '\x2', '\x74A', '\x754', 
		'\x5', '\x118', '\x8D', '\x2', '\x74B', '\x754', '\x5', '\x170', '\xB9', 
		'\x2', '\x74C', '\x74D', '\a', '\x8F', '\x2', '\x2', '\x74D', '\x74E', 
		'\x5', '\xC2', '\x62', '\x2', '\x74E', '\x74F', '\a', '\x90', '\x2', '\x2', 
		'\x74F', '\x754', '\x3', '\x2', '\x2', '\x2', '\x750', '\x754', '\x5', 
		'\x18', '\r', '\x2', '\x751', '\x754', '\x5', '\x10', '\t', '\x2', '\x752', 
		'\x754', '\x5', '\x126', '\x94', '\x2', '\x753', '\x74A', '\x3', '\x2', 
		'\x2', '\x2', '\x753', '\x74B', '\x3', '\x2', '\x2', '\x2', '\x753', '\x74C', 
		'\x3', '\x2', '\x2', '\x2', '\x753', '\x750', '\x3', '\x2', '\x2', '\x2', 
		'\x753', '\x751', '\x3', '\x2', '\x2', '\x2', '\x753', '\x752', '\x3', 
		'\x2', '\x2', '\x2', '\x754', '\x15B', '\x3', '\x2', '\x2', '\x2', '\x755', 
		'\x759', '\x5', '\xA8', 'U', '\x2', '\x756', '\x759', '\x5', 't', ';', 
		'\x2', '\x757', '\x759', '\x5', '\x148', '\xA5', '\x2', '\x758', '\x755', 
		'\x3', '\x2', '\x2', '\x2', '\x758', '\x756', '\x3', '\x2', '\x2', '\x2', 
		'\x758', '\x757', '\x3', '\x2', '\x2', '\x2', '\x759', '\x15D', '\x3', 
		'\x2', '\x2', '\x2', '\x75A', '\x767', '\x5', '\x1C8', '\xE5', '\x2', 
		'\x75B', '\x767', '\x5', '\x1C6', '\xE4', '\x2', '\x75C', '\x767', '\x5', 
		'\x1EC', '\xF7', '\x2', '\x75D', '\x767', '\x5', '\x1D8', '\xED', '\x2', 
		'\x75E', '\x767', '\x5', '~', '@', '\x2', '\x75F', '\x767', '\x5', '\x1F8', 
		'\xFD', '\x2', '\x760', '\x767', '\x5', '\x12', '\n', '\x2', '\x761', 
		'\x767', '\x5', '.', '\x18', '\x2', '\x762', '\x767', '\x5', '\x32', '\x1A', 
		'\x2', '\x763', '\x767', '\x5', '\x1F4', '\xFB', '\x2', '\x764', '\x767', 
		'\x5', '\xE4', 's', '\x2', '\x765', '\x767', '\x5', '\xE2', 'r', '\x2', 
		'\x766', '\x75A', '\x3', '\x2', '\x2', '\x2', '\x766', '\x75B', '\x3', 
		'\x2', '\x2', '\x2', '\x766', '\x75C', '\x3', '\x2', '\x2', '\x2', '\x766', 
		'\x75D', '\x3', '\x2', '\x2', '\x2', '\x766', '\x75E', '\x3', '\x2', '\x2', 
		'\x2', '\x766', '\x75F', '\x3', '\x2', '\x2', '\x2', '\x766', '\x760', 
		'\x3', '\x2', '\x2', '\x2', '\x766', '\x761', '\x3', '\x2', '\x2', '\x2', 
		'\x766', '\x762', '\x3', '\x2', '\x2', '\x2', '\x766', '\x763', '\x3', 
		'\x2', '\x2', '\x2', '\x766', '\x764', '\x3', '\x2', '\x2', '\x2', '\x766', 
		'\x765', '\x3', '\x2', '\x2', '\x2', '\x767', '\x15F', '\x3', '\x2', '\x2', 
		'\x2', '\x768', '\x76A', '\x5', '\x15E', '\xB0', '\x2', '\x769', '\x768', 
		'\x3', '\x2', '\x2', '\x2', '\x76A', '\x76D', '\x3', '\x2', '\x2', '\x2', 
		'\x76B', '\x769', '\x3', '\x2', '\x2', '\x2', '\x76B', '\x76C', '\x3', 
		'\x2', '\x2', '\x2', '\x76C', '\x161', '\x3', '\x2', '\x2', '\x2', '\x76D', 
		'\x76B', '\x3', '\x2', '\x2', '\x2', '\x76E', '\x770', '\x5', '\x19C', 
		'\xCF', '\x2', '\x76F', '\x76E', '\x3', '\x2', '\x2', '\x2', '\x770', 
		'\x773', '\x3', '\x2', '\x2', '\x2', '\x771', '\x76F', '\x3', '\x2', '\x2', 
		'\x2', '\x771', '\x772', '\x3', '\x2', '\x2', '\x2', '\x772', '\x163', 
		'\x3', '\x2', '\x2', '\x2', '\x773', '\x771', '\x3', '\x2', '\x2', '\x2', 
		'\x774', '\x779', '\x5', '\x12A', '\x96', '\x2', '\x775', '\x776', '\a', 
		'\x8F', '\x2', '\x2', '\x776', '\x777', '\x5', '\n', '\x6', '\x2', '\x777', 
		'\x778', '\a', '\x90', '\x2', '\x2', '\x778', '\x77A', '\x3', '\x2', '\x2', 
		'\x2', '\x779', '\x775', '\x3', '\x2', '\x2', '\x2', '\x779', '\x77A', 
		'\x3', '\x2', '\x2', '\x2', '\x77A', '\x165', '\x3', '\x2', '\x2', '\x2', 
		'\x77B', '\x77D', '\x5', '\x112', '\x8A', '\x2', '\x77C', '\x77B', '\x3', 
		'\x2', '\x2', '\x2', '\x77C', '\x77D', '\x3', '\x2', '\x2', '\x2', '\x77D', 
		'\x77E', '\x3', '\x2', '\x2', '\x2', '\x77E', '\x77F', '\x5', '\x164', 
		'\xB3', '\x2', '\x77F', '\x780', '\a', '\x8C', '\x2', '\x2', '\x780', 
		'\x167', '\x3', '\x2', '\x2', '\x2', '\x781', '\x78F', '\x5', '\x1C8', 
		'\xE5', '\x2', '\x782', '\x78F', '\x5', '\x1C6', '\xE4', '\x2', '\x783', 
		'\x78F', '\x5', '\x1EC', '\xF7', '\x2', '\x784', '\x78F', '\x5', '\x1D8', 
		'\xED', '\x2', '\x785', '\x78F', '\x5', '~', '@', '\x2', '\x786', '\x78F', 
		'\x5', '\x1F8', '\xFD', '\x2', '\x787', '\x78F', '\x5', '\xC6', '\x64', 
		'\x2', '\x788', '\x78F', '\x5', '\x12', '\n', '\x2', '\x789', '\x78F', 
		'\x5', '.', '\x18', '\x2', '\x78A', '\x78F', '\x5', '\x32', '\x1A', '\x2', 
		'\x78B', '\x78F', '\x5', '\x1F4', '\xFB', '\x2', '\x78C', '\x78F', '\x5', 
		'\xE4', 's', '\x2', '\x78D', '\x78F', '\x5', '\xE2', 'r', '\x2', '\x78E', 
		'\x781', '\x3', '\x2', '\x2', '\x2', '\x78E', '\x782', '\x3', '\x2', '\x2', 
		'\x2', '\x78E', '\x783', '\x3', '\x2', '\x2', '\x2', '\x78E', '\x784', 
		'\x3', '\x2', '\x2', '\x2', '\x78E', '\x785', '\x3', '\x2', '\x2', '\x2', 
		'\x78E', '\x786', '\x3', '\x2', '\x2', '\x2', '\x78E', '\x787', '\x3', 
		'\x2', '\x2', '\x2', '\x78E', '\x788', '\x3', '\x2', '\x2', '\x2', '\x78E', 
		'\x789', '\x3', '\x2', '\x2', '\x2', '\x78E', '\x78A', '\x3', '\x2', '\x2', 
		'\x2', '\x78E', '\x78B', '\x3', '\x2', '\x2', '\x2', '\x78E', '\x78C', 
		'\x3', '\x2', '\x2', '\x2', '\x78E', '\x78D', '\x3', '\x2', '\x2', '\x2', 
		'\x78F', '\x169', '\x3', '\x2', '\x2', '\x2', '\x790', '\x792', '\x5', 
		'\x168', '\xB5', '\x2', '\x791', '\x790', '\x3', '\x2', '\x2', '\x2', 
		'\x792', '\x795', '\x3', '\x2', '\x2', '\x2', '\x793', '\x791', '\x3', 
		'\x2', '\x2', '\x2', '\x793', '\x794', '\x3', '\x2', '\x2', '\x2', '\x794', 
		'\x16B', '\x3', '\x2', '\x2', '\x2', '\x795', '\x793', '\x3', '\x2', '\x2', 
		'\x2', '\x796', '\x798', '\x5', '\x112', '\x8A', '\x2', '\x797', '\x796', 
		'\x3', '\x2', '\x2', '\x2', '\x797', '\x798', '\x3', '\x2', '\x2', '\x2', 
		'\x798', '\x79A', '\x3', '\x2', '\x2', '\x2', '\x799', '\x79B', '\a', 
		'\x44', '\x2', '\x2', '\x79A', '\x799', '\x3', '\x2', '\x2', '\x2', '\x79A', 
		'\x79B', '\x3', '\x2', '\x2', '\x2', '\x79B', '\x79C', '\x3', '\x2', '\x2', 
		'\x2', '\x79C', '\x7A1', '\a', '\x45', '\x2', '\x2', '\x79D', '\x79E', 
		'\a', '\x8F', '\x2', '\x2', '\x79E', '\x79F', '\x5', '\x198', '\xCD', 
		'\x2', '\x79F', '\x7A0', '\a', '\x90', '\x2', '\x2', '\x7A0', '\x7A2', 
		'\x3', '\x2', '\x2', '\x2', '\x7A1', '\x79D', '\x3', '\x2', '\x2', '\x2', 
		'\x7A1', '\x7A2', '\x3', '\x2', '\x2', '\x2', '\x7A2', '\x7A4', '\x3', 
		'\x2', '\x2', '\x2', '\x7A3', '\x7A5', '\a', '+', '\x2', '\x2', '\x7A4', 
		'\x7A3', '\x3', '\x2', '\x2', '\x2', '\x7A4', '\x7A5', '\x3', '\x2', '\x2', 
		'\x2', '\x7A5', '\x7A6', '\x3', '\x2', '\x2', '\x2', '\x7A6', '\x7A7', 
		'\x5', '\x16A', '\xB6', '\x2', '\x7A7', '\x7A8', '\a', '\xE', '\x2', '\x2', 
		'\x7A8', '\x7A9', '\x5', '\x16E', '\xB8', '\x2', '\x7A9', '\x7AB', '\a', 
		'\x1A', '\x2', '\x2', '\x7AA', '\x7AC', '\a', '\x44', '\x2', '\x2', '\x7AB', 
		'\x7AA', '\x3', '\x2', '\x2', '\x2', '\x7AB', '\x7AC', '\x3', '\x2', '\x2', 
		'\x2', '\x7AC', '\x7AD', '\x3', '\x2', '\x2', '\x2', '\x7AD', '\x7AF', 
		'\a', '\x45', '\x2', '\x2', '\x7AE', '\x7B0', '\x5', '\xE8', 'u', '\x2', 
		'\x7AF', '\x7AE', '\x3', '\x2', '\x2', '\x2', '\x7AF', '\x7B0', '\x3', 
		'\x2', '\x2', '\x2', '\x7B0', '\x7B1', '\x3', '\x2', '\x2', '\x2', '\x7B1', 
		'\x7B2', '\a', '\x8C', '\x2', '\x2', '\x7B2', '\x16D', '\x3', '\x2', '\x2', 
		'\x2', '\x7B3', '\x7B5', '\x5', '\x19C', '\xCF', '\x2', '\x7B4', '\x7B3', 
		'\x3', '\x2', '\x2', '\x2', '\x7B5', '\x7B8', '\x3', '\x2', '\x2', '\x2', 
		'\x7B6', '\x7B4', '\x3', '\x2', '\x2', '\x2', '\x7B6', '\x7B7', '\x3', 
		'\x2', '\x2', '\x2', '\x7B7', '\x16F', '\x3', '\x2', '\x2', '\x2', '\x7B8', 
		'\x7B6', '\x3', '\x2', '\x2', '\x2', '\x7B9', '\x7BA', '\x5', '\x1DA', 
		'\xEE', '\x2', '\x7BA', '\x7C0', '\a', '\xA4', '\x2', '\x2', '\x7BB', 
		'\x7C1', '\x5', '\x10', '\t', '\x2', '\x7BC', '\x7BD', '\a', '\x8F', '\x2', 
		'\x2', '\x7BD', '\x7BE', '\x5', '\xC2', '\x62', '\x2', '\x7BE', '\x7BF', 
		'\a', '\x90', '\x2', '\x2', '\x7BF', '\x7C1', '\x3', '\x2', '\x2', '\x2', 
		'\x7C0', '\x7BB', '\x3', '\x2', '\x2', '\x2', '\x7C0', '\x7BC', '\x3', 
		'\x2', '\x2', '\x2', '\x7C1', '\x171', '\x3', '\x2', '\x2', '\x2', '\x7C2', 
		'\x7C6', '\x5', '\xD2', 'j', '\x2', '\x7C3', '\x7C6', '\x5', '\x46', '$', 
		'\x2', '\x7C4', '\x7C6', '\x5', '\x1BE', '\xE0', '\x2', '\x7C5', '\x7C2', 
		'\x3', '\x2', '\x2', '\x2', '\x7C5', '\x7C3', '\x3', '\x2', '\x2', '\x2', 
		'\x7C5', '\x7C4', '\x3', '\x2', '\x2', '\x2', '\x7C6', '\x173', '\x3', 
		'\x2', '\x2', '\x2', '\x7C7', '\x7CC', '\x5', '\x126', '\x94', '\x2', 
		'\x7C8', '\x7C9', '\a', '\x8D', '\x2', '\x2', '\x7C9', '\x7CB', '\x5', 
		'\x126', '\x94', '\x2', '\x7CA', '\x7C8', '\x3', '\x2', '\x2', '\x2', 
		'\x7CB', '\x7CE', '\x3', '\x2', '\x2', '\x2', '\x7CC', '\x7CA', '\x3', 
		'\x2', '\x2', '\x2', '\x7CC', '\x7CD', '\x3', '\x2', '\x2', '\x2', '\x7CD', 
		'\x7D2', '\x3', '\x2', '\x2', '\x2', '\x7CE', '\x7CC', '\x3', '\x2', '\x2', 
		'\x2', '\x7CF', '\x7D2', '\a', '@', '\x2', '\x2', '\x7D0', '\x7D2', '\a', 
		'\b', '\x2', '\x2', '\x7D1', '\x7C7', '\x3', '\x2', '\x2', '\x2', '\x7D1', 
		'\x7CF', '\x3', '\x2', '\x2', '\x2', '\x7D1', '\x7D0', '\x3', '\x2', '\x2', 
		'\x2', '\x7D2', '\x175', '\x3', '\x2', '\x2', '\x2', '\x7D3', '\x7D4', 
		'\x5', '\x174', '\xBB', '\x2', '\x7D4', '\x7D5', '\a', '\x93', '\x2', 
		'\x2', '\x7D5', '\x7D6', '\x5', '\x126', '\x94', '\x2', '\x7D6', '\x177', 
		'\x3', '\x2', '\x2', '\x2', '\x7D7', '\x7DA', '\x5', '\x17A', '\xBE', 
		'\x2', '\x7D8', '\x7DA', '\x5', '\x126', '\x94', '\x2', '\x7D9', '\x7D7', 
		'\x3', '\x2', '\x2', '\x2', '\x7D9', '\x7D8', '\x3', '\x2', '\x2', '\x2', 
		'\x7DA', '\x179', '\x3', '\x2', '\x2', '\x2', '\x7DB', '\x7DF', '\x5', 
		'\x1AC', '\xD7', '\x2', '\x7DC', '\x7DD', '\x5', '\x92', 'J', '\x2', '\x7DD', 
		'\x7DE', '\x5', '\x1AC', '\xD7', '\x2', '\x7DE', '\x7E0', '\x3', '\x2', 
		'\x2', '\x2', '\x7DF', '\x7DC', '\x3', '\x2', '\x2', '\x2', '\x7DF', '\x7E0', 
		'\x3', '\x2', '\x2', '\x2', '\x7E0', '\x17B', '\x3', '\x2', '\x2', '\x2', 
		'\x7E1', '\x7E2', '\a', 'J', '\x2', '\x2', '\x7E2', '\x7E3', '\x5', '\x178', 
		'\xBD', '\x2', '\x7E3', '\x17D', '\x3', '\x2', '\x2', '\x2', '\x7E4', 
		'\x7E6', '\a', 'N', '\x2', '\x2', '\x7E5', '\x7E7', '\x5', '\x138', '\x9D', 
		'\x2', '\x7E6', '\x7E5', '\x3', '\x2', '\x2', '\x2', '\x7E7', '\x7E8', 
		'\x3', '\x2', '\x2', '\x2', '\x7E8', '\x7E6', '\x3', '\x2', '\x2', '\x2', 
		'\x7E8', '\x7E9', '\x3', '\x2', '\x2', '\x2', '\x7E9', '\x7EA', '\x3', 
		'\x2', '\x2', '\x2', '\x7EA', '\x7EB', '\a', '\x1A', '\x2', '\x2', '\x7EB', 
		'\x7ED', '\a', 'N', '\x2', '\x2', '\x7EC', '\x7EE', '\x5', '\xE8', 'u', 
		'\x2', '\x7ED', '\x7EC', '\x3', '\x2', '\x2', '\x2', '\x7ED', '\x7EE', 
		'\x3', '\x2', '\x2', '\x2', '\x7EE', '\x17F', '\x3', '\x2', '\x2', '\x2', 
		'\x7EF', '\x7F1', '\a', 'N', '\x2', '\x2', '\x7F0', '\x7F2', '\x5', '\x9A', 
		'N', '\x2', '\x7F1', '\x7F0', '\x3', '\x2', '\x2', '\x2', '\x7F2', '\x7F3', 
		'\x3', '\x2', '\x2', '\x2', '\x7F3', '\x7F1', '\x3', '\x2', '\x2', '\x2', 
		'\x7F3', '\x7F4', '\x3', '\x2', '\x2', '\x2', '\x7F4', '\x7F5', '\x3', 
		'\x2', '\x2', '\x2', '\x7F5', '\x7F6', '\a', '\x1A', '\x2', '\x2', '\x7F6', 
		'\x7F8', '\a', 'N', '\x2', '\x2', '\x7F7', '\x7F9', '\x5', '\xE8', 'u', 
		'\x2', '\x7F8', '\x7F7', '\x3', '\x2', '\x2', '\x2', '\x7F8', '\x7F9', 
		'\x3', '\x2', '\x2', '\x2', '\x7F9', '\x181', '\x3', '\x2', '\x2', '\x2', 
		'\x7FA', '\x7FE', '\x5', '\x19E', '\xD0', '\x2', '\x7FB', '\x7FC', '\x5', 
		'\x184', '\xC3', '\x2', '\x7FC', '\x7FD', '\x5', '\x19E', '\xD0', '\x2', 
		'\x7FD', '\x7FF', '\x3', '\x2', '\x2', '\x2', '\x7FE', '\x7FB', '\x3', 
		'\x2', '\x2', '\x2', '\x7FE', '\x7FF', '\x3', '\x2', '\x2', '\x2', '\x7FF', 
		'\x183', '\x3', '\x2', '\x2', '\x2', '\x800', '\x801', '\t', '\v', '\x2', 
		'\x2', '\x801', '\x185', '\x3', '\x2', '\x2', '\x2', '\x802', '\x804', 
		'\x5', '\x112', '\x8A', '\x2', '\x803', '\x802', '\x3', '\x2', '\x2', 
		'\x2', '\x803', '\x804', '\x3', '\x2', '\x2', '\x2', '\x804', '\x805', 
		'\x3', '\x2', '\x2', '\x2', '\x805', '\x806', '\a', 'Q', '\x2', '\x2', 
		'\x806', '\x809', '\x5', '\xC2', '\x62', '\x2', '\x807', '\x808', '\a', 
		'V', '\x2', '\x2', '\x808', '\x80A', '\x5', '\xC2', '\x62', '\x2', '\x809', 
		'\x807', '\x3', '\x2', '\x2', '\x2', '\x809', '\x80A', '\x3', '\x2', '\x2', 
		'\x2', '\x80A', '\x80B', '\x3', '\x2', '\x2', '\x2', '\x80B', '\x80C', 
		'\a', '\x8C', '\x2', '\x2', '\x80C', '\x187', '\x3', '\x2', '\x2', '\x2', 
		'\x80D', '\x80F', '\x5', '\x112', '\x8A', '\x2', '\x80E', '\x80D', '\x3', 
		'\x2', '\x2', '\x2', '\x80E', '\x80F', '\x3', '\x2', '\x2', '\x2', '\x80F', 
		'\x810', '\x3', '\x2', '\x2', '\x2', '\x810', '\x812', '\a', 'R', '\x2', 
		'\x2', '\x811', '\x813', '\x5', '\xC2', '\x62', '\x2', '\x812', '\x811', 
		'\x3', '\x2', '\x2', '\x2', '\x812', '\x813', '\x3', '\x2', '\x2', '\x2', 
		'\x813', '\x814', '\x3', '\x2', '\x2', '\x2', '\x814', '\x815', '\a', 
		'\x8C', '\x2', '\x2', '\x815', '\x189', '\x3', '\x2', '\x2', '\x2', '\x816', 
		'\x817', '\x5', '\x126', '\x94', '\x2', '\x817', '\x818', '\a', '\x5', 
		'\x2', '\x2', '\x818', '\x819', '\x5', '\x126', '\x94', '\x2', '\x819', 
		'\x81A', '\a', '\x62', '\x2', '\x2', '\x81A', '\x81B', '\x5', '\x126', 
		'\x94', '\x2', '\x81B', '\x81C', '\a', 'O', '\x2', '\x2', '\x81C', '\x18B', 
		'\x3', '\x2', '\x2', '\x2', '\x81D', '\x821', '\x5', '\x152', '\xAA', 
		'\x2', '\x81E', '\x821', '\x5', '\xBE', '`', '\x2', '\x81F', '\x821', 
		'\x5', '\x17C', '\xBF', '\x2', '\x820', '\x81D', '\x3', '\x2', '\x2', 
		'\x2', '\x820', '\x81E', '\x3', '\x2', '\x2', '\x2', '\x820', '\x81F', 
		'\x3', '\x2', '\x2', '\x2', '\x821', '\x18D', '\x3', '\x2', '\x2', '\x2', 
		'\x822', '\x825', '\x5', '\x1A', '\xE', '\x2', '\x823', '\x825', '\x5', 
		'\x142', '\xA2', '\x2', '\x824', '\x822', '\x3', '\x2', '\x2', '\x2', 
		'\x824', '\x823', '\x3', '\x2', '\x2', '\x2', '\x825', '\x18F', '\x3', 
		'\x2', '\x2', '\x2', '\x826', '\x827', '\x5', '\xE8', 'u', '\x2', '\x827', 
		'\x828', '\a', '\x9A', '\x2', '\x2', '\x828', '\x829', '\x5', '\x150', 
		'\xA9', '\x2', '\x829', '\x82A', '\a', '\x8C', '\x2', '\x2', '\x82A', 
		'\x191', '\x3', '\x2', '\x2', '\x2', '\x82B', '\x82C', '\a', 'm', '\x2', 
		'\x2', '\x82C', '\x82D', '\x5', '\xC2', '\x62', '\x2', '\x82D', '\x82E', 
		'\a', 'U', '\x2', '\x2', '\x82E', '\x82F', '\x5', '\x1DE', '\xF0', '\x2', 
		'\x82F', '\x830', '\a', '\x85', '\x2', '\x2', '\x830', '\x831', '\x5', 
		'\x140', '\xA1', '\x2', '\x831', '\x832', '\x5', '\x194', '\xCB', '\x2', 
		'\x832', '\x833', '\a', '\x8C', '\x2', '\x2', '\x833', '\x193', '\x3', 
		'\x2', '\x2', '\x2', '\x834', '\x835', '\x5', '\x1FC', '\xFF', '\x2', 
		'\x835', '\x836', '\a', 'n', '\x2', '\x2', '\x836', '\x83E', '\x5', 'V', 
		',', '\x2', '\x837', '\x838', '\a', '\x8D', '\x2', '\x2', '\x838', '\x839', 
		'\x5', '\x1FC', '\xFF', '\x2', '\x839', '\x83A', '\a', 'n', '\x2', '\x2', 
		'\x83A', '\x83B', '\x5', 'V', ',', '\x2', '\x83B', '\x83D', '\x3', '\x2', 
		'\x2', '\x2', '\x83C', '\x837', '\x3', '\x2', '\x2', '\x2', '\x83D', '\x840', 
		'\x3', '\x2', '\x2', '\x2', '\x83E', '\x83C', '\x3', '\x2', '\x2', '\x2', 
		'\x83E', '\x83F', '\x3', '\x2', '\x2', '\x2', '\x83F', '\x195', '\x3', 
		'\x2', '\x2', '\x2', '\x840', '\x83E', '\x3', '\x2', '\x2', '\x2', '\x841', 
		'\x842', '\a', '=', '\x2', '\x2', '\x842', '\x843', '\x5', '\x198', '\xCD', 
		'\x2', '\x843', '\x197', '\x3', '\x2', '\x2', '\x2', '\x844', '\x849', 
		'\x5', '\x126', '\x94', '\x2', '\x845', '\x846', '\a', '\x8D', '\x2', 
		'\x2', '\x846', '\x848', '\x5', '\x126', '\x94', '\x2', '\x847', '\x845', 
		'\x3', '\x2', '\x2', '\x2', '\x848', '\x84B', '\x3', '\x2', '\x2', '\x2', 
		'\x849', '\x847', '\x3', '\x2', '\x2', '\x2', '\x849', '\x84A', '\x3', 
		'\x2', '\x2', '\x2', '\x84A', '\x199', '\x3', '\x2', '\x2', '\x2', '\x84B', 
		'\x849', '\x3', '\x2', '\x2', '\x2', '\x84C', '\x84E', '\x5', '\x19C', 
		'\xCF', '\x2', '\x84D', '\x84C', '\x3', '\x2', '\x2', '\x2', '\x84E', 
		'\x851', '\x3', '\x2', '\x2', '\x2', '\x84F', '\x84D', '\x3', '\x2', '\x2', 
		'\x2', '\x84F', '\x850', '\x3', '\x2', '\x2', '\x2', '\x850', '\x19B', 
		'\x3', '\x2', '\x2', '\x2', '\x851', '\x84F', '\x3', '\x2', '\x2', '\x2', 
		'\x852', '\x865', '\x5', '\x1FA', '\xFE', '\x2', '\x853', '\x865', '\x5', 
		'(', '\x15', '\x2', '\x854', '\x865', '\x5', '\x186', '\xC4', '\x2', '\x855', 
		'\x865', '\x5', '\x1A2', '\xD2', '\x2', '\x856', '\x865', '\x5', '\x1F6', 
		'\xFC', '\x2', '\x857', '\x865', '\x5', '\xEC', 'w', '\x2', '\x858', '\x865', 
		'\x5', 'P', ')', '\x2', '\x859', '\x865', '\x5', '\x120', '\x91', '\x2', 
		'\x85A', '\x865', '\x5', '\x13A', '\x9E', '\x2', '\x85B', '\x865', '\x5', 
		'\xC0', '\x61', '\x2', '\x85C', '\x865', '\x5', '\x188', '\xC5', '\x2', 
		'\x85D', '\x85F', '\x5', '\x112', '\x8A', '\x2', '\x85E', '\x85D', '\x3', 
		'\x2', '\x2', '\x2', '\x85E', '\x85F', '\x3', '\x2', '\x2', '\x2', '\x85F', 
		'\x860', '\x3', '\x2', '\x2', '\x2', '\x860', '\x861', '\a', ';', '\x2', 
		'\x2', '\x861', '\x865', '\a', '\x8C', '\x2', '\x2', '\x862', '\x865', 
		'\x5', 'N', '(', '\x2', '\x863', '\x865', '\x5', '\x166', '\xB4', '\x2', 
		'\x864', '\x852', '\x3', '\x2', '\x2', '\x2', '\x864', '\x853', '\x3', 
		'\x2', '\x2', '\x2', '\x864', '\x854', '\x3', '\x2', '\x2', '\x2', '\x864', 
		'\x855', '\x3', '\x2', '\x2', '\x2', '\x864', '\x856', '\x3', '\x2', '\x2', 
		'\x2', '\x864', '\x857', '\x3', '\x2', '\x2', '\x2', '\x864', '\x858', 
		'\x3', '\x2', '\x2', '\x2', '\x864', '\x859', '\x3', '\x2', '\x2', '\x2', 
		'\x864', '\x85A', '\x3', '\x2', '\x2', '\x2', '\x864', '\x85B', '\x3', 
		'\x2', '\x2', '\x2', '\x864', '\x85C', '\x3', '\x2', '\x2', '\x2', '\x864', 
		'\x85E', '\x3', '\x2', '\x2', '\x2', '\x864', '\x862', '\x3', '\x2', '\x2', 
		'\x2', '\x864', '\x863', '\x3', '\x2', '\x2', '\x2', '\x865', '\x19D', 
		'\x3', '\x2', '\x2', '\x2', '\x866', '\x86A', '\x5', '\x1AC', '\xD7', 
		'\x2', '\x867', '\x868', '\x5', '\x1A0', '\xD1', '\x2', '\x868', '\x869', 
		'\x5', '\x1AC', '\xD7', '\x2', '\x869', '\x86B', '\x3', '\x2', '\x2', 
		'\x2', '\x86A', '\x867', '\x3', '\x2', '\x2', '\x2', '\x86A', '\x86B', 
		'\x3', '\x2', '\x2', '\x2', '\x86B', '\x19F', '\x3', '\x2', '\x2', '\x2', 
		'\x86C', '\x86D', '\t', '\f', '\x2', '\x2', '\x86D', '\x1A1', '\x3', '\x2', 
		'\x2', '\x2', '\x86E', '\x870', '\x5', '\x112', '\x8A', '\x2', '\x86F', 
		'\x86E', '\x3', '\x2', '\x2', '\x2', '\x86F', '\x870', '\x3', '\x2', '\x2', 
		'\x2', '\x870', '\x871', '\x3', '\x2', '\x2', '\x2', '\x871', '\x872', 
		'\x5', '\x1DE', '\xF0', '\x2', '\x872', '\x874', '\a', '\x85', '\x2', 
		'\x2', '\x873', '\x875', '\x5', '\x8A', '\x46', '\x2', '\x874', '\x873', 
		'\x3', '\x2', '\x2', '\x2', '\x874', '\x875', '\x3', '\x2', '\x2', '\x2', 
		'\x875', '\x876', '\x3', '\x2', '\x2', '\x2', '\x876', '\x877', '\x5', 
		'\x1FC', '\xFF', '\x2', '\x877', '\x878', '\a', '\x8C', '\x2', '\x2', 
		'\x878', '\x1A3', '\x3', '\x2', '\x2', '\x2', '\x879', '\x87A', '\a', 
		'X', '\x2', '\x2', '\x87A', '\x87B', '\x5', '\xEA', 'v', '\x2', '\x87B', 
		'\x87C', '\a', '\x93', '\x2', '\x2', '\x87C', '\x87E', '\x5', '\x1DA', 
		'\xEE', '\x2', '\x87D', '\x87F', '\x5', '\x1A6', '\xD4', '\x2', '\x87E', 
		'\x87D', '\x3', '\x2', '\x2', '\x2', '\x87E', '\x87F', '\x3', '\x2', '\x2', 
		'\x2', '\x87F', '\x882', '\x3', '\x2', '\x2', '\x2', '\x880', '\x881', 
		'\a', '\x89', '\x2', '\x2', '\x881', '\x883', '\x5', '\xC2', '\x62', '\x2', 
		'\x882', '\x880', '\x3', '\x2', '\x2', '\x2', '\x882', '\x883', '\x3', 
		'\x2', '\x2', '\x2', '\x883', '\x884', '\x3', '\x2', '\x2', '\x2', '\x884', 
		'\x885', '\a', '\x8C', '\x2', '\x2', '\x885', '\x1A5', '\x3', '\x2', '\x2', 
		'\x2', '\x886', '\x887', '\t', '\r', '\x2', '\x2', '\x887', '\x1A7', '\x3', 
		'\x2', '\x2', '\x2', '\x888', '\x88D', '\x5', '\x126', '\x94', '\x2', 
		'\x889', '\x88A', '\a', '\x8D', '\x2', '\x2', '\x88A', '\x88C', '\x5', 
		'\x126', '\x94', '\x2', '\x88B', '\x889', '\x3', '\x2', '\x2', '\x2', 
		'\x88C', '\x88F', '\x3', '\x2', '\x2', '\x2', '\x88D', '\x88B', '\x3', 
		'\x2', '\x2', '\x2', '\x88D', '\x88E', '\x3', '\x2', '\x2', '\x2', '\x88E', 
		'\x893', '\x3', '\x2', '\x2', '\x2', '\x88F', '\x88D', '\x3', '\x2', '\x2', 
		'\x2', '\x890', '\x893', '\a', '@', '\x2', '\x2', '\x891', '\x893', '\a', 
		'\b', '\x2', '\x2', '\x892', '\x888', '\x3', '\x2', '\x2', '\x2', '\x892', 
		'\x890', '\x3', '\x2', '\x2', '\x2', '\x892', '\x891', '\x3', '\x2', '\x2', 
		'\x2', '\x893', '\x1A9', '\x3', '\x2', '\x2', '\x2', '\x894', '\x89D', 
		'\a', '\x91', '\x2', '\x2', '\x895', '\x89A', '\x5', '\x126', '\x94', 
		'\x2', '\x896', '\x897', '\a', '\x8D', '\x2', '\x2', '\x897', '\x899', 
		'\x5', '\x126', '\x94', '\x2', '\x898', '\x896', '\x3', '\x2', '\x2', 
		'\x2', '\x899', '\x89C', '\x3', '\x2', '\x2', '\x2', '\x89A', '\x898', 
		'\x3', '\x2', '\x2', '\x2', '\x89A', '\x89B', '\x3', '\x2', '\x2', '\x2', 
		'\x89B', '\x89E', '\x3', '\x2', '\x2', '\x2', '\x89C', '\x89A', '\x3', 
		'\x2', '\x2', '\x2', '\x89D', '\x895', '\x3', '\x2', '\x2', '\x2', '\x89D', 
		'\x89E', '\x3', '\x2', '\x2', '\x2', '\x89E', '\x8A1', '\x3', '\x2', '\x2', 
		'\x2', '\x89F', '\x8A0', '\a', 'R', '\x2', '\x2', '\x8A0', '\x8A2', '\x5', 
		'\x126', '\x94', '\x2', '\x8A1', '\x89F', '\x3', '\x2', '\x2', '\x2', 
		'\x8A1', '\x8A2', '\x3', '\x2', '\x2', '\x2', '\x8A2', '\x8A3', '\x3', 
		'\x2', '\x2', '\x2', '\x8A3', '\x8A4', '\a', '\x92', '\x2', '\x2', '\x8A4', 
		'\x1AB', '\x3', '\x2', '\x2', '\x2', '\x8A5', '\x8A7', '\t', '\xE', '\x2', 
		'\x2', '\x8A6', '\x8A5', '\x3', '\x2', '\x2', '\x2', '\x8A6', '\x8A7', 
		'\x3', '\x2', '\x2', '\x2', '\x8A7', '\x8A8', '\x3', '\x2', '\x2', '\x2', 
		'\x8A8', '\x8AE', '\x5', '\x1E0', '\xF1', '\x2', '\x8A9', '\x8AA', '\x5', 
		'\xE', '\b', '\x2', '\x8AA', '\x8AB', '\x5', '\x1E0', '\xF1', '\x2', '\x8AB', 
		'\x8AD', '\x3', '\x2', '\x2', '\x2', '\x8AC', '\x8A9', '\x3', '\x2', '\x2', 
		'\x2', '\x8AD', '\x8B0', '\x3', '\x2', '\x2', '\x2', '\x8AE', '\x8AC', 
		'\x3', '\x2', '\x2', '\x2', '\x8AE', '\x8AF', '\x3', '\x2', '\x2', '\x2', 
		'\x8AF', '\x1AD', '\x3', '\x2', '\x2', '\x2', '\x8B0', '\x8AE', '\x3', 
		'\x2', '\x2', '\x2', '\x8B1', '\x8B3', '\x5', '\x112', '\x8A', '\x2', 
		'\x8B2', '\x8B1', '\x3', '\x2', '\x2', '\x2', '\x8B2', '\x8B3', '\x3', 
		'\x2', '\x2', '\x2', '\x8B3', '\x8B4', '\x3', '\x2', '\x2', '\x2', '\x8B4', 
		'\x8B5', '\x5', '\x1AC', '\xD7', '\x2', '\x8B5', '\x8B6', '\a', '\x84', 
		'\x2', '\x2', '\x8B6', '\x8B8', '\x5', '\x1AC', '\xD7', '\x2', '\x8B7', 
		'\x8B9', '\x5', '\x1EA', '\xF6', '\x2', '\x8B8', '\x8B7', '\x3', '\x2', 
		'\x2', '\x2', '\x8B8', '\x8B9', '\x3', '\x2', '\x2', '\x2', '\x8B9', '\x8BA', 
		'\x3', '\x2', '\x2', '\x2', '\x8BA', '\x8BB', '\a', '\x8C', '\x2', '\x2', 
		'\x8BB', '\x1AF', '\x3', '\x2', '\x2', '\x2', '\x8BC', '\x8BD', '\a', 
		'n', '\x2', '\x2', '\x8BD', '\x8BE', '\x5', 'V', ',', '\x2', '\x8BE', 
		'\x8BF', '\a', '\x87', '\x2', '\x2', '\x8BF', '\x8C0', '\x5', '\x1BA', 
		'\xDE', '\x2', '\x8C0', '\x1B1', '\x3', '\x2', '\x2', '\x2', '\x8C1', 
		'\x8C3', '\x5', '\x112', '\x8A', '\x2', '\x8C2', '\x8C1', '\x3', '\x2', 
		'\x2', '\x2', '\x8C2', '\x8C3', '\x3', '\x2', '\x2', '\x2', '\x8C3', '\x8C4', 
		'\x3', '\x2', '\x2', '\x2', '\x8C4', '\x8C5', '\a', '\x14', '\x2', '\x2', 
		'\x8C5', '\x8C6', '\x5', '\xC2', '\x62', '\x2', '\x8C6', '\x8C8', '\a', 
		'j', '\x2', '\x2', '\x8C7', '\x8C9', '\x5', '\x1B0', '\xD9', '\x2', '\x8C8', 
		'\x8C7', '\x3', '\x2', '\x2', '\x2', '\x8C9', '\x8CA', '\x3', '\x2', '\x2', 
		'\x2', '\x8CA', '\x8C8', '\x3', '\x2', '\x2', '\x2', '\x8CA', '\x8CB', 
		'\x3', '\x2', '\x2', '\x2', '\x8CB', '\x8CC', '\x3', '\x2', '\x2', '\x2', 
		'\x8CC', '\x8CD', '\a', '\x1A', '\x2', '\x2', '\x8CD', '\x8CF', '\a', 
		'\x14', '\x2', '\x2', '\x8CE', '\x8D0', '\x5', '\xE8', 'u', '\x2', '\x8CF', 
		'\x8CE', '\x3', '\x2', '\x2', '\x2', '\x8CF', '\x8D0', '\x3', '\x2', '\x2', 
		'\x2', '\x8D0', '\x8D1', '\x3', '\x2', '\x2', '\x2', '\x8D1', '\x8D2', 
		'\a', '\x8C', '\x2', '\x2', '\x8D2', '\x1B3', '\x3', '\x2', '\x2', '\x2', 
		'\x8D3', '\x8D5', '\x5', '\x112', '\x8A', '\x2', '\x8D4', '\x8D3', '\x3', 
		'\x2', '\x2', '\x2', '\x8D4', '\x8D5', '\x3', '\x2', '\x2', '\x2', '\x8D5', 
		'\x8D6', '\x3', '\x2', '\x2', '\x2', '\x8D6', '\x8D7', '\a', '&', '\x2', 
		'\x2', '\x8D7', '\x8D8', '\x5', 'l', '\x37', '\x2', '\x8D8', '\x8D9', 
		'\a', 'j', '\x2', '\x2', '\x8D9', '\x8E1', '\x5', '\x1BA', '\xDE', '\x2', 
		'\x8DA', '\x8DB', '\a', '\x1D', '\x2', '\x2', '\x8DB', '\x8DC', '\x5', 
		'l', '\x37', '\x2', '\x8DC', '\x8DD', '\a', 'j', '\x2', '\x2', '\x8DD', 
		'\x8DE', '\x5', '\x1BA', '\xDE', '\x2', '\x8DE', '\x8E0', '\x3', '\x2', 
		'\x2', '\x2', '\x8DF', '\x8DA', '\x3', '\x2', '\x2', '\x2', '\x8E0', '\x8E3', 
		'\x3', '\x2', '\x2', '\x2', '\x8E1', '\x8DF', '\x3', '\x2', '\x2', '\x2', 
		'\x8E1', '\x8E2', '\x3', '\x2', '\x2', '\x2', '\x8E2', '\x8E6', '\x3', 
		'\x2', '\x2', '\x2', '\x8E3', '\x8E1', '\x3', '\x2', '\x2', '\x2', '\x8E4', 
		'\x8E5', '\a', '\x1C', '\x2', '\x2', '\x8E5', '\x8E7', '\x5', '\x1BA', 
		'\xDE', '\x2', '\x8E6', '\x8E4', '\x3', '\x2', '\x2', '\x2', '\x8E6', 
		'\x8E7', '\x3', '\x2', '\x2', '\x2', '\x8E7', '\x8E8', '\x3', '\x2', '\x2', 
		'\x2', '\x8E8', '\x8E9', '\a', '\x1A', '\x2', '\x2', '\x8E9', '\x8EB', 
		'\a', 'j', '\x2', '\x2', '\x8EA', '\x8EC', '\x5', '\xE8', 'u', '\x2', 
		'\x8EB', '\x8EA', '\x3', '\x2', '\x2', '\x2', '\x8EB', '\x8EC', '\x3', 
		'\x2', '\x2', '\x2', '\x8EC', '\x8ED', '\x3', '\x2', '\x2', '\x2', '\x8ED', 
		'\x8EE', '\a', '\x8C', '\x2', '\x2', '\x8EE', '\x1B5', '\x3', '\x2', '\x2', 
		'\x2', '\x8EF', '\x8F1', '\x5', '\x112', '\x8A', '\x2', '\x8F0', '\x8EF', 
		'\x3', '\x2', '\x2', '\x2', '\x8F0', '\x8F1', '\x3', '\x2', '\x2', '\x2', 
		'\x8F1', '\x8F2', '\x3', '\x2', '\x2', '\x2', '\x8F2', '\x8F4', '\a', 
		'G', '\x2', '\x2', '\x8F3', '\x8F5', '\a', '+', '\x2', '\x2', '\x8F4', 
		'\x8F3', '\x3', '\x2', '\x2', '\x2', '\x8F4', '\x8F5', '\x3', '\x2', '\x2', 
		'\x2', '\x8F5', '\x8F6', '\x3', '\x2', '\x2', '\x2', '\x8F6', '\x8F7', 
		'\x5', '\x160', '\xB1', '\x2', '\x8F7', '\x8F8', '\a', '\xE', '\x2', '\x2', 
		'\x8F8', '\x8F9', '\x5', '\x162', '\xB2', '\x2', '\x8F9', '\x8FA', '\a', 
		'\x1A', '\x2', '\x2', '\x8FA', '\x8FC', '\a', 'G', '\x2', '\x2', '\x8FB', 
		'\x8FD', '\x5', '\xE8', 'u', '\x2', '\x8FC', '\x8FB', '\x3', '\x2', '\x2', 
		'\x2', '\x8FC', '\x8FD', '\x3', '\x2', '\x2', '\x2', '\x8FD', '\x8FE', 
		'\x3', '\x2', '\x2', '\x2', '\x8FE', '\x8FF', '\a', '\x8C', '\x2', '\x2', 
		'\x8FF', '\x1B7', '\x3', '\x2', '\x2', '\x2', '\x900', '\x90A', '\x5', 
		'\x1AE', '\xD8', '\x2', '\x901', '\x90A', '\x5', '\x1B4', '\xDB', '\x2', 
		'\x902', '\x90A', '\x5', '\x1B2', '\xDA', '\x2', '\x903', '\x90A', '\x5', 
		'\x1B6', '\xDC', '\x2', '\x904', '\x906', '\x5', '\x112', '\x8A', '\x2', 
		'\x905', '\x904', '\x3', '\x2', '\x2', '\x2', '\x905', '\x906', '\x3', 
		'\x2', '\x2', '\x2', '\x906', '\x907', '\x3', '\x2', '\x2', '\x2', '\x907', 
		'\x908', '\a', ';', '\x2', '\x2', '\x908', '\x90A', '\a', '\x8C', '\x2', 
		'\x2', '\x909', '\x900', '\x3', '\x2', '\x2', '\x2', '\x909', '\x901', 
		'\x3', '\x2', '\x2', '\x2', '\x909', '\x902', '\x3', '\x2', '\x2', '\x2', 
		'\x909', '\x903', '\x3', '\x2', '\x2', '\x2', '\x909', '\x905', '\x3', 
		'\x2', '\x2', '\x2', '\x90A', '\x1B9', '\x3', '\x2', '\x2', '\x2', '\x90B', 
		'\x90D', '\x5', '\x1B8', '\xDD', '\x2', '\x90C', '\x90B', '\x3', '\x2', 
		'\x2', '\x2', '\x90D', '\x910', '\x3', '\x2', '\x2', '\x2', '\x90E', '\x90C', 
		'\x3', '\x2', '\x2', '\x2', '\x90E', '\x90F', '\x3', '\x2', '\x2', '\x2', 
		'\x90F', '\x1BB', '\x3', '\x2', '\x2', '\x2', '\x910', '\x90E', '\x3', 
		'\x2', '\x2', '\x2', '\x911', '\x912', '\a', '[', '\x2', '\x2', '\x912', 
		'\x913', '\x5', '\x1AC', '\xD7', '\x2', '\x913', '\x914', '\a', '\x8D', 
		'\x2', '\x2', '\x914', '\x915', '\x5', '\x1AC', '\xD7', '\x2', '\x915', 
		'\x919', '\x3', '\x2', '\x2', '\x2', '\x916', '\x917', '\a', '\x38', '\x2', 
		'\x2', '\x917', '\x919', '\x5', '\x1AC', '\xD7', '\x2', '\x918', '\x911', 
		'\x3', '\x2', '\x2', '\x2', '\x918', '\x916', '\x3', '\x2', '\x2', '\x2', 
		'\x919', '\x1BD', '\x3', '\x2', '\x2', '\x2', '\x91A', '\x91B', '\a', 
		'I', '\x2', '\x2', '\x91B', '\x91C', '\x5', '\xEA', 'v', '\x2', '\x91C', 
		'\x91D', '\a', '\x93', '\x2', '\x2', '\x91D', '\x91E', '\x5', '\x1DA', 
		'\xEE', '\x2', '\x91E', '\x91F', '\x5', '\x1BC', '\xDF', '\x2', '\x91F', 
		'\x920', '\a', '\x8C', '\x2', '\x2', '\x920', '\x1BF', '\x3', '\x2', '\x2', 
		'\x2', '\x921', '\x922', '\a', '.', '\x2', '\x2', '\x922', '\x923', '\x5', 
		'\x176', '\xBC', '\x2', '\x923', '\x924', '\a', 'm', '\x2', '\x2', '\x924', 
		'\x925', '\x5', '\xC2', '\x62', '\x2', '\x925', '\x926', '\a', '\x8C', 
		'\x2', '\x2', '\x926', '\x1C1', '\x3', '\x2', '\x2', '\x2', '\x927', '\x928', 
		'\a', '^', '\x2', '\x2', '\x928', '\x929', '\x5', '\xE8', 'u', '\x2', 
		'\x929', '\x92A', '\a', '+', '\x2', '\x2', '\x92A', '\x92B', '\x5', '\x1C4', 
		'\xE3', '\x2', '\x92B', '\x92C', '\a', '\x8C', '\x2', '\x2', '\x92C', 
		'\x1C3', '\x3', '\x2', '\x2', '\x2', '\x92D', '\x92F', '\x5', '\x126', 
		'\x94', '\x2', '\x92E', '\x930', '\x5', '\xEE', 'x', '\x2', '\x92F', '\x92E', 
		'\x3', '\x2', '\x2', '\x2', '\x92F', '\x930', '\x3', '\x2', '\x2', '\x2', 
		'\x930', '\x937', '\x3', '\x2', '\x2', '\x2', '\x931', '\x932', '\a', 
		'\x64', '\x2', '\x2', '\x932', '\x933', '\x5', '\xC2', '\x62', '\x2', 
		'\x933', '\x934', '\a', '\x5', '\x2', '\x2', '\x934', '\x935', '\x5', 
		'\xC2', '\x62', '\x2', '\x935', '\x936', '\a', '\x62', '\x2', '\x2', '\x936', 
		'\x938', '\x3', '\x2', '\x2', '\x2', '\x937', '\x931', '\x3', '\x2', '\x2', 
		'\x2', '\x937', '\x938', '\x3', '\x2', '\x2', '\x2', '\x938', '\x1C5', 
		'\x3', '\x2', '\x2', '\x2', '\x939', '\x93A', '\x5', '\x1D0', '\xE9', 
		'\x2', '\x93A', '\x93B', '\a', '+', '\x2', '\x2', '\x93B', '\x93C', '\x5', 
		'\x1CC', '\xE7', '\x2', '\x93C', '\x93D', '\a', '\xE', '\x2', '\x2', '\x93D', 
		'\x93E', '\x5', '\x1D6', '\xEC', '\x2', '\x93E', '\x940', '\a', '\x1A', 
		'\x2', '\x2', '\x93F', '\x941', '\x5', '\x1CE', '\xE8', '\x2', '\x940', 
		'\x93F', '\x3', '\x2', '\x2', '\x2', '\x940', '\x941', '\x3', '\x2', '\x2', 
		'\x2', '\x941', '\x943', '\x3', '\x2', '\x2', '\x2', '\x942', '\x944', 
		'\x5', '\x90', 'I', '\x2', '\x943', '\x942', '\x3', '\x2', '\x2', '\x2', 
		'\x943', '\x944', '\x3', '\x2', '\x2', '\x2', '\x944', '\x945', '\x3', 
		'\x2', '\x2', '\x2', '\x945', '\x946', '\a', '\x8C', '\x2', '\x2', '\x946', 
		'\x1C7', '\x3', '\x2', '\x2', '\x2', '\x947', '\x948', '\x5', '\x1D0', 
		'\xE9', '\x2', '\x948', '\x949', '\a', '\x8C', '\x2', '\x2', '\x949', 
		'\x1C9', '\x3', '\x2', '\x2', '\x2', '\x94A', '\x958', '\x5', '\x1C8', 
		'\xE5', '\x2', '\x94B', '\x958', '\x5', '\x1C6', '\xE4', '\x2', '\x94C', 
		'\x958', '\x5', '\x1EC', '\xF7', '\x2', '\x94D', '\x958', '\x5', '\x1D8', 
		'\xED', '\x2', '\x94E', '\x958', '\x5', '~', '@', '\x2', '\x94F', '\x958', 
		'\x5', '\x1F8', '\xFD', '\x2', '\x950', '\x958', '\x5', '\xC6', '\x64', 
		'\x2', '\x951', '\x958', '\x5', '\x12', '\n', '\x2', '\x952', '\x958', 
		'\x5', '.', '\x18', '\x2', '\x953', '\x958', '\x5', '\x32', '\x1A', '\x2', 
		'\x954', '\x958', '\x5', '\x1F4', '\xFB', '\x2', '\x955', '\x958', '\x5', 
		'\xE4', 's', '\x2', '\x956', '\x958', '\x5', '\xE2', 'r', '\x2', '\x957', 
		'\x94A', '\x3', '\x2', '\x2', '\x2', '\x957', '\x94B', '\x3', '\x2', '\x2', 
		'\x2', '\x957', '\x94C', '\x3', '\x2', '\x2', '\x2', '\x957', '\x94D', 
		'\x3', '\x2', '\x2', '\x2', '\x957', '\x94E', '\x3', '\x2', '\x2', '\x2', 
		'\x957', '\x94F', '\x3', '\x2', '\x2', '\x2', '\x957', '\x950', '\x3', 
		'\x2', '\x2', '\x2', '\x957', '\x951', '\x3', '\x2', '\x2', '\x2', '\x957', 
		'\x952', '\x3', '\x2', '\x2', '\x2', '\x957', '\x953', '\x3', '\x2', '\x2', 
		'\x2', '\x957', '\x954', '\x3', '\x2', '\x2', '\x2', '\x957', '\x955', 
		'\x3', '\x2', '\x2', '\x2', '\x957', '\x956', '\x3', '\x2', '\x2', '\x2', 
		'\x958', '\x1CB', '\x3', '\x2', '\x2', '\x2', '\x959', '\x95B', '\x5', 
		'\x1CA', '\xE6', '\x2', '\x95A', '\x959', '\x3', '\x2', '\x2', '\x2', 
		'\x95B', '\x95E', '\x3', '\x2', '\x2', '\x2', '\x95C', '\x95A', '\x3', 
		'\x2', '\x2', '\x2', '\x95C', '\x95D', '\x3', '\x2', '\x2', '\x2', '\x95D', 
		'\x1CD', '\x3', '\x2', '\x2', '\x2', '\x95E', '\x95C', '\x3', '\x2', '\x2', 
		'\x2', '\x95F', '\x960', '\t', '\xF', '\x2', '\x2', '\x960', '\x1CF', 
		'\x3', '\x2', '\x2', '\x2', '\x961', '\x964', '\x5', '\x1D2', '\xEA', 
		'\x2', '\x962', '\x964', '\x5', '\x1D4', '\xEB', '\x2', '\x963', '\x961', 
		'\x3', '\x2', '\x2', '\x2', '\x963', '\x962', '\x3', '\x2', '\x2', '\x2', 
		'\x964', '\x1D1', '\x3', '\x2', '\x2', '\x2', '\x965', '\x966', '\a', 
		'\x46', '\x2', '\x2', '\x966', '\x96B', '\x5', '\x90', 'I', '\x2', '\x967', 
		'\x968', '\a', '\x8F', '\x2', '\x2', '\x968', '\x969', '\x5', '\xCE', 
		'h', '\x2', '\x969', '\x96A', '\a', '\x90', '\x2', '\x2', '\x96A', '\x96C', 
		'\x3', '\x2', '\x2', '\x2', '\x96B', '\x967', '\x3', '\x2', '\x2', '\x2', 
		'\x96B', '\x96C', '\x3', '\x2', '\x2', '\x2', '\x96C', '\x1D3', '\x3', 
		'\x2', '\x2', '\x2', '\x96D', '\x96F', '\t', '\x10', '\x2', '\x2', '\x96E', 
		'\x96D', '\x3', '\x2', '\x2', '\x2', '\x96E', '\x96F', '\x3', '\x2', '\x2', 
		'\x2', '\x96F', '\x970', '\x3', '\x2', '\x2', '\x2', '\x970', '\x971', 
		'\a', '!', '\x2', '\x2', '\x971', '\x976', '\x5', '\x90', 'I', '\x2', 
		'\x972', '\x973', '\a', '\x8F', '\x2', '\x2', '\x973', '\x974', '\x5', 
		'\xCE', 'h', '\x2', '\x974', '\x975', '\a', '\x90', '\x2', '\x2', '\x975', 
		'\x977', '\x3', '\x2', '\x2', '\x2', '\x976', '\x972', '\x3', '\x2', '\x2', 
		'\x2', '\x976', '\x977', '\x3', '\x2', '\x2', '\x2', '\x977', '\x978', 
		'\x3', '\x2', '\x2', '\x2', '\x978', '\x979', '\a', 'R', '\x2', '\x2', 
		'\x979', '\x97A', '\x5', '\x1DA', '\xEE', '\x2', '\x97A', '\x1D5', '\x3', 
		'\x2', '\x2', '\x2', '\x97B', '\x97D', '\x5', '\x19C', '\xCF', '\x2', 
		'\x97C', '\x97B', '\x3', '\x2', '\x2', '\x2', '\x97D', '\x980', '\x3', 
		'\x2', '\x2', '\x2', '\x97E', '\x97C', '\x3', '\x2', '\x2', '\x2', '\x97E', 
		'\x97F', '\x3', '\x2', '\x2', '\x2', '\x97F', '\x1D7', '\x3', '\x2', '\x2', 
		'\x2', '\x980', '\x97E', '\x3', '\x2', '\x2', '\x2', '\x981', '\x982', 
		'\a', '_', '\x2', '\x2', '\x982', '\x983', '\x5', '\xE8', 'u', '\x2', 
		'\x983', '\x984', '\a', '+', '\x2', '\x2', '\x984', '\x985', '\x5', '\x1DA', 
		'\xEE', '\x2', '\x985', '\x986', '\a', '\x8C', '\x2', '\x2', '\x986', 
		'\x1D9', '\x3', '\x2', '\x2', '\x2', '\x987', '\x989', '\x5', '\x12A', 
		'\x96', '\x2', '\x988', '\x98A', '\x5', '\x12A', '\x96', '\x2', '\x989', 
		'\x988', '\x3', '\x2', '\x2', '\x2', '\x989', '\x98A', '\x3', '\x2', '\x2', 
		'\x2', '\x98A', '\x98C', '\x3', '\x2', '\x2', '\x2', '\x98B', '\x98D', 
		'\x5', '\x84', '\x43', '\x2', '\x98C', '\x98B', '\x3', '\x2', '\x2', '\x2', 
		'\x98C', '\x98D', '\x3', '\x2', '\x2', '\x2', '\x98D', '\x98F', '\x3', 
		'\x2', '\x2', '\x2', '\x98E', '\x990', '\x5', '\x1EA', '\xF6', '\x2', 
		'\x98F', '\x98E', '\x3', '\x2', '\x2', '\x2', '\x98F', '\x990', '\x3', 
		'\x2', '\x2', '\x2', '\x990', '\x1DB', '\x3', '\x2', '\x2', '\x2', '\x991', 
		'\x996', '\x5', '\xE8', 'u', '\x2', '\x992', '\x996', '\a', '\x80', '\x2', 
		'\x2', '\x993', '\x996', '\a', '\x81', '\x2', '\x2', '\x994', '\x996', 
		'\a', '\b', '\x2', '\x2', '\x995', '\x991', '\x3', '\x2', '\x2', '\x2', 
		'\x995', '\x992', '\x3', '\x2', '\x2', '\x2', '\x995', '\x993', '\x3', 
		'\x2', '\x2', '\x2', '\x995', '\x994', '\x3', '\x2', '\x2', '\x2', '\x996', 
		'\x1DD', '\x3', '\x2', '\x2', '\x2', '\x997', '\x99A', '\x5', '\x126', 
		'\x94', '\x2', '\x998', '\x99A', '\x5', '\x10', '\t', '\x2', '\x999', 
		'\x997', '\x3', '\x2', '\x2', '\x2', '\x999', '\x998', '\x3', '\x2', '\x2', 
		'\x2', '\x99A', '\x1DF', '\x3', '\x2', '\x2', '\x2', '\x99B', '\x9A1', 
		'\x5', '\xC4', '\x63', '\x2', '\x99C', '\x99D', '\x5', '\x124', '\x93', 
		'\x2', '\x99D', '\x99E', '\x5', '\xC4', '\x63', '\x2', '\x99E', '\x9A0', 
		'\x3', '\x2', '\x2', '\x2', '\x99F', '\x99C', '\x3', '\x2', '\x2', '\x2', 
		'\x9A0', '\x9A3', '\x3', '\x2', '\x2', '\x2', '\x9A1', '\x99F', '\x3', 
		'\x2', '\x2', '\x2', '\x9A1', '\x9A2', '\x3', '\x2', '\x2', '\x2', '\x9A2', 
		'\x1E1', '\x3', '\x2', '\x2', '\x2', '\x9A3', '\x9A1', '\x3', '\x2', '\x2', 
		'\x2', '\x9A4', '\x9A7', '\x5', '\x126', '\x94', '\x2', '\x9A5', '\x9A6', 
		'\a', '\x63', '\x2', '\x2', '\x9A6', '\x9A8', '\x5', '\x126', '\x94', 
		'\x2', '\x9A7', '\x9A5', '\x3', '\x2', '\x2', '\x2', '\x9A7', '\x9A8', 
		'\x3', '\x2', '\x2', '\x2', '\x9A8', '\x1E3', '\x3', '\x2', '\x2', '\x2', 
		'\x9A9', '\x9AA', '\a', '`', '\x2', '\x2', '\x9AA', '\x9AB', '\x5', '\xEA', 
		'v', '\x2', '\x9AB', '\x9AC', '\a', '\x93', '\x2', '\x2', '\x9AC', '\x9AD', 
		'\x5', '\x1C4', '\xE3', '\x2', '\x9AD', '\x9AE', '\a', '\x8C', '\x2', 
		'\x2', '\x9AE', '\x1E5', '\x3', '\x2', '\x2', '\x2', '\x9AF', '\x9B1', 
		'\x5', '\xEA', 'v', '\x2', '\x9B0', '\x9B2', '\x5', '\x1EA', '\xF6', '\x2', 
		'\x9B1', '\x9B0', '\x3', '\x2', '\x2', '\x2', '\x9B1', '\x9B2', '\x3', 
		'\x2', '\x2', '\x2', '\x9B2', '\x9B5', '\x3', '\x2', '\x2', '\x2', '\x9B3', 
		'\x9B4', '\a', '\x89', '\x2', '\x2', '\x9B4', '\x9B6', '\x5', '\xC2', 
		'\x62', '\x2', '\x9B5', '\x9B3', '\x3', '\x2', '\x2', '\x2', '\x9B5', 
		'\x9B6', '\x3', '\x2', '\x2', '\x2', '\x9B6', '\x9B7', '\x3', '\x2', '\x2', 
		'\x2', '\x9B7', '\x9B8', '\a', '\x62', '\x2', '\x2', '\x9B8', '\x1E7', 
		'\x3', '\x2', '\x2', '\x2', '\x9B9', '\x9BA', '\a', ' ', '\x2', '\x2', 
		'\x9BA', '\x9BB', '\x5', '\xC2', '\x62', '\x2', '\x9BB', '\x1E9', '\x3', 
		'\x2', '\x2', '\x2', '\x9BC', '\x9BD', '\a', '\x64', '\x2', '\x2', '\x9BD', 
		'\x9BE', '\x5', '\xC2', '\x62', '\x2', '\x9BE', '\x1EB', '\x3', '\x2', 
		'\x2', '\x2', '\x9BF', '\x9C0', '\a', '\x66', '\x2', '\x2', '\x9C0', '\x9C3', 
		'\x5', '\xE8', 'u', '\x2', '\x9C1', '\x9C2', '\a', '+', '\x2', '\x2', 
		'\x9C2', '\x9C4', '\x5', '\x1EE', '\xF8', '\x2', '\x9C3', '\x9C1', '\x3', 
		'\x2', '\x2', '\x2', '\x9C3', '\x9C4', '\x3', '\x2', '\x2', '\x2', '\x9C4', 
		'\x9C5', '\x3', '\x2', '\x2', '\x2', '\x9C5', '\x9C6', '\a', '\x8C', '\x2', 
		'\x2', '\x9C6', '\x1ED', '\x3', '\x2', '\x2', '\x2', '\x9C7', '\x9CC', 
		'\x5', '\x18C', '\xC7', '\x2', '\x9C8', '\x9CC', '\x5', '\x62', '\x32', 
		'\x2', '\x9C9', '\x9CC', '\x5', '\x4', '\x3', '\x2', '\x9CA', '\x9CC', 
		'\x5', '\xCC', 'g', '\x2', '\x9CB', '\x9C7', '\x3', '\x2', '\x2', '\x2', 
		'\x9CB', '\x9C8', '\x3', '\x2', '\x2', '\x2', '\x9CB', '\x9C9', '\x3', 
		'\x2', '\x2', '\x2', '\x9CB', '\x9CA', '\x3', '\x2', '\x2', '\x2', '\x9CC', 
		'\x1EF', '\x3', '\x2', '\x2', '\x2', '\x9CD', '\x9CE', '\a', '\v', '\x2', 
		'\x2', '\x9CE', '\x9CF', '\a', '\x8F', '\x2', '\x2', '\x9CF', '\x9D4', 
		'\x5', '\xF2', 'z', '\x2', '\x9D0', '\x9D1', '\a', '\x8D', '\x2', '\x2', 
		'\x9D1', '\x9D3', '\x5', '\xF2', 'z', '\x2', '\x9D2', '\x9D0', '\x3', 
		'\x2', '\x2', '\x2', '\x9D3', '\x9D6', '\x3', '\x2', '\x2', '\x2', '\x9D4', 
		'\x9D2', '\x3', '\x2', '\x2', '\x2', '\x9D4', '\x9D5', '\x3', '\x2', '\x2', 
		'\x2', '\x9D5', '\x9D7', '\x3', '\x2', '\x2', '\x2', '\x9D6', '\x9D4', 
		'\x3', '\x2', '\x2', '\x2', '\x9D7', '\x9D8', '\a', '\x90', '\x2', '\x2', 
		'\x9D8', '\x9D9', '\a', '<', '\x2', '\x2', '\x9D9', '\x9DA', '\x5', '\x1DA', 
		'\xEE', '\x2', '\x9DA', '\x1F1', '\x3', '\x2', '\x2', '\x2', '\x9DB', 
		'\x9DC', '\a', '\v', '\x2', '\x2', '\x9DC', '\x9DD', '\a', '\x8F', '\x2', 
		'\x2', '\x9DD', '\x9E2', '\x5', '\xF2', 'z', '\x2', '\x9DE', '\x9DF', 
		'\a', '\x8D', '\x2', '\x2', '\x9DF', '\x9E1', '\x5', '\xF2', 'z', '\x2', 
		'\x9E0', '\x9DE', '\x3', '\x2', '\x2', '\x2', '\x9E1', '\x9E4', '\x3', 
		'\x2', '\x2', '\x2', '\x9E2', '\x9E0', '\x3', '\x2', '\x2', '\x2', '\x9E2', 
		'\x9E3', '\x3', '\x2', '\x2', '\x2', '\x9E3', '\x9E5', '\x3', '\x2', '\x2', 
		'\x2', '\x9E4', '\x9E2', '\x3', '\x2', '\x2', '\x2', '\x9E5', '\x9E6', 
		'\a', '\x90', '\x2', '\x2', '\x9E6', '\x9E7', '\a', '<', '\x2', '\x2', 
		'\x9E7', '\x9E8', '\x5', '\x1C4', '\xE3', '\x2', '\x9E8', '\x1F3', '\x3', 
		'\x2', '\x2', '\x2', '\x9E9', '\x9EA', '\a', 'j', '\x2', '\x2', '\x9EA', 
		'\x9EF', '\x5', '\x12A', '\x96', '\x2', '\x9EB', '\x9EC', '\a', '\x8D', 
		'\x2', '\x2', '\x9EC', '\x9EE', '\x5', '\x12A', '\x96', '\x2', '\x9ED', 
		'\x9EB', '\x3', '\x2', '\x2', '\x2', '\x9EE', '\x9F1', '\x3', '\x2', '\x2', 
		'\x2', '\x9EF', '\x9ED', '\x3', '\x2', '\x2', '\x2', '\x9EF', '\x9F0', 
		'\x3', '\x2', '\x2', '\x2', '\x9F0', '\x9F2', '\x3', '\x2', '\x2', '\x2', 
		'\x9F1', '\x9EF', '\x3', '\x2', '\x2', '\x2', '\x9F2', '\x9F3', '\a', 
		'\x8C', '\x2', '\x2', '\x9F3', '\x1F5', '\x3', '\x2', '\x2', '\x2', '\x9F4', 
		'\x9F6', '\x5', '\x112', '\x8A', '\x2', '\x9F5', '\x9F4', '\x3', '\x2', 
		'\x2', '\x2', '\x9F5', '\x9F6', '\x3', '\x2', '\x2', '\x2', '\x9F6', '\x9F7', 
		'\x3', '\x2', '\x2', '\x2', '\x9F7', '\x9F8', '\x5', '\x1DE', '\xF0', 
		'\x2', '\x9F8', '\x9F9', '\a', '\x89', '\x2', '\x2', '\x9F9', '\x9FA', 
		'\x5', '\xC2', '\x62', '\x2', '\x9FA', '\x9FB', '\a', '\x8C', '\x2', '\x2', 
		'\x9FB', '\x1F7', '\x3', '\x2', '\x2', '\x2', '\x9FC', '\x9FE', '\a', 
		'W', '\x2', '\x2', '\x9FD', '\x9FC', '\x3', '\x2', '\x2', '\x2', '\x9FD', 
		'\x9FE', '\x3', '\x2', '\x2', '\x2', '\x9FE', '\x9FF', '\x3', '\x2', '\x2', 
		'\x2', '\x9FF', '\xA00', '\a', 'k', '\x2', '\x2', '\xA00', '\xA01', '\x5', 
		'\xEA', 'v', '\x2', '\xA01', '\xA02', '\a', '\x93', '\x2', '\x2', '\xA02', 
		'\xA05', '\x5', '\x1DA', '\xEE', '\x2', '\xA03', '\xA04', '\a', '\x89', 
		'\x2', '\x2', '\xA04', '\xA06', '\x5', '\xC2', '\x62', '\x2', '\xA05', 
		'\xA03', '\x3', '\x2', '\x2', '\x2', '\xA05', '\xA06', '\x3', '\x2', '\x2', 
		'\x2', '\xA06', '\xA07', '\x3', '\x2', '\x2', '\x2', '\xA07', '\xA08', 
		'\a', '\x8C', '\x2', '\x2', '\xA08', '\x1F9', '\x3', '\x2', '\x2', '\x2', 
		'\xA09', '\xA0B', '\x5', '\x112', '\x8A', '\x2', '\xA0A', '\xA09', '\x3', 
		'\x2', '\x2', '\x2', '\xA0A', '\xA0B', '\x3', '\x2', '\x2', '\x2', '\xA0B', 
		'\xA0C', '\x3', '\x2', '\x2', '\x2', '\xA0C', '\xA0E', '\a', 'l', '\x2', 
		'\x2', '\xA0D', '\xA0F', '\x5', '\x196', '\xCC', '\x2', '\xA0E', '\xA0D', 
		'\x3', '\x2', '\x2', '\x2', '\xA0E', '\xA0F', '\x3', '\x2', '\x2', '\x2', 
		'\xA0F', '\xA11', '\x3', '\x2', '\x2', '\x2', '\xA10', '\xA12', '\x5', 
		'n', '\x38', '\x2', '\xA11', '\xA10', '\x3', '\x2', '\x2', '\x2', '\xA11', 
		'\xA12', '\x3', '\x2', '\x2', '\x2', '\xA12', '\xA14', '\x3', '\x2', '\x2', 
		'\x2', '\xA13', '\xA15', '\x5', '\x1E8', '\xF5', '\x2', '\xA14', '\xA13', 
		'\x3', '\x2', '\x2', '\x2', '\xA14', '\xA15', '\x3', '\x2', '\x2', '\x2', 
		'\xA15', '\xA16', '\x3', '\x2', '\x2', '\x2', '\xA16', '\xA17', '\a', 
		'\x8C', '\x2', '\x2', '\xA17', '\x1FB', '\x3', '\x2', '\x2', '\x2', '\xA18', 
		'\xA1D', '\x5', '\x1FE', '\x100', '\x2', '\xA19', '\xA1A', '\a', '\x8D', 
		'\x2', '\x2', '\xA1A', '\xA1C', '\x5', '\x1FE', '\x100', '\x2', '\xA1B', 
		'\xA19', '\x3', '\x2', '\x2', '\x2', '\xA1C', '\xA1F', '\x3', '\x2', '\x2', 
		'\x2', '\xA1D', '\xA1B', '\x3', '\x2', '\x2', '\x2', '\xA1D', '\xA1E', 
		'\x3', '\x2', '\x2', '\x2', '\xA1E', '\xA22', '\x3', '\x2', '\x2', '\x2', 
		'\xA1F', '\xA1D', '\x3', '\x2', '\x2', '\x2', '\xA20', '\xA22', '\a', 
		'g', '\x2', '\x2', '\xA21', '\xA18', '\x3', '\x2', '\x2', '\x2', '\xA21', 
		'\xA20', '\x3', '\x2', '\x2', '\x2', '\xA22', '\x1FD', '\x3', '\x2', '\x2', 
		'\x2', '\xA23', '\xA26', '\x5', '\xC2', '\x62', '\x2', '\xA24', '\xA25', 
		'\a', '\x6', '\x2', '\x2', '\xA25', '\xA27', '\x5', '\xC2', '\x62', '\x2', 
		'\xA26', '\xA24', '\x3', '\x2', '\x2', '\x2', '\xA26', '\xA27', '\x3', 
		'\x2', '\x2', '\x2', '\xA27', '\x1FF', '\x3', '\x2', '\x2', '\x2', '\x128', 
		'\x207', '\x20B', '\x211', '\x21B', '\x225', '\x22E', '\x233', '\x23A', 
		'\x23E', '\x243', '\x24F', '\x252', '\x259', '\x25F', '\x263', '\x267', 
		'\x26A', '\x271', '\x276', '\x27B', '\x27F', '\x285', '\x289', '\x28C', 
		'\x294', '\x29D', '\x2AC', '\x2BB', '\x2BE', '\x2C1', '\x2C8', '\x2CE', 
		'\x2EB', '\x2F0', '\x2F7', '\x2F9', '\x2FF', '\x301', '\x308', '\x30B', 
		'\x313', '\x316', '\x31F', '\x326', '\x32B', '\x32E', '\x334', '\x33F', 
		'\x347', '\x34B', '\x34F', '\x354', '\x35C', '\x361', '\x36E', '\x375', 
		'\x37D', '\x380', '\x389', '\x38C', '\x38F', '\x394', '\x39B', '\x39E', 
		'\x3A8', '\x3AC', '\x3AF', '\x3B2', '\x3B8', '\x3BC', '\x3BF', '\x3C3', 
		'\x3C8', '\x3CB', '\x3D1', '\x3D4', '\x3D8', '\x3EA', '\x3EC', '\x3F7', 
		'\x3FA', '\x401', '\x406', '\x40B', '\x418', '\x428', '\x42D', '\x432', 
		'\x437', '\x43A', '\x43F', '\x449', '\x455', '\x45A', '\x46D', '\x472', 
		'\x478', '\x47F', '\x489', '\x48D', '\x490', '\x4A8', '\x4AD', '\x4B2', 
		'\x4B5', '\x4B8', '\x4BF', '\x4C4', '\x4CD', '\x4D2', '\x4D8', '\x4DC', 
		'\x4E4', '\x4EA', '\x4EE', '\x4F2', '\x4FC', '\x502', '\x508', '\x50F', 
		'\x517', '\x528', '\x530', '\x53A', '\x53E', '\x543', '\x549', '\x551', 
		'\x55E', '\x569', '\x570', '\x58E', '\x592', '\x59F', '\x5A4', '\x5A9', 
		'\x5B3', '\x5BA', '\x5C1', '\x5CA', '\x5CE', '\x5D5', '\x5DA', '\x5DD', 
		'\x5E2', '\x5E7', '\x5EF', '\x5FD', '\x605', '\x60D', '\x614', '\x619', 
		'\x61E', '\x622', '\x626', '\x62C', '\x630', '\x634', '\x63C', '\x641', 
		'\x646', '\x64C', '\x657', '\x65E', '\x667', '\x66D', '\x670', '\x677', 
		'\x681', '\x686', '\x68D', '\x694', '\x69B', '\x6A6', '\x6AE', '\x6B8', 
		'\x6BF', '\x6C3', '\x6C7', '\x6CD', '\x6D5', '\x6D8', '\x6DB', '\x6E5', 
		'\x6E8', '\x6F7', '\x6FC', '\x705', '\x708', '\x71F', '\x724', '\x734', 
		'\x73A', '\x753', '\x758', '\x766', '\x76B', '\x771', '\x779', '\x77C', 
		'\x78E', '\x793', '\x797', '\x79A', '\x7A1', '\x7A4', '\x7AB', '\x7AF', 
		'\x7B6', '\x7C0', '\x7C5', '\x7CC', '\x7D1', '\x7D9', '\x7DF', '\x7E8', 
		'\x7ED', '\x7F3', '\x7F8', '\x7FE', '\x803', '\x809', '\x80E', '\x812', 
		'\x820', '\x824', '\x83E', '\x849', '\x84F', '\x85E', '\x864', '\x86A', 
		'\x86F', '\x874', '\x87E', '\x882', '\x88D', '\x892', '\x89A', '\x89D', 
		'\x8A1', '\x8A6', '\x8AE', '\x8B2', '\x8B8', '\x8C2', '\x8CA', '\x8CF', 
		'\x8D4', '\x8E1', '\x8E6', '\x8EB', '\x8F0', '\x8F4', '\x8FC', '\x905', 
		'\x909', '\x90E', '\x918', '\x92F', '\x937', '\x940', '\x943', '\x957', 
		'\x95C', '\x963', '\x96B', '\x96E', '\x976', '\x97E', '\x989', '\x98C', 
		'\x98F', '\x995', '\x999', '\x9A1', '\x9A7', '\x9B1', '\x9B5', '\x9C3', 
		'\x9CB', '\x9D4', '\x9E2', '\x9EF', '\x9F5', '\x9FD', '\xA05', '\xA0A', 
		'\xA0E', '\xA11', '\xA14', '\xA1D', '\xA21', '\xA26',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
